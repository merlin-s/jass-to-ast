// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`smoke Blizzard.j 1`] = `
"Program [
	Comment \\"===========================================================================\\"
	Comment \\" Blizzard.j ( define Jass2 functions that need to be in every map script )\\"
	Comment \\"===========================================================================\\"
	EmptyLine {}
	EmptyLine {}
	Globals {
		globals: Statements [
			Comment \\"-----------------------------------------------------------------------\\"
			Comment \\" Constants\\"
			Comment \\"\\"
			EmptyLine {}
			Comment \\" Misc constants\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_PI\\"
				value: Number 3.14159
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_E\\"
				value: Number 2.71828
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CELLWIDTH\\"
				value: Number 128
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CLIFFHEIGHT\\"
				value: Number 128
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_UNIT_FACING\\"
				value: Number 270
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_RADTODEG\\"
				value: BinaryOp {
					left: Number 180
					operator: String \\"/\\"
					right: Name \\"bj_PI\\"
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_DEGTORAD\\"
				value: BinaryOp {
					left: Name \\"bj_PI\\"
					operator: String \\"/\\"
					right: Number 180
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_QUEST\\"
				value: Number 20
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_QUESTUPDATE\\"
				value: Number 20
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_QUESTDONE\\"
				value: Number 20
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_QUESTFAILED\\"
				value: Number 20
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_QUESTREQUIREMENT\\"
				value: Number 20
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_MISSIONFAILED\\"
				value: Number 20
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_ALWAYSHINT\\"
				value: Number 12
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_HINT\\"
				value: Number 12
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_SECRET\\"
				value: Number 10
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_UNITACQUIRED\\"
				value: Number 15
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_UNITAVAILABLE\\"
				value: Number 10
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_ITEMACQUIRED\\"
				value: Number 10
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TEXT_DELAY_WARNING\\"
				value: Number 12
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_QUEUE_DELAY_QUEST\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_QUEUE_DELAY_HINT\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_QUEUE_DELAY_SECRET\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_HANDICAP_EASY\\"
				value: Number 60
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_HANDICAP_NORMAL\\"
				value: Number 90
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_HANDICAPDAMAGE_EASY\\"
				value: Number 50
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_HANDICAPDAMAGE_NORMAL\\"
				value: Number 90
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_HANDICAPREVIVE_NOTHARD\\"
				value: Number 50
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_GAME_STARTED_THRESHOLD\\"
				value: Number 0.01
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_WAIT_FOR_COND_MIN_INTERVAL\\"
				value: Number 0.1
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_POLLED_WAIT_INTERVAL\\"
				value: Number 0.1
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_POLLED_WAIT_SKIP_THRESHOLD\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Game constants\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_INVENTORY\\"
				value: Number 6
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_PLAYERS\\"
				value: Call {
					name: String \\"GetBJMaxPlayers\\"
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_PLAYER_NEUTRAL_VICTIM\\"
				value: Call {
					name: String \\"GetBJPlayerNeutralVictim\\"
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_PLAYER_NEUTRAL_EXTRA\\"
				value: Call {
					name: String \\"GetBJPlayerNeutralExtra\\"
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_PLAYER_SLOTS\\"
				value: Call {
					name: String \\"GetBJMaxPlayerSlots\\"
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_SKELETONS\\"
				value: Number 25
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_STOCK_ITEM_SLOTS\\"
				value: Number 11
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_STOCK_UNIT_SLOTS\\"
				value: Number 11
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_ITEM_LEVEL\\"
				value: Number 10
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Auto Save constants\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_CHECKPOINTS\\"
				value: Number 5
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Ideally these would be looked up from Units/MiscData.txt,\\"
			Comment \\" but there is currently no script functionality exposed to do that\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TOD_DAWN\\"
				value: Number 6
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TOD_DUSK\\"
				value: Number 18
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Melee game settings:\\"
			Comment \\"   - Starting Time of Day (TOD)\\"
			Comment \\"   - Starting Gold\\"
			Comment \\"   - Starting Lumber\\"
			Comment \\"   - Starting Hero Tokens (free heroes)\\"
			Comment \\"   - Max heroes allowed per player\\"
			Comment \\"   - Max heroes allowed per hero type\\"
			Comment \\"   - Distance from start loc to search for nearby mines\\"
			Comment \\"\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_MELEE_STARTING_TOD\\"
				value: Number 8
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_STARTING_GOLD_V0\\"
				value: Number 750
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_STARTING_GOLD_V1\\"
				value: Number 500
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_STARTING_LUMBER_V0\\"
				value: Number 200
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_STARTING_LUMBER_V1\\"
				value: Number 150
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_STARTING_HERO_TOKENS\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_HERO_LIMIT\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_HERO_TYPE_LIMIT\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_MELEE_MINE_SEARCH_RADIUS\\"
				value: Number 2000
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_MELEE_CLEAR_UNITS_RADIUS\\"
				value: Number 1500
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_MELEE_CRIPPLE_TIMEOUT\\"
				value: Number 120
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_MELEE_CRIPPLE_MSG_DURATION\\"
				value: Number 20
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_MAX_TWINKED_HEROES_V0\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_MAX_TWINKED_HEROES_V1\\"
				value: Number 1
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Delay between a creep's death and the time it may drop an item.\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CREEP_ITEM_DELAY\\"
				value: Number 0.5
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Timing settings for Marketplace inventories.\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_STOCK_RESTOCK_INITIAL_DELAY\\"
				value: Number 120
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_STOCK_RESTOCK_INTERVAL\\"
				value: Number 30
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_STOCK_MAX_ITERATIONS\\"
				value: Number 20
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Max events registered by a single \\\\\\"dest dies in region\\\\\\" event.\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_DEST_IN_REGION_EVENTS\\"
				value: Number 64
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Camera settings\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERA_MIN_FARZ\\"
				value: Number 100
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERA_DEFAULT_DISTANCE\\"
				value: Number 1650
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERA_DEFAULT_FARZ\\"
				value: Number 5000
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERA_DEFAULT_AOA\\"
				value: Number 304
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERA_DEFAULT_FOV\\"
				value: Number 70
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERA_DEFAULT_ROLL\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERA_DEFAULT_ROTATION\\"
				value: Number 90
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Rescue\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_RESCUE_PING_TIME\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Transmission behavior settings\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_NOTHING_SOUND_DURATION\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TRANSMISSION_PING_TIME\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_TRANSMISSION_IND_RED\\"
				value: Number 255
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_TRANSMISSION_IND_BLUE\\"
				value: Number 255
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_TRANSMISSION_IND_GREEN\\"
				value: Number 255
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_TRANSMISSION_IND_ALPHA\\"
				value: Number 255
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_TRANSMISSION_PORT_HANGTIME\\"
				value: Number 1.5
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Cinematic mode settings\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_INTERFACEFADE\\"
				value: Number 0.5
				constant: Boolean true
			}
			Variable {
				type: String \\"gamespeed\\"
				name: String \\"bj_CINEMODE_GAMESPEED\\"
				value: Name \\"MAP_SPEED_NORMAL\\"
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Cinematic mode volume levels\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_VOLUME_UNITMOVEMENT\\"
				value: Number 0.4
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_VOLUME_UNITSOUNDS\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_VOLUME_COMBAT\\"
				value: Number 0.4
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_VOLUME_SPELLS\\"
				value: Number 0.4
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_VOLUME_UI\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_VOLUME_MUSIC\\"
				value: Number 0.55
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_VOLUME_AMBIENTSOUNDS\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CINEMODE_VOLUME_FIRE\\"
				value: Number 0.6
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Speech mode volume levels\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SPEECH_VOLUME_UNITMOVEMENT\\"
				value: Number 0.25
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SPEECH_VOLUME_UNITSOUNDS\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SPEECH_VOLUME_COMBAT\\"
				value: Number 0.25
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SPEECH_VOLUME_SPELLS\\"
				value: Number 0.25
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SPEECH_VOLUME_UI\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SPEECH_VOLUME_MUSIC\\"
				value: Number 0.55
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SPEECH_VOLUME_AMBIENTSOUNDS\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SPEECH_VOLUME_FIRE\\"
				value: Number 0.6
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Smart pan settings\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SMARTPAN_TRESHOLD_PAN\\"
				value: Number 500
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_SMARTPAN_TRESHOLD_SNAP\\"
				value: Number 3500
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" QueuedTriggerExecute settings\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MAX_QUEUED_TRIGGERS\\"
				value: Number 100
				constant: Boolean true
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_QUEUED_TRIGGER_TIMEOUT\\"
				value: Number 180
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Campaign indexing constants\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_T\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_H\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_U\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_O\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_N\\"
				value: Number 4
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_XN\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_XH\\"
				value: Number 6
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_XU\\"
				value: Number 7
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_INDEX_XO\\"
				value: Number 8
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Campaign offset constants (for mission indexing)\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_T\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_H\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_U\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_O\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_N\\"
				value: Number 4
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_XN\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_XH\\"
				value: Number 6
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_XU\\"
				value: Number 7
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPAIGN_OFFSET_XO\\"
				value: Number 8
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Mission indexing constants\\"
			Comment \\" Tutorial\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_T00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_T\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_T01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_T\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_T02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_T\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_T03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_T\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_T04\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_T\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 4
				}
				constant: Boolean true
			}
			Comment \\" Human\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H04\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 4
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H05\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 5
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H06\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 6
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H07\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 7
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H08\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 8
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H09\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 9
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H10\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 10
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_H11\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_H\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 11
				}
				constant: Boolean true
			}
			Comment \\" Undead\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U05\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 4
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U07\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 5
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U08\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 6
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U09\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 7
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U10\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 8
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_U11\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_U\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 9
				}
				constant: Boolean true
			}
			Comment \\" Orc\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O04\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 4
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O05\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 5
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O06\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 6
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O07\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 7
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O08\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 8
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O09\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 9
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_O10\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_O\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 10
				}
				constant: Boolean true
			}
			Comment \\" Night Elf\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N04\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 4
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N05\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 5
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N06\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 6
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N07\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 7
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N08\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 8
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_N09\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_N\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 9
				}
				constant: Boolean true
			}
			Comment \\" Expansion Night Elf\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN04\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 4
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN05\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 5
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN06\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 6
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN07\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 7
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN08\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 8
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN09\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 9
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XN10\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 10
				}
				constant: Boolean true
			}
			Comment \\" Expansion Human\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH04\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 4
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH05\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 5
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH06\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 6
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH07\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 7
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH08\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 8
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XH09\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 9
				}
				constant: Boolean true
			}
			Comment \\" Expansion Undead\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU04\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 4
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU05\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 5
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU06\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 6
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU07\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 7
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU08\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 8
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU09\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 9
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU10\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 10
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU11\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 11
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU12\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 12
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XU13\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 13
				}
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Expansion Orc\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XO00\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XO\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 0
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XO01\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XO\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 1
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XO02\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XO\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 2
				}
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MISSION_INDEX_XO03\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_CAMPAIGN_OFFSET_XO\\"
						operator: String \\"*\\"
						right: Number 1000
					}
					operator: String \\"+\\"
					right: Number 3
				}
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Cinematic indexing constants\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_TOP\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_HOP\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_HED\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_OOP\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_OED\\"
				value: Number 4
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_UOP\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_UED\\"
				value: Number 6
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_NOP\\"
				value: Number 7
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_NED\\"
				value: Number 8
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_XOP\\"
				value: Number 9
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEMATICINDEX_XED\\"
				value: Number 10
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Alliance settings\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ALLIANCE_UNALLIED\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ALLIANCE_UNALLIED_VISION\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ALLIANCE_ALLIED\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ALLIANCE_ALLIED_VISION\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ALLIANCE_ALLIED_UNITS\\"
				value: Number 4
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ALLIANCE_ALLIED_ADVUNITS\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ALLIANCE_NEUTRAL\\"
				value: Number 6
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ALLIANCE_NEUTRAL_VISION\\"
				value: Number 7
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Keyboard Event Types\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_KEYEVENTTYPE_DEPRESS\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_KEYEVENTTYPE_RELEASE\\"
				value: Number 1
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Keyboard Event Keys\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_KEYEVENTKEY_LEFT\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_KEYEVENTKEY_RIGHT\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_KEYEVENTKEY_DOWN\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_KEYEVENTKEY_UP\\"
				value: Number 3
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Mouse Event Types\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MOUSEEVENTTYPE_DOWN\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MOUSEEVENTTYPE_UP\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MOUSEEVENTTYPE_MOVE\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Transmission timing methods\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_TIMETYPE_ADD\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_TIMETYPE_SET\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_TIMETYPE_SUB\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Camera bounds adjustment methods\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERABOUNDS_ADJUST_ADD\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMERABOUNDS_ADJUST_SUB\\"
				value: Number 1
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Quest creation states\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTTYPE_REQ_DISCOVERED\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTTYPE_REQ_UNDISCOVERED\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTTYPE_OPT_DISCOVERED\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTTYPE_OPT_UNDISCOVERED\\"
				value: Number 3
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Quest message types\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_DISCOVERED\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_UPDATED\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_COMPLETED\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_FAILED\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_REQUIREMENT\\"
				value: Number 4
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_MISSIONFAILED\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_ALWAYSHINT\\"
				value: Number 6
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_HINT\\"
				value: Number 7
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_SECRET\\"
				value: Number 8
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_UNITACQUIRED\\"
				value: Number 9
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_UNITAVAILABLE\\"
				value: Number 10
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_ITEMACQUIRED\\"
				value: Number 11
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_QUESTMESSAGE_WARNING\\"
				value: Number 12
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Leaderboard sorting methods\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_SORTTYPE_SORTBYVALUE\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_SORTTYPE_SORTBYPLAYER\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_SORTTYPE_SORTBYLABEL\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Cinematic fade filter methods\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEFADETYPE_FADEIN\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEFADETYPE_FADEOUT\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CINEFADETYPE_FADEOUTIN\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Buff removal methods\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_REMOVEBUFFS_POSITIVE\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_REMOVEBUFFS_NEGATIVE\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_REMOVEBUFFS_ALL\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_REMOVEBUFFS_NONTLIFE\\"
				value: Number 3
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Buff properties - polarity\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_BUFF_POLARITY_POSITIVE\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_BUFF_POLARITY_NEGATIVE\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_BUFF_POLARITY_EITHER\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Buff properties - resist type\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_BUFF_RESIST_MAGIC\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_BUFF_RESIST_PHYSICAL\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_BUFF_RESIST_EITHER\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_BUFF_RESIST_BOTH\\"
				value: Number 3
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Hero stats\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_HEROSTAT_STR\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_HEROSTAT_AGI\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_HEROSTAT_INT\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Hero skill point modification methods\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MODIFYMETHOD_ADD\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MODIFYMETHOD_SUB\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MODIFYMETHOD_SET\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Unit state adjustment methods (for replaced units)\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_UNIT_STATE_METHOD_ABSOLUTE\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_UNIT_STATE_METHOD_RELATIVE\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_UNIT_STATE_METHOD_DEFAULTS\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_UNIT_STATE_METHOD_MAXIMUM\\"
				value: Number 3
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Gate operations\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_GATEOPERATION_CLOSE\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_GATEOPERATION_OPEN\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_GATEOPERATION_DESTROY\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Game cache value types\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_GAMECACHE_BOOLEAN\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_GAMECACHE_INTEGER\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_GAMECACHE_REAL\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_GAMECACHE_UNIT\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_GAMECACHE_STRING\\"
				value: Number 4
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Hashtable value types\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_HASHTABLE_BOOLEAN\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_HASHTABLE_INTEGER\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_HASHTABLE_REAL\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_HASHTABLE_STRING\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_HASHTABLE_HANDLE\\"
				value: Number 4
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Item status types\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEM_STATUS_HIDDEN\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEM_STATUS_OWNED\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEM_STATUS_INVULNERABLE\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEM_STATUS_POWERUP\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEM_STATUS_SELLABLE\\"
				value: Number 4
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEM_STATUS_PAWNABLE\\"
				value: Number 5
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Itemcode status types\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEMCODE_STATUS_POWERUP\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEMCODE_STATUS_SELLABLE\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ITEMCODE_STATUS_PAWNABLE\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Minimap ping styles\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MINIMAPPINGSTYLE_SIMPLE\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MINIMAPPINGSTYLE_FLASHY\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MINIMAPPINGSTYLE_ATTACK\\"
				value: Number 2
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Campaign Minimap icon styles\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_PRIMARY\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_PRIMARY_GREEN\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_PRIMARY_RED\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_BONUS\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_TURNIN\\"
				value: Number 4
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_BOSS\\"
				value: Number 5
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_CONTROL_ALLY\\"
				value: Number 6
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_CONTROL_NEUTRAL\\"
				value: Number 7
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CAMPPINGSTYLE_CONTROL_ENEMY\\"
				value: Number 8
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Corpse creation settings\\"
			Variable {
				type: String \\"real\\"
				name: String \\"bj_CORPSE_MAX_DEATH_TIME\\"
				value: Number 8
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Corpse creation styles\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CORPSETYPE_FLESH\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_CORPSETYPE_BONE\\"
				value: Number 1
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Elevator pathing-blocker destructable code\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ELEVATOR_BLOCKER_CODE\\"
				value: FourCC \\"DTep\\"
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ELEVATOR_CODE01\\"
				value: FourCC \\"DTrf\\"
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ELEVATOR_CODE02\\"
				value: FourCC \\"DTrx\\"
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\" Elevator wall codes\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ELEVATOR_WALL_TYPE_ALL\\"
				value: Number 0
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ELEVATOR_WALL_TYPE_EAST\\"
				value: Number 1
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ELEVATOR_WALL_TYPE_NORTH\\"
				value: Number 2
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ELEVATOR_WALL_TYPE_SOUTH\\"
				value: Number 3
				constant: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_ELEVATOR_WALL_TYPE_WEST\\"
				value: Number 4
				constant: Boolean true
			}
			EmptyLine {}
			Comment \\"-----------------------------------------------------------------------\\"
			Comment \\" Variables\\"
			Comment \\"\\"
			EmptyLine {}
			Comment \\" Force predefs\\"
			Variable {
				type: String \\"force\\"
				name: String \\"bj_FORCE_ALL_PLAYERS\\"
			}
			Variable {
				type: String \\"force\\"
				name: String \\"bj_FORCE_PLAYER\\"
				array: Boolean true
			}
			EmptyLine {}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_MELEE_MAX_TWINKED_HEROES\\"
				value: Number 0
			}
			EmptyLine {}
			Comment \\" Map area rects\\"
			Variable {
				type: String \\"rect\\"
				name: String \\"bj_mapInitialPlayableArea\\"
			}
			Variable {
				type: String \\"rect\\"
				name: String \\"bj_mapInitialCameraBounds\\"
			}
			EmptyLine {}
			Comment \\" Utility function vars\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_forLoopAIndex\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_forLoopBIndex\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_forLoopAIndexEnd\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_forLoopBIndexEnd\\"
				value: Number 0
			}
			EmptyLine {}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_slotControlReady\\"
				value: Boolean false
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_slotControlUsed\\"
				array: Boolean true
			}
			Variable {
				type: String \\"mapcontrol\\"
				name: String \\"bj_slotControl\\"
				array: Boolean true
			}
			EmptyLine {}
			Comment \\" Game started detection vars\\"
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_gameStartedTimer\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_gameStarted\\"
				value: Boolean false
			}
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_volumeGroupsTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			EmptyLine {}
			Comment \\" Singleplayer check\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_isSinglePlayer\\"
				value: Boolean false
			}
			EmptyLine {}
			Comment \\" Day/Night Cycle vars\\"
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_dncSoundsDay\\"
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_dncSoundsNight\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_dayAmbientSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_nightAmbientSound\\"
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_dncSoundsDawn\\"
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_dncSoundsDusk\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_dawnSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_duskSound\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_useDawnDuskSounds\\"
				value: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_dncIsDaytime\\"
				value: Boolean false
			}
			EmptyLine {}
			Comment \\" Triggered sounds\\"
			Comment \\"sound              bj_pingMinimapSound         = null\\"
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_rescueSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_questDiscoveredSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_questUpdatedSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_questCompletedSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_questFailedSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_questHintSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_questSecretSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_questItemAcquiredSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_questWarningSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_victoryDialogSound\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_defeatDialogSound\\"
			}
			EmptyLine {}
			Comment \\" Marketplace vars\\"
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_stockItemPurchased\\"
			}
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_stockUpdateTimer\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_stockAllowedPermanent\\"
				array: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_stockAllowedCharged\\"
				array: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_stockAllowedArtifact\\"
				array: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_stockPickedItemLevel\\"
				value: Number 0
			}
			Variable {
				type: String \\"itemtype\\"
				name: String \\"bj_stockPickedItemType\\"
			}
			EmptyLine {}
			Comment \\" Melee vars\\"
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_meleeVisibilityTrained\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_meleeVisibilityIsDay\\"
				value: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_meleeGrantHeroItems\\"
				value: Boolean false
			}
			Variable {
				type: String \\"location\\"
				name: String \\"bj_meleeNearestMineToLoc\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"bj_meleeNearestMine\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_meleeNearestMineDist\\"
				value: Number 0
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_meleeGameOver\\"
				value: Boolean false
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_meleeDefeated\\"
				array: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_meleeVictoried\\"
				array: Boolean true
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"bj_ghoul\\"
				array: Boolean true
			}
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_crippledTimer\\"
				array: Boolean true
			}
			Variable {
				type: String \\"timerdialog\\"
				name: String \\"bj_crippledTimerWindows\\"
				array: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_playerIsCrippled\\"
				array: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_playerIsExposed\\"
				array: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_finishSoonAllExposed\\"
				value: Boolean false
			}
			Variable {
				type: String \\"timerdialog\\"
				name: String \\"bj_finishSoonTimerDialog\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_meleeTwinkedHeroes\\"
				array: Boolean true
			}
			EmptyLine {}
			Comment \\" Rescue behavior vars\\"
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_rescueUnitBehavior\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_rescueChangeColorUnit\\"
				value: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_rescueChangeColorBldg\\"
				value: Boolean true
			}
			EmptyLine {}
			Comment \\" Transmission vars\\"
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_cineSceneEndingTimer\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_cineSceneLastSound\\"
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_cineSceneBeingSkipped\\"
			}
			EmptyLine {}
			Comment \\" Cinematic mode vars\\"
			Variable {
				type: String \\"gamespeed\\"
				name: String \\"bj_cineModePriorSpeed\\"
				value: Name \\"MAP_SPEED_NORMAL\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_cineModePriorFogSetting\\"
				value: Boolean false
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_cineModePriorMaskSetting\\"
				value: Boolean false
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_cineModeAlreadyIn\\"
				value: Boolean false
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_cineModePriorDawnDusk\\"
				value: Boolean false
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_cineModeSavedSeed\\"
				value: Number 0
			}
			EmptyLine {}
			Comment \\" Cinematic fade vars\\"
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_cineFadeFinishTimer\\"
			}
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_cineFadeContinueTimer\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_cineFadeContinueRed\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_cineFadeContinueGreen\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_cineFadeContinueBlue\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_cineFadeContinueTrans\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_cineFadeContinueDuration\\"
				value: Number 0
			}
			Variable {
				type: String \\"string\\"
				name: String \\"bj_cineFadeContinueTex\\"
				value: String \\"\\"
			}
			EmptyLine {}
			Comment \\" QueuedTriggerExecute vars\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_queuedExecTotal\\"
				value: Number 0
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_queuedExecTriggers\\"
				array: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_queuedExecUseConds\\"
				array: Boolean true
			}
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_queuedExecTimeoutTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_queuedExecTimeout\\"
			}
			EmptyLine {}
			Comment \\" Helper vars (for Filter and Enum funcs)\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_destInRegionDiesCount\\"
				value: Number 0
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_destInRegionDiesTrig\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_groupCountUnits\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_forceCountPlayers\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_groupEnumTypeId\\"
				value: Number 0
			}
			Variable {
				type: String \\"player\\"
				name: String \\"bj_groupEnumOwningPlayer\\"
			}
			Variable {
				type: String \\"group\\"
				name: String \\"bj_groupAddGroupDest\\"
			}
			Variable {
				type: String \\"group\\"
				name: String \\"bj_groupRemoveGroupDest\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_groupRandomConsidered\\"
				value: Number 0
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"bj_groupRandomCurrentPick\\"
			}
			Variable {
				type: String \\"group\\"
				name: String \\"bj_groupLastCreatedDest\\"
			}
			Variable {
				type: String \\"group\\"
				name: String \\"bj_randomSubGroupGroup\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_randomSubGroupWant\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_randomSubGroupTotal\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_randomSubGroupChance\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_destRandomConsidered\\"
				value: Number 0
			}
			Variable {
				type: String \\"destructable\\"
				name: String \\"bj_destRandomCurrentPick\\"
			}
			Variable {
				type: String \\"destructable\\"
				name: String \\"bj_elevatorWallBlocker\\"
			}
			Variable {
				type: String \\"destructable\\"
				name: String \\"bj_elevatorNeighbor\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_itemRandomConsidered\\"
				value: Number 0
			}
			Variable {
				type: String \\"item\\"
				name: String \\"bj_itemRandomCurrentPick\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_forceRandomConsidered\\"
				value: Number 0
			}
			Variable {
				type: String \\"player\\"
				name: String \\"bj_forceRandomCurrentPick\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"bj_makeUnitRescuableUnit\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_makeUnitRescuableFlag\\"
				value: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_pauseAllUnitsFlag\\"
				value: Boolean true
			}
			Variable {
				type: String \\"location\\"
				name: String \\"bj_enumDestructableCenter\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_enumDestructableRadius\\"
				value: Number 0
			}
			Variable {
				type: String \\"playercolor\\"
				name: String \\"bj_setPlayerTargetColor\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_isUnitGroupDeadResult\\"
				value: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_isUnitGroupEmptyResult\\"
				value: Boolean true
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_isUnitGroupInRectResult\\"
				value: Boolean true
			}
			Variable {
				type: String \\"rect\\"
				name: String \\"bj_isUnitGroupInRectRect\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_changeLevelShowScores\\"
				value: Boolean false
			}
			Variable {
				type: String \\"string\\"
				name: String \\"bj_changeLevelMapName\\"
			}
			Variable {
				type: String \\"group\\"
				name: String \\"bj_suspendDecayFleshGroup\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Variable {
				type: String \\"group\\"
				name: String \\"bj_suspendDecayBoneGroup\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_delayedSuspendDecayTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"bj_delayedSuspendDecayTrig\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_livingPlayerUnitsTypeId\\"
				value: Number 0
			}
			Variable {
				type: String \\"widget\\"
				name: String \\"bj_lastDyingWidget\\"
			}
			EmptyLine {}
			Comment \\" Random distribution vars\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_randDistCount\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_randDistID\\"
				array: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bj_randDistChance\\"
				array: Boolean true
			}
			EmptyLine {}
			Comment \\" Last X'd vars\\"
			Variable {
				type: String \\"unit\\"
				name: String \\"bj_lastCreatedUnit\\"
			}
			Variable {
				type: String \\"item\\"
				name: String \\"bj_lastCreatedItem\\"
			}
			Variable {
				type: String \\"item\\"
				name: String \\"bj_lastRemovedItem\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"bj_lastHauntedGoldMine\\"
			}
			Variable {
				type: String \\"destructable\\"
				name: String \\"bj_lastCreatedDestructable\\"
			}
			Variable {
				type: String \\"group\\"
				name: String \\"bj_lastCreatedGroup\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Variable {
				type: String \\"fogmodifier\\"
				name: String \\"bj_lastCreatedFogModifier\\"
			}
			Variable {
				type: String \\"effect\\"
				name: String \\"bj_lastCreatedEffect\\"
			}
			Variable {
				type: String \\"weathereffect\\"
				name: String \\"bj_lastCreatedWeatherEffect\\"
			}
			Variable {
				type: String \\"terraindeformation\\"
				name: String \\"bj_lastCreatedTerrainDeformation\\"
			}
			Variable {
				type: String \\"quest\\"
				name: String \\"bj_lastCreatedQuest\\"
			}
			Variable {
				type: String \\"questitem\\"
				name: String \\"bj_lastCreatedQuestItem\\"
			}
			Variable {
				type: String \\"defeatcondition\\"
				name: String \\"bj_lastCreatedDefeatCondition\\"
			}
			Variable {
				type: String \\"timer\\"
				name: String \\"bj_lastStartedTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			Variable {
				type: String \\"timerdialog\\"
				name: String \\"bj_lastCreatedTimerDialog\\"
			}
			Variable {
				type: String \\"leaderboard\\"
				name: String \\"bj_lastCreatedLeaderboard\\"
			}
			Variable {
				type: String \\"multiboard\\"
				name: String \\"bj_lastCreatedMultiboard\\"
			}
			Variable {
				type: String \\"sound\\"
				name: String \\"bj_lastPlayedSound\\"
			}
			Variable {
				type: String \\"string\\"
				name: String \\"bj_lastPlayedMusic\\"
				value: String \\"\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"bj_lastTransmissionDuration\\"
				value: Number 0
			}
			Variable {
				type: String \\"gamecache\\"
				name: String \\"bj_lastCreatedGameCache\\"
			}
			Variable {
				type: String \\"hashtable\\"
				name: String \\"bj_lastCreatedHashtable\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"bj_lastLoadedUnit\\"
			}
			Variable {
				type: String \\"button\\"
				name: String \\"bj_lastCreatedButton\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"bj_lastReplacedUnit\\"
			}
			Variable {
				type: String \\"texttag\\"
				name: String \\"bj_lastCreatedTextTag\\"
			}
			Variable {
				type: String \\"lightning\\"
				name: String \\"bj_lastCreatedLightning\\"
			}
			Variable {
				type: String \\"image\\"
				name: String \\"bj_lastCreatedImage\\"
			}
			Variable {
				type: String \\"ubersplat\\"
				name: String \\"bj_lastCreatedUbersplat\\"
			}
			Variable {
				type: String \\"minimapicon\\"
				name: String \\"bj_lastCreatedMinimapIcon\\"
			}
			Variable {
				type: String \\"commandbuttoneffect\\"
				name: String \\"bj_lastCreatedCommandButtonEffect\\"
			}
			EmptyLine {}
			Comment \\" Filter function vars\\"
			Variable {
				type: String \\"boolexpr\\"
				name: String \\"filterIssueHauntOrderAtLocBJ\\"
			}
			Variable {
				type: String \\"boolexpr\\"
				name: String \\"filterEnumDestructablesInCircleBJ\\"
			}
			Variable {
				type: String \\"boolexpr\\"
				name: String \\"filterGetUnitsInRectOfPlayer\\"
			}
			Variable {
				type: String \\"boolexpr\\"
				name: String \\"filterGetUnitsOfTypeIdAll\\"
			}
			Variable {
				type: String \\"boolexpr\\"
				name: String \\"filterGetUnitsOfPlayerAndTypeId\\"
			}
			Variable {
				type: String \\"boolexpr\\"
				name: String \\"filterMeleeTrainedUnitIsHeroBJ\\"
			}
			Variable {
				type: String \\"boolexpr\\"
				name: String \\"filterLivingPlayerUnitsOfTypeId\\"
			}
			EmptyLine {}
			Comment \\" Memory cleanup vars\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_wantDestroyGroup\\"
				value: Boolean false
			}
			EmptyLine {}
			Comment \\" Instanced Operation Results\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Debugging Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BJDebugMsg\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"msg\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"i\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					Call {
						name: String \\"DisplayTimedTextToPlayer\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"i\\"
								]
							}
							Number 0
							Number 0
							Number 60
							Name \\"msg\\"
						]
						statement: Boolean true
					}
					JASSSet {
						name: String \\"i\\"
						value: BinaryOp {
							left: Name \\"i\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"i\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Math Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RMinBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"a\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"b\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"a\\"
					operator: String \\"<\\"
					right: Name \\"b\\"
				}
				then: Statements [
					Return Name \\"a\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Name \\"b\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RMaxBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"a\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"b\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"a\\"
					operator: String \\"<\\"
					right: Name \\"b\\"
				}
				then: Statements [
					Return Name \\"b\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Name \\"a\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RAbsBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"a\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"a\\"
					operator: String \\">=\\"
					right: Number 0
				}
				then: Statements [
					Return Name \\"a\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return UnaryOp {
								operator: String \\"-\\"
								expr: Name \\"a\\"
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RSignBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"a\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"a\\"
					operator: String \\">=\\"
					right: Number 0
				}
				then: Statements [
					Return Number 1
				]
				elses: Array [
					Else {
						statements: Statements [
							Return UnaryOp {
								operator: String \\"-\\"
								expr: Number 1
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IMinBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"a\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"b\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"a\\"
					operator: String \\"<\\"
					right: Name \\"b\\"
				}
				then: Statements [
					Return Name \\"a\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Name \\"b\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IMaxBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"a\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"b\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"a\\"
					operator: String \\"<\\"
					right: Name \\"b\\"
				}
				then: Statements [
					Return Name \\"b\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Name \\"a\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IAbsBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"a\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"a\\"
					operator: String \\">=\\"
					right: Number 0
				}
				then: Statements [
					Return Name \\"a\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return UnaryOp {
								operator: String \\"-\\"
								expr: Name \\"a\\"
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ISignBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"a\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"a\\"
					operator: String \\">=\\"
					right: Number 0
				}
				then: Statements [
					Return Number 1
				]
				elses: Array [
					Else {
						statements: Statements [
							Return UnaryOp {
								operator: String \\"-\\"
								expr: Number 1
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SinBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"degrees\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"Sin\\"
				args: Args [
					BinaryOp {
						left: Name \\"degrees\\"
						operator: String \\"*\\"
						right: Name \\"bj_DEGTORAD\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CosBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"degrees\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"Cos\\"
				args: Args [
					BinaryOp {
						left: Name \\"degrees\\"
						operator: String \\"*\\"
						right: Name \\"bj_DEGTORAD\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TanBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"degrees\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"Tan\\"
				args: Args [
					BinaryOp {
						left: Name \\"degrees\\"
						operator: String \\"*\\"
						right: Name \\"bj_DEGTORAD\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AsinBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"degrees\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"Asin\\"
					args: Args [
						Name \\"degrees\\"
					]
				}
				operator: String \\"*\\"
				right: Name \\"bj_RADTODEG\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AcosBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"degrees\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"Acos\\"
					args: Args [
						Name \\"degrees\\"
					]
				}
				operator: String \\"*\\"
				right: Name \\"bj_RADTODEG\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AtanBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"degrees\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"Atan\\"
					args: Args [
						Name \\"degrees\\"
					]
				}
				operator: String \\"*\\"
				right: Name \\"bj_RADTODEG\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"Atan2BJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"Atan2\\"
					args: Args [
						Name \\"y\\"
						Name \\"x\\"
					]
				}
				operator: String \\"*\\"
				right: Name \\"bj_RADTODEG\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AngleBetweenPoints\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"locA\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"locB\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Name \\"bj_RADTODEG\\"
				operator: String \\"*\\"
				right: Call {
					name: String \\"Atan2\\"
					args: Args [
						BinaryOp {
							left: Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"locB\\"
								]
							}
							operator: String \\"-\\"
							right: Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"locA\\"
								]
							}
						}
						BinaryOp {
							left: Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"locB\\"
								]
							}
							operator: String \\"-\\"
							right: Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"locA\\"
								]
							}
						}
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DistanceBetweenPoints\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"locA\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"locB\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"dx\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"locB\\"
						]
					}
					operator: String \\"-\\"
					right: Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"locA\\"
						]
					}
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"dy\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"locB\\"
						]
					}
					operator: String \\"-\\"
					right: Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"locA\\"
						]
					}
				}
			}
			Return Call {
				name: String \\"SquareRoot\\"
				args: Args [
					BinaryOp {
						left: BinaryOp {
							left: Name \\"dx\\"
							operator: String \\"*\\"
							right: Name \\"dx\\"
						}
						operator: String \\"+\\"
						right: BinaryOp {
							left: Name \\"dy\\"
							operator: String \\"*\\"
							right: Name \\"dy\\"
						}
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PolarProjectionBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"source\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dist\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"angle\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"x\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"source\\"
						]
					}
					operator: String \\"+\\"
					right: BinaryOp {
						left: Name \\"dist\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"Cos\\"
							args: Args [
								BinaryOp {
									left: Name \\"angle\\"
									operator: String \\"*\\"
									right: Name \\"bj_DEGTORAD\\"
								}
							]
						}
					}
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"y\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"source\\"
						]
					}
					operator: String \\"+\\"
					right: BinaryOp {
						left: Name \\"dist\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"Sin\\"
							args: Args [
								BinaryOp {
									left: Name \\"angle\\"
									operator: String \\"*\\"
									right: Name \\"bj_DEGTORAD\\"
								}
							]
						}
					}
				}
			}
			Return Call {
				name: String \\"Location\\"
				args: Args [
					Name \\"x\\"
					Name \\"y\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetRandomDirectionDeg\\"
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetRandomReal\\"
				args: Args [
					Number 0
					Number 360
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetRandomPercentageBJ\\"
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetRandomReal\\"
				args: Args [
					Number 0
					Number 100
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetRandomLocInRect\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"whichRect\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Return Call {
				name: String \\"Location\\"
				args: Args [
					Call {
						name: String \\"GetRandomReal\\"
						args: Args [
							Call {
								name: String \\"GetRectMinX\\"
								args: Args [
									Name \\"whichRect\\"
								]
							}
							Call {
								name: String \\"GetRectMaxX\\"
								args: Args [
									Name \\"whichRect\\"
								]
							}
						]
					}
					Call {
						name: String \\"GetRandomReal\\"
						args: Args [
							Call {
								name: String \\"GetRectMinY\\"
								args: Args [
									Name \\"whichRect\\"
								]
							}
							Call {
								name: String \\"GetRectMaxY\\"
								args: Args [
									Name \\"whichRect\\"
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"*\\\\nCalculate the modulus/remainder of (dividend) divided by (divisor) such that\\\\n\`(dividend / divisor) * divisor + ModuloInteger(dividend, divisor) == dividend\` with \`/\` rounding towards negative infinity.\\\\nExamples:  18 mod 5 = 3.  15 mod 5 = 0.  -8 mod 5 = 2.\\\\n\\\\n@note Use the \`%\`-operator as it's probably faster but also correct.\\\\n\\\\n@bug The commented law doesn't hold. For example \`ModuloInteger(-7, -3) == -4\` while\\\\n\`-7 % -3 == -1\`\\\\n\\"
	EmptyLine {}
	EmptyLine {}
	JASSFunction {
		name: String \\"ModuloInteger\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"dividend\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"divisor\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"modulus\\"
				value: BinaryOp {
					left: Name \\"dividend\\"
					operator: String \\"-\\"
					right: BinaryOp {
						left: Parens BinaryOp {
							left: Name \\"dividend\\"
							operator: String \\"/\\"
							right: Name \\"divisor\\"
						}
						operator: String \\"*\\"
						right: Name \\"divisor\\"
					}
				}
			}
			EmptyLine {}
			Comment \\" If the dividend was negative, the above modulus calculation will\\"
			Comment \\" be negative, but within (-divisor..0).  We can add (divisor) to\\"
			Comment \\" shift this result into the desired range of (0..divisor).\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"modulus\\"
					operator: String \\"<\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"modulus\\"
						value: BinaryOp {
							left: Name \\"modulus\\"
							operator: String \\"+\\"
							right: Name \\"divisor\\"
						}
					}
				]
			}
			EmptyLine {}
			Return Name \\"modulus\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Calculate the modulus/remainder of (dividend) divided by (divisor).\\"
	Comment \\" Examples:  13.000 mod 2.500 = 0.500.  -6.000 mod 2.500 = 1.500.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ModuloReal\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"dividend\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"divisor\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"modulus\\"
				value: BinaryOp {
					left: Name \\"dividend\\"
					operator: String \\"-\\"
					right: BinaryOp {
						left: Call {
							name: String \\"I2R\\"
							args: Args [
								Call {
									name: String \\"R2I\\"
									args: Args [
										BinaryOp {
											left: Name \\"dividend\\"
											operator: String \\"/\\"
											right: Name \\"divisor\\"
										}
									]
								}
							]
						}
						operator: String \\"*\\"
						right: Name \\"divisor\\"
					}
				}
			}
			EmptyLine {}
			Comment \\" If the dividend was negative, the above modulus calculation will\\"
			Comment \\" be negative, but within (-divisor..0).  We can add (divisor) to\\"
			Comment \\" shift this result into the desired range of (0..divisor).\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"modulus\\"
					operator: String \\"<\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"modulus\\"
						value: BinaryOp {
							left: Name \\"modulus\\"
							operator: String \\"+\\"
							right: Name \\"divisor\\"
						}
					}
				]
			}
			EmptyLine {}
			Return Name \\"modulus\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"OffsetLocation\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dx\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dy\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Return Call {
				name: String \\"Location\\"
				args: Args [
					BinaryOp {
						left: Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						operator: String \\"+\\"
						right: Name \\"dx\\"
					}
					BinaryOp {
						left: Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						operator: String \\"+\\"
						right: Name \\"dy\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"OffsetRectBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dx\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dy\\"
			}
		]
		returns: String \\"rect\\"
		statements: Statements [
			Return Call {
				name: String \\"Rect\\"
				args: Args [
					BinaryOp {
						left: Call {
							name: String \\"GetRectMinX\\"
							args: Args [
								Name \\"r\\"
							]
						}
						operator: String \\"+\\"
						right: Name \\"dx\\"
					}
					BinaryOp {
						left: Call {
							name: String \\"GetRectMinY\\"
							args: Args [
								Name \\"r\\"
							]
						}
						operator: String \\"+\\"
						right: Name \\"dy\\"
					}
					BinaryOp {
						left: Call {
							name: String \\"GetRectMaxX\\"
							args: Args [
								Name \\"r\\"
							]
						}
						operator: String \\"+\\"
						right: Name \\"dx\\"
					}
					BinaryOp {
						left: Call {
							name: String \\"GetRectMaxY\\"
							args: Args [
								Name \\"r\\"
							]
						}
						operator: String \\"+\\"
						right: Name \\"dy\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RectFromCenterSizeBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"center\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"width\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"height\\"
			}
		]
		returns: String \\"rect\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"x\\"
				value: Call {
					name: String \\"GetLocationX\\"
					args: Args [
						Name \\"center\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"y\\"
				value: Call {
					name: String \\"GetLocationY\\"
					args: Args [
						Name \\"center\\"
					]
				}
			}
			Return Call {
				name: String \\"Rect\\"
				args: Args [
					BinaryOp {
						left: Name \\"x\\"
						operator: String \\"-\\"
						right: BinaryOp {
							left: Name \\"width\\"
							operator: String \\"*\\"
							right: Number 0.5
						}
					}
					BinaryOp {
						left: Name \\"y\\"
						operator: String \\"-\\"
						right: BinaryOp {
							left: Name \\"height\\"
							operator: String \\"*\\"
							right: Number 0.5
						}
					}
					BinaryOp {
						left: Name \\"x\\"
						operator: String \\"+\\"
						right: BinaryOp {
							left: Name \\"width\\"
							operator: String \\"*\\"
							right: Number 0.5
						}
					}
					BinaryOp {
						left: Name \\"y\\"
						operator: String \\"+\\"
						right: BinaryOp {
							left: Name \\"height\\"
							operator: String \\"*\\"
							right: Number 0.5
						}
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RectContainsCoords\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: BinaryOp {
					left: BinaryOp {
						left: Parens BinaryOp {
							left: Call {
								name: String \\"GetRectMinX\\"
								args: Args [
									Name \\"r\\"
								]
							}
							operator: String \\"<=\\"
							right: Name \\"x\\"
						}
						operator: String \\"and\\"
						right: Parens BinaryOp {
							left: Name \\"x\\"
							operator: String \\"<=\\"
							right: Call {
								name: String \\"GetRectMaxX\\"
								args: Args [
									Name \\"r\\"
								]
							}
						}
					}
					operator: String \\"and\\"
					right: Parens BinaryOp {
						left: Call {
							name: String \\"GetRectMinY\\"
							args: Args [
								Name \\"r\\"
							]
						}
						operator: String \\"<=\\"
						right: Name \\"y\\"
					}
				}
				operator: String \\"and\\"
				right: Parens BinaryOp {
					left: Name \\"y\\"
					operator: String \\"<=\\"
					right: Call {
						name: String \\"GetRectMaxY\\"
						args: Args [
							Name \\"r\\"
						]
					}
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RectContainsLoc\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"RectContainsCoords\\"
				args: Args [
					Name \\"r\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RectContainsUnit\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"RectContainsCoords\\"
				args: Args [
					Name \\"r\\"
					Call {
						name: String \\"GetUnitX\\"
						args: Args [
							Name \\"whichUnit\\"
						]
					}
					Call {
						name: String \\"GetUnitY\\"
						args: Args [
							Name \\"whichUnit\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RectContainsItem\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"whichItem\\"
					operator: String \\"==\\"
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsItemOwned\\"
					args: Args [
						Name \\"whichItem\\"
					]
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			Return Call {
				name: String \\"RectContainsCoords\\"
				args: Args [
					Name \\"r\\"
					Call {
						name: String \\"GetItemX\\"
						args: Args [
							Name \\"whichItem\\"
						]
					}
					Call {
						name: String \\"GetItemY\\"
						args: Args [
							Name \\"whichItem\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Utility Constructs\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Runs the trigger's actions if the trigger's conditions evaluate to true.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ConditionalTriggerExecute\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Call {
					name: String \\"TriggerEvaluate\\"
					args: Args [
						Name \\"trig\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"TriggerExecute\\"
						args: Args [
							Name \\"trig\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Runs the trigger's actions if the trigger's conditions evaluate to true.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"TriggerExecuteBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"checkConditions\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"checkConditions\\"
				then: Statements [
					IfThenElse {
						condition: UnaryOp {
							operator: String \\"not\\"
							expr: Parens Call {
								name: String \\"TriggerEvaluate\\"
								args: Args [
									Name \\"trig\\"
								]
							}
						}
						then: Statements [
							Return Boolean false
						]
					}
				]
			}
			Call {
				name: String \\"TriggerExecute\\"
				args: Args [
					Name \\"trig\\"
				]
				statement: Boolean true
			}
			Return Boolean true
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Arranges for a trigger to fire almost immediately, except that the calling\\"
	Comment \\" trigger is not interrupted as is the case with a TriggerExecute call.\\"
	Comment \\" Since the trigger executes normally, its conditions are still evaluated.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"PostTriggerExecuteBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"checkConditions\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"checkConditions\\"
				then: Statements [
					IfThenElse {
						condition: UnaryOp {
							operator: String \\"not\\"
							expr: Parens Call {
								name: String \\"TriggerEvaluate\\"
								args: Args [
									Name \\"trig\\"
								]
							}
						}
						then: Statements [
							Return Boolean false
						]
					}
				]
			}
			Call {
				name: String \\"TriggerRegisterTimerEvent\\"
				args: Args [
					Name \\"trig\\"
					Number 0
					Boolean false
				]
				statement: Boolean true
			}
			Return Boolean true
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Debug - Display the contents of the trigger queue (as either null or \\\\\\"x\\\\\\"\\"
	Comment \\" for each entry).\\"
	JASSFunction {
		name: String \\"QueuedTriggerCheck\\"
		statements: Statements [
			Variable {
				type: String \\"string\\"
				name: String \\"s\\"
				value: String \\"TrigQueue Check \\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"i\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"i\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					ExitWhen BinaryOp {
						left: Name \\"i\\"
						operator: String \\">=\\"
						right: Name \\"bj_queuedExecTotal\\"
					}
					JASSSet {
						name: String \\"s\\"
						value: BinaryOp {
							left: BinaryOp {
								left: BinaryOp {
									left: Name \\"s\\"
									operator: String \\"+\\"
									right: String \\"q[\\"
								}
								operator: String \\"+\\"
								right: Call {
									name: String \\"I2S\\"
									args: Args [
										Name \\"i\\"
									]
								}
							}
							operator: String \\"+\\"
							right: String \\"]=\\"
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: ArrayRef {
								name: String \\"bj_queuedExecTriggers\\"
								prop: Name \\"i\\"
							}
							operator: String \\"==\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"s\\"
								value: BinaryOp {
									left: Name \\"s\\"
									operator: String \\"+\\"
									right: String \\"null \\"
								}
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									JASSSet {
										name: String \\"s\\"
										value: BinaryOp {
											left: Name \\"s\\"
											operator: String \\"+\\"
											right: String \\"x \\"
										}
									}
								]
							}
						]
					}
					JASSSet {
						name: String \\"i\\"
						value: BinaryOp {
							left: Name \\"i\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
				]
			}
			JASSSet {
				name: String \\"s\\"
				value: BinaryOp {
					left: BinaryOp {
						left: BinaryOp {
							left: Name \\"s\\"
							operator: String \\"+\\"
							right: String \\"(\\"
						}
						operator: String \\"+\\"
						right: Call {
							name: String \\"I2S\\"
							args: Args [
								Name \\"bj_queuedExecTotal\\"
							]
						}
					}
					operator: String \\"+\\"
					right: String \\" total)\\"
				}
			}
			Call {
				name: String \\"DisplayTimedTextToPlayer\\"
				args: Args [
					Call {
						name: String \\"GetLocalPlayer\\"
					}
					Number 0
					Number 0
					Number 600
					Name \\"s\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Searches the queue for a given trigger, returning the index of the\\"
	Comment \\" trigger within the queue if it is found, or -1 if it is not found.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"QueuedTriggerGetIndex\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Comment \\" Determine which, if any, of the queued triggers is being removed.\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\">=\\"
						right: Name \\"bj_queuedExecTotal\\"
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: ArrayRef {
								name: String \\"bj_queuedExecTriggers\\"
								prop: Name \\"index\\"
							}
							operator: String \\"==\\"
							right: Name \\"trig\\"
						}
						then: Statements [
							Return Name \\"index\\"
						]
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
				]
			}
			Return UnaryOp {
				operator: String \\"-\\"
				expr: Number 1
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Removes a trigger from the trigger queue, shifting other triggers down\\"
	Comment \\" to fill the unused space.  If the currently running trigger is removed\\"
	Comment \\" in this manner, this function does NOT attempt to run the next trigger.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"QueuedTriggerRemoveByIndex\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"trigIndex\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			Comment \\" If the to-be-removed index is out of range, fail.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"trigIndex\\"
					operator: String \\">=\\"
					right: Name \\"bj_queuedExecTotal\\"
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			Comment \\" Shift all queue entries down to fill in the gap.\\"
			JASSSet {
				name: String \\"bj_queuedExecTotal\\"
				value: BinaryOp {
					left: Name \\"bj_queuedExecTotal\\"
					operator: String \\"-\\"
					right: Number 1
				}
			}
			JASSSet {
				name: String \\"index\\"
				value: Name \\"trigIndex\\"
			}
			Loop {
				statements: Statements [
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\">=\\"
						right: Name \\"bj_queuedExecTotal\\"
					}
					JASSSet {
						name: String \\"bj_queuedExecTriggers\\"
						value: ArrayRef {
							name: String \\"bj_queuedExecTriggers\\"
							prop: BinaryOp {
								left: Name \\"index\\"
								operator: String \\"+\\"
								right: Number 1
							}
						}
						prop: Name \\"index\\"
					}
					JASSSet {
						name: String \\"bj_queuedExecUseConds\\"
						value: ArrayRef {
							name: String \\"bj_queuedExecUseConds\\"
							prop: BinaryOp {
								left: Name \\"index\\"
								operator: String \\"+\\"
								right: Number 1
							}
						}
						prop: Name \\"index\\"
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
				]
			}
			Return Boolean true
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Attempt to execute the first trigger in the queue.  If it fails, remove\\"
	Comment \\" it and execute the next one.  Continue this cycle until a trigger runs,\\"
	Comment \\" or until the queue is empty.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"QueuedTriggerAttemptExec\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Loop {
				statements: Statements [
					ExitWhen BinaryOp {
						left: Name \\"bj_queuedExecTotal\\"
						operator: String \\"==\\"
						right: Number 0
					}
					EmptyLine {}
					IfThenElse {
						condition: Call {
							name: String \\"TriggerExecuteBJ\\"
							args: Args [
								ArrayRef {
									name: String \\"bj_queuedExecTriggers\\"
									prop: Number 0
								}
								ArrayRef {
									name: String \\"bj_queuedExecUseConds\\"
									prop: Number 0
								}
							]
						}
						then: Statements [
							Comment \\" Timeout the queue if it sits at the front of the queue for too long.\\"
							Call {
								name: String \\"TimerStart\\"
								args: Args [
									Name \\"bj_queuedExecTimeoutTimer\\"
									Name \\"bj_QUEUED_TRIGGER_TIMEOUT\\"
									Boolean false
									Null
								]
								statement: Boolean true
							}
							Return Boolean true
						]
					}
					EmptyLine {}
					Call {
						name: String \\"QueuedTriggerRemoveByIndex\\"
						args: Args [
							Number 0
						]
						statement: Boolean true
					}
				]
			}
			Return Boolean false
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Queues a trigger to be executed, assuring that such triggers are not\\"
	Comment \\" executed at the same time.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"QueuedTriggerAddBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"checkConditions\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Comment \\" Make sure our queue isn't full.  If it is, return failure.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_queuedExecTotal\\"
					operator: String \\">=\\"
					right: Name \\"bj_MAX_QUEUED_TRIGGERS\\"
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			Comment \\" Add the trigger to an array of to-be-executed triggers.\\"
			JASSSet {
				name: String \\"bj_queuedExecTriggers\\"
				value: Name \\"trig\\"
				prop: Name \\"bj_queuedExecTotal\\"
			}
			JASSSet {
				name: String \\"bj_queuedExecUseConds\\"
				value: Name \\"checkConditions\\"
				prop: Name \\"bj_queuedExecTotal\\"
			}
			JASSSet {
				name: String \\"bj_queuedExecTotal\\"
				value: BinaryOp {
					left: Name \\"bj_queuedExecTotal\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
			EmptyLine {}
			Comment \\" If this is the only trigger in the queue, run it.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_queuedExecTotal\\"
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					Call {
						name: String \\"QueuedTriggerAttemptExec\\"
						statement: Boolean true
					}
				]
			}
			Return Boolean true
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Denotes the end of a queued trigger. Be sure to call this only once per\\"
	Comment \\" queued trigger, or risk stepping on the toes of other queued triggers.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"QueuedTriggerRemoveBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"trigIndex\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"trigExecuted\\"
			}
			EmptyLine {}
			Comment \\" Find the trigger's index.\\"
			JASSSet {
				name: String \\"trigIndex\\"
				value: Call {
					name: String \\"QueuedTriggerGetIndex\\"
					args: Args [
						Name \\"trig\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"trigIndex\\"
					operator: String \\"==\\"
					right: UnaryOp {
						operator: String \\"-\\"
						expr: Number 1
					}
				}
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			Comment \\" Shuffle the other trigger entries down to fill in the gap.\\"
			Call {
				name: String \\"QueuedTriggerRemoveByIndex\\"
				args: Args [
					Name \\"trigIndex\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If we just axed the currently running trigger, run the next one.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"trigIndex\\"
					operator: String \\"==\\"
					right: Number 0
				}
				then: Statements [
					Call {
						name: String \\"PauseTimer\\"
						args: Args [
							Name \\"bj_queuedExecTimeoutTimer\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"QueuedTriggerAttemptExec\\"
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Denotes the end of a queued trigger. Be sure to call this only once per\\"
	Comment \\" queued trigger, lest you step on the toes of other queued triggers.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"QueuedTriggerDoneBJ\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			Comment \\" Make sure there's something on the queue to remove.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_queuedExecTotal\\"
					operator: String \\"<=\\"
					right: Number 0
				}
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			Comment \\" Remove the currently running trigger from the array.\\"
			Call {
				name: String \\"QueuedTriggerRemoveByIndex\\"
				args: Args [
					Number 0
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If other triggers are waiting to run, run one of them.\\"
			Call {
				name: String \\"PauseTimer\\"
				args: Args [
					Name \\"bj_queuedExecTimeoutTimer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"QueuedTriggerAttemptExec\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Empty the trigger queue.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"QueuedTriggerClearBJ\\"
		statements: Statements [
			Call {
				name: String \\"PauseTimer\\"
				args: Args [
					Name \\"bj_queuedExecTimeoutTimer\\"
				]
				statement: Boolean true
			}
			JASSSet {
				name: String \\"bj_queuedExecTotal\\"
				value: Number 0
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Remove all but the currently executing trigger from the trigger queue.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"QueuedTriggerClearInactiveBJ\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_queuedExecTotal\\"
				value: Call {
					name: String \\"IMinBJ\\"
					args: Args [
						Name \\"bj_queuedExecTotal\\"
						Number 1
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QueuedTriggerCountBJ\\"
		returns: String \\"integer\\"
		statements: Statements [
			Return Name \\"bj_queuedExecTotal\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsTriggerQueueEmptyBJ\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Name \\"bj_queuedExecTotal\\"
				operator: String \\"<=\\"
				right: Number 0
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsTriggerQueuedBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"QueuedTriggerGetIndex\\"
					args: Args [
						Name \\"trig\\"
					]
				}
				operator: String \\"!=\\"
				right: UnaryOp {
					operator: String \\"-\\"
					expr: Number 1
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetForLoopIndexA\\"
		returns: String \\"integer\\"
		statements: Statements [
			Return Name \\"bj_forLoopAIndex\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetForLoopIndexA\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"newIndex\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_forLoopAIndex\\"
				value: Name \\"newIndex\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetForLoopIndexB\\"
		returns: String \\"integer\\"
		statements: Statements [
			Return Name \\"bj_forLoopBIndex\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetForLoopIndexB\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"newIndex\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_forLoopBIndex\\"
				value: Name \\"newIndex\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" We can't do game-time waits, so this simulates one by starting a timer\\"
	Comment \\" and polling until the timer expires.\\"
	JASSFunction {
		name: String \\"PolledWait\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"timer\\"
				name: String \\"t\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"timeRemaining\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"duration\\"
					operator: String \\">\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"t\\"
						value: Call {
							name: String \\"CreateTimer\\"
						}
					}
					Call {
						name: String \\"TimerStart\\"
						args: Args [
							Name \\"t\\"
							Name \\"duration\\"
							Boolean false
							Null
						]
						statement: Boolean true
					}
					Loop {
						statements: Statements [
							JASSSet {
								name: String \\"timeRemaining\\"
								value: Call {
									name: String \\"TimerGetRemaining\\"
									args: Args [
										Name \\"t\\"
									]
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"timeRemaining\\"
								operator: String \\"<=\\"
								right: Number 0
							}
							EmptyLine {}
							Comment \\" If we have a bit of time left, skip past 10% of the remaining\\"
							Comment \\" duration instead of checking every interval, to minimize the\\"
							Comment \\" polling on long waits.\\"
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"timeRemaining\\"
									operator: String \\">\\"
									right: Name \\"bj_POLLED_WAIT_SKIP_THRESHOLD\\"
								}
								then: Statements [
									Call {
										name: String \\"TriggerSleepAction\\"
										args: Args [
											BinaryOp {
												left: Number 0.1
												operator: String \\"*\\"
												right: Name \\"timeRemaining\\"
											}
										]
										statement: Boolean true
									}
								]
								elses: Array [
									Else {
										statements: Statements [
											Call {
												name: String \\"TriggerSleepAction\\"
												args: Args [
													Name \\"bj_POLLED_WAIT_INTERVAL\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
					Call {
						name: String \\"DestroyTimer\\"
						args: Args [
							Name \\"t\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IntegerTertiaryOp\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"valueA\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"valueB\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"flag\\"
				then: Statements [
					Return Name \\"valueA\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Name \\"valueB\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  General Utility Functions\\"
	Comment \\"*  These functions exist purely to make the trigger dialogs cleaner and\\"
	Comment \\"*  more comprehensible.\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DoNothing\\"
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" This function does nothing.  WorldEdit should should eventually ignore\\"
	Comment \\" CommentString triggers during script generation, but until such a time,\\"
	Comment \\" this function will serve as a stub.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"CommentString\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"commentString\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" This function returns the input string, converting it from the localized text, if necessary\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"StringIdentity\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"theString\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Return Call {
				name: String \\"GetLocalizedString\\"
				args: Args [
					Name \\"theString\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetBooleanAnd\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"valueA\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"valueB\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Name \\"valueA\\"
				operator: String \\"and\\"
				right: Name \\"valueB\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetBooleanOr\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"valueA\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"valueB\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Name \\"valueA\\"
				operator: String \\"or\\"
				right: Name \\"valueB\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Converts a percentage (real, 0..100) into a scaled integer (0..max),\\"
	Comment \\" clipping the result to 0..max in case the input is invalid.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"PercentToInt\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"percentage\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"max\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"realpercent\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Name \\"percentage\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"I2R\\"
							args: Args [
								Name \\"max\\"
							]
						}
					}
					operator: String \\"*\\"
					right: Number 0.01
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"result\\"
				value: Call {
					name: String \\"MathRound\\"
					args: Args [
						Name \\"realpercent\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"result\\"
					operator: String \\"<\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"result\\"
						value: Number 0
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"result\\"
							operator: String \\">\\"
							right: Name \\"max\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"result\\"
								value: Name \\"max\\"
							}
						]
					}
				]
			}
			EmptyLine {}
			Return Name \\"result\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PercentTo255\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"percentage\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"PercentToInt\\"
				args: Args [
					Name \\"percentage\\"
					Number 255
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetTimeOfDay\\"
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetFloatGameState\\"
				args: Args [
					Name \\"GAME_STATE_TIME_OF_DAY\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTimeOfDay\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"whatTime\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetFloatGameState\\"
				args: Args [
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"whatTime\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTimeOfDayScalePercentBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"scalePercent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTimeOfDayScale\\"
				args: Args [
					BinaryOp {
						left: Name \\"scalePercent\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetTimeOfDayScalePercentBJ\\"
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetTimeOfDayScale\\"
				}
				operator: String \\"*\\"
				right: Number 100
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlaySound\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"soundName\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
				value: Call {
					name: String \\"CreateSound\\"
					args: Args [
						Name \\"soundName\\"
						Boolean false
						Boolean false
						Boolean true
						Number 12700
						Number 12700
						String \\"\\"
					]
				}
			}
			Call {
				name: String \\"StartSound\\"
				args: Args [
					Name \\"soundHandle\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"KillSoundWhenDone\\"
				args: Args [
					Name \\"soundHandle\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CompareLocationsBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"A\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"B\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: BinaryOp {
					left: Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"A\\"
						]
					}
					operator: String \\"==\\"
					right: Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"B\\"
						]
					}
				}
				operator: String \\"and\\"
				right: BinaryOp {
					left: Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"A\\"
						]
					}
					operator: String \\"==\\"
					right: Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"B\\"
						]
					}
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CompareRectsBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"A\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"B\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: BinaryOp {
					left: BinaryOp {
						left: BinaryOp {
							left: Call {
								name: String \\"GetRectMinX\\"
								args: Args [
									Name \\"A\\"
								]
							}
							operator: String \\"==\\"
							right: Call {
								name: String \\"GetRectMinX\\"
								args: Args [
									Name \\"B\\"
								]
							}
						}
						operator: String \\"and\\"
						right: BinaryOp {
							left: Call {
								name: String \\"GetRectMinY\\"
								args: Args [
									Name \\"A\\"
								]
							}
							operator: String \\"==\\"
							right: Call {
								name: String \\"GetRectMinY\\"
								args: Args [
									Name \\"B\\"
								]
							}
						}
					}
					operator: String \\"and\\"
					right: BinaryOp {
						left: Call {
							name: String \\"GetRectMaxX\\"
							args: Args [
								Name \\"A\\"
							]
						}
						operator: String \\"==\\"
						right: Call {
							name: String \\"GetRectMaxX\\"
							args: Args [
								Name \\"B\\"
							]
						}
					}
				}
				operator: String \\"and\\"
				right: BinaryOp {
					left: Call {
						name: String \\"GetRectMaxY\\"
						args: Args [
							Name \\"A\\"
						]
					}
					operator: String \\"==\\"
					right: Call {
						name: String \\"GetRectMaxY\\"
						args: Args [
							Name \\"B\\"
						]
					}
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns a square rect that exactly encompasses the specified circle.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GetRectFromCircleBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"center\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
		]
		returns: String \\"rect\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"centerX\\"
				value: Call {
					name: String \\"GetLocationX\\"
					args: Args [
						Name \\"center\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"centerY\\"
				value: Call {
					name: String \\"GetLocationY\\"
					args: Args [
						Name \\"center\\"
					]
				}
			}
			Return Call {
				name: String \\"Rect\\"
				args: Args [
					BinaryOp {
						left: Name \\"centerX\\"
						operator: String \\"-\\"
						right: Name \\"radius\\"
					}
					BinaryOp {
						left: Name \\"centerY\\"
						operator: String \\"-\\"
						right: Name \\"radius\\"
					}
					BinaryOp {
						left: Name \\"centerX\\"
						operator: String \\"+\\"
						right: Name \\"radius\\"
					}
					BinaryOp {
						left: Name \\"centerY\\"
						operator: String \\"+\\"
						right: Name \\"radius\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Camera Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetCurrentCameraSetup\\"
		returns: String \\"camerasetup\\"
		statements: Statements [
			Variable {
				type: String \\"camerasetup\\"
				name: String \\"theCam\\"
				value: Call {
					name: String \\"CreateCameraSetup\\"
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"duration\\"
				value: Number 0
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_TARGET_DISTANCE\\"
					Call {
						name: String \\"GetCameraField\\"
						args: Args [
							Name \\"CAMERA_FIELD_TARGET_DISTANCE\\"
						]
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_FARZ\\"
					Call {
						name: String \\"GetCameraField\\"
						args: Args [
							Name \\"CAMERA_FIELD_FARZ\\"
						]
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_ZOFFSET\\"
					Call {
						name: String \\"GetCameraField\\"
						args: Args [
							Name \\"CAMERA_FIELD_ZOFFSET\\"
						]
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_ANGLE_OF_ATTACK\\"
					BinaryOp {
						left: Name \\"bj_RADTODEG\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"GetCameraField\\"
							args: Args [
								Name \\"CAMERA_FIELD_ANGLE_OF_ATTACK\\"
							]
						}
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_FIELD_OF_VIEW\\"
					BinaryOp {
						left: Name \\"bj_RADTODEG\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"GetCameraField\\"
							args: Args [
								Name \\"CAMERA_FIELD_FIELD_OF_VIEW\\"
							]
						}
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_ROLL\\"
					BinaryOp {
						left: Name \\"bj_RADTODEG\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"GetCameraField\\"
							args: Args [
								Name \\"CAMERA_FIELD_ROLL\\"
							]
						}
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_ROTATION\\"
					BinaryOp {
						left: Name \\"bj_RADTODEG\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"GetCameraField\\"
							args: Args [
								Name \\"CAMERA_FIELD_ROTATION\\"
							]
						}
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_LOCAL_PITCH\\"
					BinaryOp {
						left: Name \\"bj_RADTODEG\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"GetCameraField\\"
							args: Args [
								Name \\"CAMERA_FIELD_LOCAL_PITCH\\"
							]
						}
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_LOCAL_YAW\\"
					BinaryOp {
						left: Name \\"bj_RADTODEG\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"GetCameraField\\"
							args: Args [
								Name \\"CAMERA_FIELD_LOCAL_YAW\\"
							]
						}
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetField\\"
				args: Args [
					Name \\"theCam\\"
					Name \\"CAMERA_FIELD_LOCAL_ROLL\\"
					BinaryOp {
						left: Name \\"bj_RADTODEG\\"
						operator: String \\"*\\"
						right: Call {
							name: String \\"GetCameraField\\"
							args: Args [
								Name \\"CAMERA_FIELD_LOCAL_ROLL\\"
							]
						}
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"CameraSetupSetDestPosition\\"
				args: Args [
					Name \\"theCam\\"
					Call {
						name: String \\"GetCameraTargetPositionX\\"
					}
					Call {
						name: String \\"GetCameraTargetPositionY\\"
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Return Name \\"theCam\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraSetupApplyForPlayer\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"doPan\\"
			}
			Param {
				type: String \\"camerasetup\\"
				name: String \\"whichSetup\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"CameraSetupApplyForceDuration\\"
						args: Args [
							Name \\"whichSetup\\"
							Name \\"doPan\\"
							Name \\"duration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraSetupApplyForPlayerSmooth\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"doPan\\"
			}
			Param {
				type: String \\"camerasetup\\"
				name: String \\"whichSetup\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"forcedDuration\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"easeInDuration\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"easeOutDuration\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"smoothFactor\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"BlzCameraSetupApplyForceDurationSmooth\\"
						args: Args [
							Name \\"whichSetup\\"
							Name \\"doPan\\"
							Name \\"forcedDuration\\"
							Name \\"easeInDuration\\"
							Name \\"easeOutDuration\\"
							Name \\"smoothFactor\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraSetupGetFieldSwap\\"
		params: Params [
			Param {
				type: String \\"camerafield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"camerasetup\\"
				name: String \\"whichSetup\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"CameraSetupGetField\\"
				args: Args [
					Name \\"whichSetup\\"
					Name \\"whichField\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraFieldForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"camerafield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraField\\"
						args: Args [
							Name \\"whichField\\"
							Name \\"value\\"
							Name \\"duration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraTargetControllerNoZForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"xoffset\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"yoffset\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"inheritOrientation\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraTargetController\\"
						args: Args [
							Name \\"whichUnit\\"
							Name \\"xoffset\\"
							Name \\"yoffset\\"
							Name \\"inheritOrientation\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraPositionForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraPosition\\"
						args: Args [
							Name \\"x\\"
							Name \\"y\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraPositionLocForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraPosition\\"
						args: Args [
							Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"loc\\"
								]
							}
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RotateCameraAroundLocBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"degrees\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraRotateMode\\"
						args: Args [
							Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							BinaryOp {
								left: Name \\"bj_DEGTORAD\\"
								operator: String \\"*\\"
								right: Name \\"degrees\\"
							}
							Name \\"duration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PanCameraToForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"PanCameraTo\\"
						args: Args [
							Name \\"x\\"
							Name \\"y\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PanCameraToLocForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"PanCameraTo\\"
						args: Args [
							Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"loc\\"
								]
							}
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PanCameraToTimedForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"PanCameraToTimed\\"
						args: Args [
							Name \\"x\\"
							Name \\"y\\"
							Name \\"duration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PanCameraToTimedLocForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"PanCameraToTimed\\"
						args: Args [
							Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Name \\"duration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PanCameraToTimedLocWithZForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zOffset\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"PanCameraToTimedWithZ\\"
						args: Args [
							Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Name \\"zOffset\\"
							Name \\"duration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SmartCameraPanBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"dist\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"cameraLoc\\"
				value: Call {
					name: String \\"GetCameraTargetPositionLoc\\"
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					EmptyLine {}
					JASSSet {
						name: String \\"dist\\"
						value: Call {
							name: String \\"DistanceBetweenPoints\\"
							args: Args [
								Name \\"loc\\"
								Name \\"cameraLoc\\"
							]
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"dist\\"
							operator: String \\">=\\"
							right: Name \\"bj_SMARTPAN_TRESHOLD_SNAP\\"
						}
						then: Statements [
							Comment \\" If the user is too far away, snap the camera.\\"
							Call {
								name: String \\"PanCameraToTimed\\"
								args: Args [
									Call {
										name: String \\"GetLocationX\\"
										args: Args [
											Name \\"loc\\"
										]
									}
									Call {
										name: String \\"GetLocationY\\"
										args: Args [
											Name \\"loc\\"
										]
									}
									Number 0
								]
								statement: Boolean true
							}
						]
						elses: Array [
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"dist\\"
									operator: String \\">=\\"
									right: Name \\"bj_SMARTPAN_TRESHOLD_PAN\\"
								}
								statements: Statements [
									Comment \\" If the user is moderately close, pan the camera.\\"
									Call {
										name: String \\"PanCameraToTimed\\"
										args: Args [
											Call {
												name: String \\"GetLocationX\\"
												args: Args [
													Name \\"loc\\"
												]
											}
											Call {
												name: String \\"GetLocationY\\"
												args: Args [
													Name \\"loc\\"
												]
											}
											Name \\"duration\\"
										]
										statement: Boolean true
									}
								]
							}
							Else {
								statements: Statements [
									Comment \\" User is close enough, so don't touch the camera.\\"
								]
							}
						]
					}
				]
			}
			Call {
				name: String \\"RemoveLocation\\"
				args: Args [
					Name \\"cameraLoc\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCinematicCameraForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"cameraModelFile\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCinematicCamera\\"
						args: Args [
							Name \\"cameraModelFile\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ResetToGameCameraForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ResetToGameCamera\\"
						args: Args [
							Name \\"duration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraSetSourceNoiseForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"magnitude\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"velocity\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"CameraSetSourceNoise\\"
						args: Args [
							Name \\"magnitude\\"
							Name \\"velocity\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraSetTargetNoiseForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"magnitude\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"velocity\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"CameraSetTargetNoise\\"
						args: Args [
							Name \\"magnitude\\"
							Name \\"velocity\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraSetEQNoiseForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"magnitude\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"richter\\"
				value: Name \\"magnitude\\"
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"richter\\"
					operator: String \\">\\"
					right: Number 5
				}
				then: Statements [
					JASSSet {
						name: String \\"richter\\"
						value: Number 5
					}
				]
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"richter\\"
					operator: String \\"<\\"
					right: Number 2
				}
				then: Statements [
					JASSSet {
						name: String \\"richter\\"
						value: Number 2
					}
				]
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"CameraSetTargetNoiseEx\\"
						args: Args [
							BinaryOp {
								left: Name \\"magnitude\\"
								operator: String \\"*\\"
								right: Number 2
							}
							BinaryOp {
								left: Name \\"magnitude\\"
								operator: String \\"*\\"
								right: Call {
									name: String \\"Pow\\"
									args: Args [
										Number 10
										Name \\"richter\\"
									]
								}
							}
							Boolean true
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CameraSetSourceNoiseEx\\"
						args: Args [
							BinaryOp {
								left: Name \\"magnitude\\"
								operator: String \\"*\\"
								right: Number 2
							}
							BinaryOp {
								left: Name \\"magnitude\\"
								operator: String \\"*\\"
								right: Call {
									name: String \\"Pow\\"
									args: Args [
										Number 10
										Name \\"richter\\"
									]
								}
							}
							Boolean true
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraClearNoiseForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"CameraSetSourceNoise\\"
						args: Args [
							Number 0
							Number 0
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CameraSetTargetNoise\\"
						args: Args [
							Number 0
							Number 0
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Query the current camera bounds.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GetCurrentCameraBoundsMapRectBJ\\"
		returns: String \\"rect\\"
		statements: Statements [
			Return Call {
				name: String \\"Rect\\"
				args: Args [
					Call {
						name: String \\"GetCameraBoundMinX\\"
					}
					Call {
						name: String \\"GetCameraBoundMinY\\"
					}
					Call {
						name: String \\"GetCameraBoundMaxX\\"
					}
					Call {
						name: String \\"GetCameraBoundMaxY\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Query the initial camera bounds, as defined at map init.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GetCameraBoundsMapRect\\"
		returns: String \\"rect\\"
		statements: Statements [
			Return Name \\"bj_mapInitialCameraBounds\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Query the playable map area, as defined at map init.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GetPlayableMapRect\\"
		returns: String \\"rect\\"
		statements: Statements [
			Return Name \\"bj_mapInitialPlayableArea\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Query the entire map area, as defined at map init.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GetEntireMapRect\\"
		returns: String \\"rect\\"
		statements: Statements [
			Return Call {
				name: String \\"GetWorldBounds\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraBoundsToRect\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"minX\\"
				value: Call {
					name: String \\"GetRectMinX\\"
					args: Args [
						Name \\"r\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"minY\\"
				value: Call {
					name: String \\"GetRectMinY\\"
					args: Args [
						Name \\"r\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"maxX\\"
				value: Call {
					name: String \\"GetRectMaxX\\"
					args: Args [
						Name \\"r\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"maxY\\"
				value: Call {
					name: String \\"GetRectMaxY\\"
					args: Args [
						Name \\"r\\"
					]
				}
			}
			Call {
				name: String \\"SetCameraBounds\\"
				args: Args [
					Name \\"minX\\"
					Name \\"minY\\"
					Name \\"minX\\"
					Name \\"maxY\\"
					Name \\"maxX\\"
					Name \\"maxY\\"
					Name \\"maxX\\"
					Name \\"minY\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraBoundsToRectForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraBoundsToRect\\"
						args: Args [
							Name \\"r\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AdjustCameraBoundsBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"adjustMethod\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dxWest\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dxEast\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dyNorth\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dySouth\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"minX\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"minY\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"maxX\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"maxY\\"
				value: Number 0
			}
			Variable {
				type: String \\"real\\"
				name: String \\"scale\\"
				value: Number 0
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"adjustMethod\\"
					operator: String \\"==\\"
					right: Name \\"bj_CAMERABOUNDS_ADJUST_ADD\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"scale\\"
						value: Number 1
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"adjustMethod\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMERABOUNDS_ADJUST_SUB\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"scale\\"
								value: UnaryOp {
									operator: String \\"-\\"
									expr: Number 1
								}
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized adjustment method - ignore the request.\\"
							Return __undefined__
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Adjust the actual camera values\\"
			JASSSet {
				name: String \\"minX\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetCameraBoundMinX\\"
					}
					operator: String \\"-\\"
					right: BinaryOp {
						left: Name \\"scale\\"
						operator: String \\"*\\"
						right: Name \\"dxWest\\"
					}
				}
			}
			JASSSet {
				name: String \\"maxX\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetCameraBoundMaxX\\"
					}
					operator: String \\"+\\"
					right: BinaryOp {
						left: Name \\"scale\\"
						operator: String \\"*\\"
						right: Name \\"dxEast\\"
					}
				}
			}
			JASSSet {
				name: String \\"minY\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetCameraBoundMinY\\"
					}
					operator: String \\"-\\"
					right: BinaryOp {
						left: Name \\"scale\\"
						operator: String \\"*\\"
						right: Name \\"dySouth\\"
					}
				}
			}
			JASSSet {
				name: String \\"maxY\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetCameraBoundMaxY\\"
					}
					operator: String \\"+\\"
					right: BinaryOp {
						left: Name \\"scale\\"
						operator: String \\"*\\"
						right: Name \\"dyNorth\\"
					}
				}
			}
			EmptyLine {}
			Comment \\" Make sure the camera bounds are still valid.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"maxX\\"
					operator: String \\"<\\"
					right: Name \\"minX\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"minX\\"
						value: BinaryOp {
							left: Parens BinaryOp {
								left: Name \\"minX\\"
								operator: String \\"+\\"
								right: Name \\"maxX\\"
							}
							operator: String \\"*\\"
							right: Number 0.5
						}
					}
					JASSSet {
						name: String \\"maxX\\"
						value: Name \\"minX\\"
					}
				]
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"maxY\\"
					operator: String \\"<\\"
					right: Name \\"minY\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"minY\\"
						value: BinaryOp {
							left: Parens BinaryOp {
								left: Name \\"minY\\"
								operator: String \\"+\\"
								right: Name \\"maxY\\"
							}
							operator: String \\"*\\"
							right: Number 0.5
						}
					}
					JASSSet {
						name: String \\"maxY\\"
						value: Name \\"minY\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Apply the new camera values.\\"
			Call {
				name: String \\"SetCameraBounds\\"
				args: Args [
					Name \\"minX\\"
					Name \\"minY\\"
					Name \\"minX\\"
					Name \\"maxY\\"
					Name \\"maxX\\"
					Name \\"maxY\\"
					Name \\"maxX\\"
					Name \\"minY\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AdjustCameraBoundsForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"adjustMethod\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dxWest\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dxEast\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dyNorth\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"dySouth\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"AdjustCameraBoundsBJ\\"
						args: Args [
							Name \\"adjustMethod\\"
							Name \\"dxWest\\"
							Name \\"dxEast\\"
							Name \\"dyNorth\\"
							Name \\"dySouth\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraQuickPositionForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraQuickPosition\\"
						args: Args [
							Name \\"x\\"
							Name \\"y\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraQuickPositionLocForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraQuickPosition\\"
						args: Args [
							Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"loc\\"
								]
							}
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraQuickPositionLoc\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetCameraQuickPosition\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StopCameraForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"StopCamera\\"
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCameraOrientControllerForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"xoffset\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"yoffset\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetCameraOrientController\\"
						args: Args [
							Name \\"whichUnit\\"
							Name \\"xoffset\\"
							Name \\"yoffset\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraSetSmoothingFactorBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"factor\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"CameraSetSmoothingFactor\\"
				args: Args [
					Name \\"factor\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CameraResetSmoothingFactorBJ\\"
		statements: Statements [
			Call {
				name: String \\"CameraSetSmoothingFactor\\"
				args: Args [
					Number 0
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Text Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DisplayTextToForce\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"toForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"DisplayTextToPlayer\\"
						args: Args [
							Call {
								name: String \\"GetLocalPlayer\\"
							}
							Number 0
							Number 0
							Name \\"message\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DisplayTimedTextToForce\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"toForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"DisplayTimedTextToPlayer\\"
						args: Args [
							Call {
								name: String \\"GetLocalPlayer\\"
							}
							Number 0
							Number 0
							Name \\"duration\\"
							Name \\"message\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ClearTextMessagesBJ\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"toForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ClearTextMessages\\"
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" The parameters for the API Substring function are unintuitive, so this\\"
	Comment \\" merely performs a translation for the starting index.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SubStringBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"source\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"start\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"end\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Return Call {
				name: String \\"SubString\\"
				args: Args [
					Name \\"source\\"
					BinaryOp {
						left: Name \\"start\\"
						operator: String \\"-\\"
						right: Number 1
					}
					Name \\"end\\"
				]
			}
		]
	}
	EmptyLine {}
	JASSFunction {
		name: String \\"GetHandleIdBJ\\"
		params: Params [
			Param {
				type: String \\"handle\\"
				name: String \\"h\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetHandleId\\"
				args: Args [
					Name \\"h\\"
				]
			}
		]
	}
	EmptyLine {}
	JASSFunction {
		name: String \\"StringHashBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"s\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"StringHash\\"
				args: Args [
					Name \\"s\\"
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Event Registration Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterTimerEventPeriodic\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeout\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterTimerEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"timeout\\"
					Boolean true
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterTimerEventSingle\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeout\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterTimerEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"timeout\\"
					Boolean false
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterTimerExpireEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"timer\\"
				name: String \\"t\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterTimerExpireEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"t\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerUnitEventSimple\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"playerunitevent\\"
				name: String \\"whichEvent\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterPlayerUnitEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichPlayer\\"
					Name \\"whichEvent\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterAnyUnitEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"playerunitevent\\"
				name: String \\"whichEvent\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					Call {
						name: String \\"TriggerRegisterPlayerUnitEvent\\"
						args: Args [
							Name \\"trig\\"
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							Name \\"whichEvent\\"
							Null
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYER_SLOTS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerSelectionEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"selected\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"selected\\"
				then: Statements [
					Return Call {
						name: String \\"TriggerRegisterPlayerUnitEvent\\"
						args: Args [
							Name \\"trig\\"
							Name \\"whichPlayer\\"
							Name \\"EVENT_PLAYER_UNIT_SELECTED\\"
							Null
						]
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Call {
								name: String \\"TriggerRegisterPlayerUnitEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"whichPlayer\\"
									Name \\"EVENT_PLAYER_UNIT_DESELECTED\\"
									Null
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerKeyEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"keType\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"keKey\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"keType\\"
					operator: String \\"==\\"
					right: Name \\"bj_KEYEVENTTYPE_DEPRESS\\"
				}
				then: Statements [
					Comment \\" Depress event - find out what key\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"keKey\\"
							operator: String \\"==\\"
							right: Name \\"bj_KEYEVENTKEY_LEFT\\"
						}
						then: Statements [
							Return Call {
								name: String \\"TriggerRegisterPlayerEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"whichPlayer\\"
									Name \\"EVENT_PLAYER_ARROW_LEFT_DOWN\\"
								]
							}
						]
						elses: Array [
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"keKey\\"
									operator: String \\"==\\"
									right: Name \\"bj_KEYEVENTKEY_RIGHT\\"
								}
								statements: Statements [
									Return Call {
										name: String \\"TriggerRegisterPlayerEvent\\"
										args: Args [
											Name \\"trig\\"
											Name \\"whichPlayer\\"
											Name \\"EVENT_PLAYER_ARROW_RIGHT_DOWN\\"
										]
									}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"keKey\\"
									operator: String \\"==\\"
									right: Name \\"bj_KEYEVENTKEY_DOWN\\"
								}
								statements: Statements [
									Return Call {
										name: String \\"TriggerRegisterPlayerEvent\\"
										args: Args [
											Name \\"trig\\"
											Name \\"whichPlayer\\"
											Name \\"EVENT_PLAYER_ARROW_DOWN_DOWN\\"
										]
									}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"keKey\\"
									operator: String \\"==\\"
									right: Name \\"bj_KEYEVENTKEY_UP\\"
								}
								statements: Statements [
									Return Call {
										name: String \\"TriggerRegisterPlayerEvent\\"
										args: Args [
											Name \\"trig\\"
											Name \\"whichPlayer\\"
											Name \\"EVENT_PLAYER_ARROW_UP_DOWN\\"
										]
									}
								]
							}
							Else {
								statements: Statements [
									Comment \\" Unrecognized key - ignore the request and return failure.\\"
									Return Null
								]
							}
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"keType\\"
							operator: String \\"==\\"
							right: Name \\"bj_KEYEVENTTYPE_RELEASE\\"
						}
						statements: Statements [
							Comment \\" Release event - find out what key\\"
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"keKey\\"
									operator: String \\"==\\"
									right: Name \\"bj_KEYEVENTKEY_LEFT\\"
								}
								then: Statements [
									Return Call {
										name: String \\"TriggerRegisterPlayerEvent\\"
										args: Args [
											Name \\"trig\\"
											Name \\"whichPlayer\\"
											Name \\"EVENT_PLAYER_ARROW_LEFT_UP\\"
										]
									}
								]
								elses: Array [
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"keKey\\"
											operator: String \\"==\\"
											right: Name \\"bj_KEYEVENTKEY_RIGHT\\"
										}
										statements: Statements [
											Return Call {
												name: String \\"TriggerRegisterPlayerEvent\\"
												args: Args [
													Name \\"trig\\"
													Name \\"whichPlayer\\"
													Name \\"EVENT_PLAYER_ARROW_RIGHT_UP\\"
												]
											}
										]
									}
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"keKey\\"
											operator: String \\"==\\"
											right: Name \\"bj_KEYEVENTKEY_DOWN\\"
										}
										statements: Statements [
											Return Call {
												name: String \\"TriggerRegisterPlayerEvent\\"
												args: Args [
													Name \\"trig\\"
													Name \\"whichPlayer\\"
													Name \\"EVENT_PLAYER_ARROW_DOWN_UP\\"
												]
											}
										]
									}
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"keKey\\"
											operator: String \\"==\\"
											right: Name \\"bj_KEYEVENTKEY_UP\\"
										}
										statements: Statements [
											Return Call {
												name: String \\"TriggerRegisterPlayerEvent\\"
												args: Args [
													Name \\"trig\\"
													Name \\"whichPlayer\\"
													Name \\"EVENT_PLAYER_ARROW_UP_UP\\"
												]
											}
										]
									}
									Else {
										statements: Statements [
											Comment \\" Unrecognized key - ignore the request and return failure.\\"
											Return Null
										]
									}
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized type - ignore the request and return failure.\\"
							Return Null
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerMouseEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"meType\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"meType\\"
					operator: String \\"==\\"
					right: Name \\"bj_MOUSEEVENTTYPE_DOWN\\"
				}
				then: Statements [
					Comment \\" Mouse down event\\"
					Return Call {
						name: String \\"TriggerRegisterPlayerEvent\\"
						args: Args [
							Name \\"trig\\"
							Name \\"whichPlayer\\"
							Name \\"EVENT_PLAYER_MOUSE_DOWN\\"
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"meType\\"
							operator: String \\"==\\"
							right: Name \\"bj_MOUSEEVENTTYPE_UP\\"
						}
						statements: Statements [
							Comment \\" Mouse up event\\"
							Return Call {
								name: String \\"TriggerRegisterPlayerEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"whichPlayer\\"
									Name \\"EVENT_PLAYER_MOUSE_UP\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"meType\\"
							operator: String \\"==\\"
							right: Name \\"bj_MOUSEEVENTTYPE_MOVE\\"
						}
						statements: Statements [
							Comment \\" Mouse move event\\"
							Return Call {
								name: String \\"TriggerRegisterPlayerEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"whichPlayer\\"
									Name \\"EVENT_PLAYER_MOUSE_MOVE\\"
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized type - ignore the request and return failure.\\"
							Return Null
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerEventVictory\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterPlayerEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichPlayer\\"
					Name \\"EVENT_PLAYER_VICTORY\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerEventDefeat\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterPlayerEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichPlayer\\"
					Name \\"EVENT_PLAYER_DEFEAT\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerEventLeave\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterPlayerEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichPlayer\\"
					Name \\"EVENT_PLAYER_LEAVE\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerEventAllianceChanged\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterPlayerEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichPlayer\\"
					Name \\"EVENT_PLAYER_ALLIANCE_CHANGED\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterPlayerEventEndCinematic\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterPlayerEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichPlayer\\"
					Name \\"EVENT_PLAYER_END_CINEMATIC\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterGameStateEventTimeOfDay\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"limitop\\"
				name: String \\"opcode\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"limitval\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterGameStateEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"opcode\\"
					Name \\"limitval\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterEnterRegionSimple\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"region\\"
				name: String \\"whichRegion\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterEnterRegion\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichRegion\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterLeaveRegionSimple\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"region\\"
				name: String \\"whichRegion\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterLeaveRegion\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichRegion\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterEnterRectSimple\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Variable {
				type: String \\"region\\"
				name: String \\"rectRegion\\"
				value: Call {
					name: String \\"CreateRegion\\"
				}
			}
			Call {
				name: String \\"RegionAddRect\\"
				args: Args [
					Name \\"rectRegion\\"
					Name \\"r\\"
				]
				statement: Boolean true
			}
			Return Call {
				name: String \\"TriggerRegisterEnterRegion\\"
				args: Args [
					Name \\"trig\\"
					Name \\"rectRegion\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterLeaveRectSimple\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Variable {
				type: String \\"region\\"
				name: String \\"rectRegion\\"
				value: Call {
					name: String \\"CreateRegion\\"
				}
			}
			Call {
				name: String \\"RegionAddRect\\"
				args: Args [
					Name \\"rectRegion\\"
					Name \\"r\\"
				]
				statement: Boolean true
			}
			Return Call {
				name: String \\"TriggerRegisterLeaveRegion\\"
				args: Args [
					Name \\"trig\\"
					Name \\"rectRegion\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterDistanceBetweenUnits\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"boolexpr\\"
				name: String \\"condition\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"range\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterUnitInRange\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichUnit\\"
					Name \\"range\\"
					Name \\"condition\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterUnitInRangeSimple\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"range\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterUnitInRange\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichUnit\\"
					Name \\"range\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterUnitLifeEvent\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"limitop\\"
				name: String \\"opcode\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"limitval\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterUnitStateEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichUnit\\"
					Name \\"UNIT_STATE_LIFE\\"
					Name \\"opcode\\"
					Name \\"limitval\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterUnitManaEvent\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"limitop\\"
				name: String \\"opcode\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"limitval\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterUnitStateEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichUnit\\"
					Name \\"UNIT_STATE_MANA\\"
					Name \\"opcode\\"
					Name \\"limitval\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterDialogEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"dialog\\"
				name: String \\"whichDialog\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterDialogEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"whichDialog\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterShowSkillEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterGameEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"EVENT_GAME_SHOW_SKILL\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterBuildSubmenuEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterGameEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"EVENT_GAME_BUILD_SUBMENU\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterBuildCommandEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Call {
				name: String \\"TriggerRegisterCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					FourCC \\"ANbu\\"
					Call {
						name: String \\"UnitId2String\\"
						args: Args [
							Name \\"unitId\\"
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerRegisterCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					FourCC \\"AHbu\\"
					Call {
						name: String \\"UnitId2String\\"
						args: Args [
							Name \\"unitId\\"
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerRegisterCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					FourCC \\"AEbu\\"
					Call {
						name: String \\"UnitId2String\\"
						args: Args [
							Name \\"unitId\\"
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerRegisterCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					FourCC \\"AObu\\"
					Call {
						name: String \\"UnitId2String\\"
						args: Args [
							Name \\"unitId\\"
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerRegisterCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					FourCC \\"AUbu\\"
					Call {
						name: String \\"UnitId2String\\"
						args: Args [
							Name \\"unitId\\"
						]
					}
				]
				statement: Boolean true
			}
			Return Call {
				name: String \\"TriggerRegisterCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					FourCC \\"AGbu\\"
					Call {
						name: String \\"UnitId2String\\"
						args: Args [
							Name \\"unitId\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterTrainCommandEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					FourCC \\"Aque\\"
					Call {
						name: String \\"UnitId2String\\"
						args: Args [
							Name \\"unitId\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterUpgradeCommandEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"techId\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterUpgradeCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"techId\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterCommonCommandEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterCommandEvent\\"
				args: Args [
					Name \\"trig\\"
					Number 0
					Name \\"order\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterGameLoadedEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterGameEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"EVENT_GAME_LOADED\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterGameSavedEventBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"TriggerRegisterGameEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"EVENT_GAME_SAVE\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RegisterDestDeathInRegionEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_destInRegionDiesCount\\"
				value: BinaryOp {
					left: Name \\"bj_destInRegionDiesCount\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_destInRegionDiesCount\\"
					operator: String \\"<=\\"
					right: Name \\"bj_MAX_DEST_IN_REGION_EVENTS\\"
				}
				then: Statements [
					Call {
						name: String \\"TriggerRegisterDeathEvent\\"
						args: Args [
							Name \\"bj_destInRegionDiesTrig\\"
							Call {
								name: String \\"GetEnumDestructable\\"
							}
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerRegisterDestDeathInRegionEvent\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_destInRegionDiesTrig\\"
				value: Name \\"trig\\"
			}
			JASSSet {
				name: String \\"bj_destInRegionDiesCount\\"
				value: Number 0
			}
			Call {
				name: String \\"EnumDestructablesInRect\\"
				args: Args [
					Name \\"r\\"
					Null
					FuncRef String \\"R\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Environment Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddWeatherEffectSaveLast\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"effectID\\"
			}
		]
		returns: String \\"weathereffect\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedWeatherEffect\\"
				value: Call {
					name: String \\"AddWeatherEffect\\"
					args: Args [
						Name \\"where\\"
						Name \\"effectID\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedWeatherEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedWeatherEffect\\"
		returns: String \\"weathereffect\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedWeatherEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RemoveWeatherEffectBJ\\"
		params: Params [
			Param {
				type: String \\"weathereffect\\"
				name: String \\"whichWeatherEffect\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"RemoveWeatherEffect\\"
				args: Args [
					Name \\"whichWeatherEffect\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TerrainDeformationCraterBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"permanent\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"depth\\"
			}
		]
		returns: String \\"terraindeformation\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedTerrainDeformation\\"
				value: Call {
					name: String \\"TerrainDeformCrater\\"
					args: Args [
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Name \\"radius\\"
						Name \\"depth\\"
						Call {
							name: String \\"R2I\\"
							args: Args [
								BinaryOp {
									left: Name \\"duration\\"
									operator: String \\"*\\"
									right: Number 1000
								}
							]
						}
						Name \\"permanent\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedTerrainDeformation\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TerrainDeformationRippleBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"limitNeg\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"startRadius\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"endRadius\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"depth\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"wavePeriod\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"waveWidth\\"
			}
		]
		returns: String \\"terraindeformation\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"spaceWave\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"timeWave\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"radiusRatio\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: BinaryOp {
						left: BinaryOp {
							left: Name \\"endRadius\\"
							operator: String \\"<=\\"
							right: Number 0
						}
						operator: String \\"or\\"
						right: BinaryOp {
							left: Name \\"waveWidth\\"
							operator: String \\"<=\\"
							right: Number 0
						}
					}
					operator: String \\"or\\"
					right: BinaryOp {
						left: Name \\"wavePeriod\\"
						operator: String \\"<=\\"
						right: Number 0
					}
				}
				then: Statements [
					Return Null
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"timeWave\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Number 2
						operator: String \\"*\\"
						right: Name \\"duration\\"
					}
					operator: String \\"/\\"
					right: Name \\"wavePeriod\\"
				}
			}
			JASSSet {
				name: String \\"spaceWave\\"
				value: BinaryOp {
					left: BinaryOp {
						left: Number 2
						operator: String \\"*\\"
						right: Name \\"endRadius\\"
					}
					operator: String \\"/\\"
					right: Name \\"waveWidth\\"
				}
			}
			JASSSet {
				name: String \\"radiusRatio\\"
				value: BinaryOp {
					left: Name \\"startRadius\\"
					operator: String \\"/\\"
					right: Name \\"endRadius\\"
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_lastCreatedTerrainDeformation\\"
				value: Call {
					name: String \\"TerrainDeformRipple\\"
					args: Args [
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Name \\"endRadius\\"
						Name \\"depth\\"
						Call {
							name: String \\"R2I\\"
							args: Args [
								BinaryOp {
									left: Name \\"duration\\"
									operator: String \\"*\\"
									right: Number 1000
								}
							]
						}
						Number 1
						Name \\"spaceWave\\"
						Name \\"timeWave\\"
						Name \\"radiusRatio\\"
						Name \\"limitNeg\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedTerrainDeformation\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TerrainDeformationWaveBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"source\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"target\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"depth\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"trailDelay\\"
			}
		]
		returns: String \\"terraindeformation\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"distance\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"dirX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"dirY\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"speed\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"distance\\"
				value: Call {
					name: String \\"DistanceBetweenPoints\\"
					args: Args [
						Name \\"source\\"
						Name \\"target\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: BinaryOp {
						left: Name \\"distance\\"
						operator: String \\"==\\"
						right: Number 0
					}
					operator: String \\"or\\"
					right: BinaryOp {
						left: Name \\"duration\\"
						operator: String \\"<=\\"
						right: Number 0
					}
				}
				then: Statements [
					Return Null
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"dirX\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"target\\"
							]
						}
						operator: String \\"-\\"
						right: Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"source\\"
							]
						}
					}
					operator: String \\"/\\"
					right: Name \\"distance\\"
				}
			}
			JASSSet {
				name: String \\"dirY\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"target\\"
							]
						}
						operator: String \\"-\\"
						right: Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"source\\"
							]
						}
					}
					operator: String \\"/\\"
					right: Name \\"distance\\"
				}
			}
			JASSSet {
				name: String \\"speed\\"
				value: BinaryOp {
					left: Name \\"distance\\"
					operator: String \\"/\\"
					right: Name \\"duration\\"
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_lastCreatedTerrainDeformation\\"
				value: Call {
					name: String \\"TerrainDeformWave\\"
					args: Args [
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"source\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"source\\"
							]
						}
						Name \\"dirX\\"
						Name \\"dirY\\"
						Name \\"distance\\"
						Name \\"speed\\"
						Name \\"radius\\"
						Name \\"depth\\"
						Call {
							name: String \\"R2I\\"
							args: Args [
								BinaryOp {
									left: Name \\"trailDelay\\"
									operator: String \\"*\\"
									right: Number 1000
								}
							]
						}
						Number 1
					]
				}
			}
			Return Name \\"bj_lastCreatedTerrainDeformation\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TerrainDeformationRandomBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"minDelta\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"maxDelta\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"updateInterval\\"
			}
		]
		returns: String \\"terraindeformation\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedTerrainDeformation\\"
				value: Call {
					name: String \\"TerrainDeformRandom\\"
					args: Args [
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Name \\"radius\\"
						Name \\"minDelta\\"
						Name \\"maxDelta\\"
						Call {
							name: String \\"R2I\\"
							args: Args [
								BinaryOp {
									left: Name \\"duration\\"
									operator: String \\"*\\"
									right: Number 1000
								}
							]
						}
						Call {
							name: String \\"R2I\\"
							args: Args [
								BinaryOp {
									left: Name \\"updateInterval\\"
									operator: String \\"*\\"
									right: Number 1000
								}
							]
						}
					]
				}
			}
			Return Name \\"bj_lastCreatedTerrainDeformation\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TerrainDeformationStopBJ\\"
		params: Params [
			Param {
				type: String \\"terraindeformation\\"
				name: String \\"deformation\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TerrainDeformStop\\"
				args: Args [
					Name \\"deformation\\"
					Call {
						name: String \\"R2I\\"
						args: Args [
							BinaryOp {
								left: Name \\"duration\\"
								operator: String \\"*\\"
								right: Number 1000
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedTerrainDeformation\\"
		returns: String \\"terraindeformation\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedTerrainDeformation\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddLightningLoc\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"codeName\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where1\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where2\\"
			}
		]
		returns: String \\"lightning\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedLightning\\"
				value: Call {
					name: String \\"AddLightningEx\\"
					args: Args [
						Name \\"codeName\\"
						Boolean true
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"where1\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"where1\\"
							]
						}
						Call {
							name: String \\"GetLocationZ\\"
							args: Args [
								Name \\"where1\\"
							]
						}
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"where2\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"where2\\"
							]
						}
						Call {
							name: String \\"GetLocationZ\\"
							args: Args [
								Name \\"where2\\"
							]
						}
					]
				}
			}
			Return Name \\"bj_lastCreatedLightning\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyLightningBJ\\"
		params: Params [
			Param {
				type: String \\"lightning\\"
				name: String \\"whichBolt\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"DestroyLightning\\"
				args: Args [
					Name \\"whichBolt\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MoveLightningLoc\\"
		params: Params [
			Param {
				type: String \\"lightning\\"
				name: String \\"whichBolt\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where1\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where2\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"MoveLightningEx\\"
				args: Args [
					Name \\"whichBolt\\"
					Boolean true
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where1\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where1\\"
						]
					}
					Call {
						name: String \\"GetLocationZ\\"
						args: Args [
							Name \\"where1\\"
						]
					}
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where2\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where2\\"
						]
					}
					Call {
						name: String \\"GetLocationZ\\"
						args: Args [
							Name \\"where2\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLightningColorABJ\\"
		params: Params [
			Param {
				type: String \\"lightning\\"
				name: String \\"whichBolt\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetLightningColorA\\"
				args: Args [
					Name \\"whichBolt\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLightningColorRBJ\\"
		params: Params [
			Param {
				type: String \\"lightning\\"
				name: String \\"whichBolt\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetLightningColorR\\"
				args: Args [
					Name \\"whichBolt\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLightningColorGBJ\\"
		params: Params [
			Param {
				type: String \\"lightning\\"
				name: String \\"whichBolt\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetLightningColorG\\"
				args: Args [
					Name \\"whichBolt\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLightningColorBBJ\\"
		params: Params [
			Param {
				type: String \\"lightning\\"
				name: String \\"whichBolt\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetLightningColorB\\"
				args: Args [
					Name \\"whichBolt\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetLightningColorBJ\\"
		params: Params [
			Param {
				type: String \\"lightning\\"
				name: String \\"whichBolt\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"g\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"b\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"a\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SetLightningColor\\"
				args: Args [
					Name \\"whichBolt\\"
					Name \\"r\\"
					Name \\"g\\"
					Name \\"b\\"
					Name \\"a\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedLightningBJ\\"
		returns: String \\"lightning\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedLightning\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetAbilityEffectBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilcode\\"
			}
			Param {
				type: String \\"effecttype\\"
				name: String \\"t\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Return Call {
				name: String \\"GetAbilityEffectById\\"
				args: Args [
					Name \\"abilcode\\"
					Name \\"t\\"
					Name \\"index\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetAbilitySoundBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilcode\\"
			}
			Param {
				type: String \\"soundtype\\"
				name: String \\"t\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Return Call {
				name: String \\"GetAbilitySoundById\\"
				args: Args [
					Name \\"abilcode\\"
					Name \\"t\\"
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetTerrainCliffLevelBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetTerrainCliffLevel\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetTerrainTypeBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetTerrainType\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetTerrainVarianceBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetTerrainVariance\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTerrainTypeBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"terrainType\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"variation\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"area\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"shape\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTerrainType\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Name \\"terrainType\\"
					Name \\"variation\\"
					Name \\"area\\"
					Name \\"shape\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsTerrainPathableBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"pathingtype\\"
				name: String \\"t\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsTerrainPathable\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Name \\"t\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTerrainPathableBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"pathingtype\\"
				name: String \\"t\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTerrainPathable\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Name \\"t\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetWaterBaseColorBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetWaterBaseColor\\"
				args: Args [
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateFogModifierRectSimple\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"fogstate\\"
				name: String \\"whichFogState\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"afterUnits\\"
			}
		]
		returns: String \\"fogmodifier\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedFogModifier\\"
				value: Call {
					name: String \\"CreateFogModifierRect\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"whichFogState\\"
						Name \\"r\\"
						Boolean true
						Name \\"afterUnits\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedFogModifier\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateFogModifierRadiusLocSimple\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"fogstate\\"
				name: String \\"whichFogState\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"center\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"afterUnits\\"
			}
		]
		returns: String \\"fogmodifier\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedFogModifier\\"
				value: Call {
					name: String \\"CreateFogModifierRadiusLoc\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"whichFogState\\"
						Name \\"center\\"
						Name \\"radius\\"
						Boolean true
						Name \\"afterUnits\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedFogModifier\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Version of CreateFogModifierRect that assumes use of sharedVision and\\"
	Comment \\" gives the option of immediately enabling the modifier, so that triggers\\"
	Comment \\" can default to modifiers that are immediately enabled.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"CreateFogModifierRectBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"enabled\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"fogstate\\"
				name: String \\"whichFogState\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"fogmodifier\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedFogModifier\\"
				value: Call {
					name: String \\"CreateFogModifierRect\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"whichFogState\\"
						Name \\"r\\"
						Boolean true
						Boolean false
					]
				}
			}
			IfThenElse {
				condition: Name \\"enabled\\"
				then: Statements [
					Call {
						name: String \\"FogModifierStart\\"
						args: Args [
							Name \\"bj_lastCreatedFogModifier\\"
						]
						statement: Boolean true
					}
				]
			}
			Return Name \\"bj_lastCreatedFogModifier\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Version of CreateFogModifierRadius that assumes use of sharedVision and\\"
	Comment \\" gives the option of immediately enabling the modifier, so that triggers\\"
	Comment \\" can default to modifiers that are immediately enabled.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"CreateFogModifierRadiusLocBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"enabled\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"fogstate\\"
				name: String \\"whichFogState\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"center\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
		]
		returns: String \\"fogmodifier\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedFogModifier\\"
				value: Call {
					name: String \\"CreateFogModifierRadiusLoc\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"whichFogState\\"
						Name \\"center\\"
						Name \\"radius\\"
						Boolean true
						Boolean false
					]
				}
			}
			IfThenElse {
				condition: Name \\"enabled\\"
				then: Statements [
					Call {
						name: String \\"FogModifierStart\\"
						args: Args [
							Name \\"bj_lastCreatedFogModifier\\"
						]
						statement: Boolean true
					}
				]
			}
			Return Name \\"bj_lastCreatedFogModifier\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedFogModifier\\"
		returns: String \\"fogmodifier\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedFogModifier\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FogEnableOn\\"
		statements: Statements [
			Call {
				name: String \\"FogEnable\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FogEnableOff\\"
		statements: Statements [
			Call {
				name: String \\"FogEnable\\"
				args: Args [
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FogMaskEnableOn\\"
		statements: Statements [
			Call {
				name: String \\"FogMaskEnable\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FogMaskEnableOff\\"
		statements: Statements [
			Call {
				name: String \\"FogMaskEnable\\"
				args: Args [
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UseTimeOfDayBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SuspendTimeOfDay\\"
				args: Args [
					UnaryOp {
						operator: String \\"not\\"
						expr: Name \\"flag\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTerrainFogExBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"style\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zstart\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zend\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"density\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTerrainFogEx\\"
				args: Args [
					Name \\"style\\"
					Name \\"zstart\\"
					Name \\"zend\\"
					Name \\"density\\"
					BinaryOp {
						left: Name \\"red\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
					BinaryOp {
						left: Name \\"green\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
					BinaryOp {
						left: Name \\"blue\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ResetTerrainFogBJ\\"
		statements: Statements [
			Call {
				name: String \\"ResetTerrainFog\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDoodadAnimationBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"animName\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"doodadID\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"center\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetDoodadAnimation\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"center\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"center\\"
						]
					}
					Name \\"radius\\"
					Name \\"doodadID\\"
					Boolean false
					Name \\"animName\\"
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDoodadAnimationRectBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"animName\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"doodadID\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetDoodadAnimationRect\\"
				args: Args [
					Name \\"r\\"
					Name \\"doodadID\\"
					Name \\"animName\\"
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddUnitAnimationPropertiesBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"add\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"animProperties\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AddUnitAnimationProperties\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"animProperties\\"
					Name \\"add\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"CreateImageBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"file\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"size\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zOffset\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"imageType\\"
			}
		]
		returns: String \\"image\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedImage\\"
				value: Call {
					name: String \\"CreateImage\\"
					args: Args [
						Name \\"file\\"
						Name \\"size\\"
						Name \\"size\\"
						Name \\"size\\"
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Name \\"zOffset\\"
						Number 0
						Number 0
						Number 0
						Name \\"imageType\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedImage\\"
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"ShowImageBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"image\\"
				name: String \\"whichImage\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ShowImage\\"
				args: Args [
					Name \\"whichImage\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"SetImagePositionBJ\\"
		params: Params [
			Param {
				type: String \\"image\\"
				name: String \\"whichImage\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zOffset\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetImagePosition\\"
				args: Args [
					Name \\"whichImage\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Name \\"zOffset\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"SetImageColorBJ\\"
		params: Params [
			Param {
				type: String \\"image\\"
				name: String \\"whichImage\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"alpha\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetImageColor\\"
				args: Args [
					Name \\"whichImage\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"alpha\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedImage\\"
		returns: String \\"image\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedImage\\"
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"CreateUbersplatBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"name\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"alpha\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"forcePaused\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"noBirthTime\\"
			}
		]
		returns: String \\"ubersplat\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedUbersplat\\"
				value: Call {
					name: String \\"CreateUbersplat\\"
					args: Args [
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"where\\"
							]
						}
						Name \\"name\\"
						Call {
							name: String \\"PercentTo255\\"
							args: Args [
								Name \\"red\\"
							]
						}
						Call {
							name: String \\"PercentTo255\\"
							args: Args [
								Name \\"green\\"
							]
						}
						Call {
							name: String \\"PercentTo255\\"
							args: Args [
								Name \\"blue\\"
							]
						}
						Call {
							name: String \\"PercentTo255\\"
							args: Args [
								BinaryOp {
									left: Number 100
									operator: String \\"-\\"
									right: Name \\"alpha\\"
								}
							]
						}
						Name \\"forcePaused\\"
						Name \\"noBirthTime\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedUbersplat\\"
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"ShowUbersplatBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"ubersplat\\"
				name: String \\"whichSplat\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ShowUbersplat\\"
				args: Args [
					Name \\"whichSplat\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedUbersplat\\"
		returns: String \\"ubersplat\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedUbersplat\\"
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedMinimapIcon\\"
		returns: String \\"minimapicon\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedMinimapIcon\\"
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"CreateMinimapIconOnUnitBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"pingPath\\"
			}
			Param {
				type: String \\"fogstate\\"
				name: String \\"fogVisibility\\"
			}
		]
		returns: String \\"minimapicon\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedMinimapIcon\\"
				value: Call {
					name: String \\"CreateMinimapIconOnUnit\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"red\\"
						Name \\"green\\"
						Name \\"blue\\"
						Name \\"pingPath\\"
						Name \\"fogVisibility\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedMinimapIcon\\"
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"CreateMinimapIconAtLocBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"pingPath\\"
			}
			Param {
				type: String \\"fogstate\\"
				name: String \\"fogVisibility\\"
			}
		]
		returns: String \\"minimapicon\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedMinimapIcon\\"
				value: Call {
					name: String \\"CreateMinimapIconAtLoc\\"
					args: Args [
						Name \\"where\\"
						Name \\"red\\"
						Name \\"green\\"
						Name \\"blue\\"
						Name \\"pingPath\\"
						Name \\"fogVisibility\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedMinimapIcon\\"
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"CreateMinimapIconBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"pingPath\\"
			}
			Param {
				type: String \\"fogstate\\"
				name: String \\"fogVisibility\\"
			}
		]
		returns: String \\"minimapicon\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedMinimapIcon\\"
				value: Call {
					name: String \\"CreateMinimapIcon\\"
					args: Args [
						Name \\"x\\"
						Name \\"y\\"
						Name \\"red\\"
						Name \\"green\\"
						Name \\"blue\\"
						Name \\"pingPath\\"
						Name \\"fogVisibility\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedMinimapIcon\\"
		]
	}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"CampaignMinimapIconUnitBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"style\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"red\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"green\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"blue\\"
			}
			Variable {
				type: String \\"string\\"
				name: String \\"path\\"
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"style\\"
					operator: String \\"==\\"
					right: Name \\"bj_CAMPPINGSTYLE_PRIMARY\\"
				}
				then: Statements [
					Comment \\" green\\"
					JASSSet {
						name: String \\"red\\"
						value: Number 255
					}
					JASSSet {
						name: String \\"green\\"
						value: Number 0
					}
					JASSSet {
						name: String \\"blue\\"
						value: Number 0
					}
					JASSSet {
						name: String \\"path\\"
						value: Call {
							name: String \\"SkinManagerGetLocalPath\\"
							args: Args [
								String \\"MinimapQuestObjectivePrimary\\"
							]
						}
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_PRIMARY_GREEN\\"
						}
						statements: Statements [
							Comment \\" green\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestObjectivePrimary\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_PRIMARY_RED\\"
						}
						statements: Statements [
							Comment \\" green\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestObjectivePrimary\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_BONUS\\"
						}
						statements: Statements [
							Comment \\" yellow\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestObjectiveBonus\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_TURNIN\\"
						}
						statements: Statements [
							Comment \\" yellow\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestTurnIn\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_BOSS\\"
						}
						statements: Statements [
							Comment \\" red\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestBoss\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_CONTROL_ALLY\\"
						}
						statements: Statements [
							Comment \\" green\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestControlPoint\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_CONTROL_NEUTRAL\\"
						}
						statements: Statements [
							Comment \\" white\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestControlPoint\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_CONTROL_ENEMY\\"
						}
						statements: Statements [
							Comment \\" red\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestControlPoint\\"
									]
								}
							}
						]
					}
				]
			}
			Call {
				name: String \\"CreateMinimapIconOnUnitBJ\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"red\\"
					Name \\"green\\"
					Name \\"blue\\"
					Name \\"path\\"
					Name \\"FOG_OF_WAR_MASKED\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetMinimapIconOrphanDestroy\\"
				args: Args [
					Name \\"bj_lastCreatedMinimapIcon\\"
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"============================================================================\\"
	JASSFunction {
		name: String \\"CampaignMinimapIconLocBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"style\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"red\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"green\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"blue\\"
			}
			Variable {
				type: String \\"string\\"
				name: String \\"path\\"
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"style\\"
					operator: String \\"==\\"
					right: Name \\"bj_CAMPPINGSTYLE_PRIMARY\\"
				}
				then: Statements [
					Comment \\" green (different from the unit version)\\"
					JASSSet {
						name: String \\"red\\"
						value: Number 0
					}
					JASSSet {
						name: String \\"green\\"
						value: Number 255
					}
					JASSSet {
						name: String \\"blue\\"
						value: Number 0
					}
					JASSSet {
						name: String \\"path\\"
						value: Call {
							name: String \\"SkinManagerGetLocalPath\\"
							args: Args [
								String \\"MinimapQuestObjectivePrimary\\"
							]
						}
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_PRIMARY_GREEN\\"
						}
						statements: Statements [
							Comment \\" green (different from the unit version)\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestObjectivePrimary\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_PRIMARY_RED\\"
						}
						statements: Statements [
							Comment \\" green (different from the unit version)\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestObjectivePrimary\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_BONUS\\"
						}
						statements: Statements [
							Comment \\" yellow\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestObjectiveBonus\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_TURNIN\\"
						}
						statements: Statements [
							Comment \\" yellow\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestTurnIn\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_BOSS\\"
						}
						statements: Statements [
							Comment \\" red\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestBoss\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_CONTROL_ALLY\\"
						}
						statements: Statements [
							Comment \\" green\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestControlPoint\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_CONTROL_NEUTRAL\\"
						}
						statements: Statements [
							Comment \\" white\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestControlPoint\\"
									]
								}
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPPINGSTYLE_CONTROL_ENEMY\\"
						}
						statements: Statements [
							Comment \\" red\\"
							JASSSet {
								name: String \\"red\\"
								value: Number 255
							}
							JASSSet {
								name: String \\"green\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"blue\\"
								value: Number 0
							}
							JASSSet {
								name: String \\"path\\"
								value: Call {
									name: String \\"SkinManagerGetLocalPath\\"
									args: Args [
										String \\"MinimapQuestControlPoint\\"
									]
								}
							}
						]
					}
				]
			}
			Call {
				name: String \\"CreateMinimapIconAtLocBJ\\"
				args: Args [
					Name \\"where\\"
					Name \\"red\\"
					Name \\"green\\"
					Name \\"blue\\"
					Name \\"path\\"
					Name \\"FOG_OF_WAR_MASKED\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Sound Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlaySoundBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastPlayedSound\\"
				value: Name \\"soundHandle\\"
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"soundHandle\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Call {
						name: String \\"StartSound\\"
						args: Args [
							Name \\"soundHandle\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StopSoundBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"fadeOut\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"StopSound\\"
				args: Args [
					Name \\"soundHandle\\"
					Boolean false
					Name \\"fadeOut\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetSoundVolumeBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"volumePercent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetSoundVolume\\"
				args: Args [
					Name \\"soundHandle\\"
					Call {
						name: String \\"PercentToInt\\"
						args: Args [
							Name \\"volumePercent\\"
							Number 127
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetSoundOffsetBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"newOffset\\"
			}
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetSoundPlayPosition\\"
				args: Args [
					Name \\"soundHandle\\"
					Call {
						name: String \\"R2I\\"
						args: Args [
							BinaryOp {
								left: Name \\"newOffset\\"
								operator: String \\"*\\"
								right: Number 1000
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetSoundDistanceCutoffBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"cutoff\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetSoundDistanceCutoff\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"cutoff\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetSoundPitchBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"pitch\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetSoundPitch\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"pitch\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetSoundPositionLocBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"z\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetSoundPosition\\"
				args: Args [
					Name \\"soundHandle\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Name \\"z\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AttachSoundToUnitBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AttachSoundToUnit\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"whichUnit\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetSoundConeAnglesBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"inside\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"outside\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"outsideVolumePercent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetSoundConeAngles\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"inside\\"
					Name \\"outside\\"
					Call {
						name: String \\"PercentToInt\\"
						args: Args [
							Name \\"outsideVolumePercent\\"
							Number 127
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"KillSoundWhenDoneBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"KillSoundWhenDone\\"
				args: Args [
					Name \\"soundHandle\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlaySoundAtPointBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"volumePercent\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"z\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetSoundPositionLocBJ\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"loc\\"
					Name \\"z\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetSoundVolumeBJ\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"volumePercent\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"PlaySoundBJ\\"
				args: Args [
					Name \\"soundHandle\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlaySoundOnUnitBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"volumePercent\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AttachSoundToUnitBJ\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"whichUnit\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetSoundVolumeBJ\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"volumePercent\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"PlaySoundBJ\\"
				args: Args [
					Name \\"soundHandle\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlaySoundFromOffsetBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"volumePercent\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"startingOffset\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetSoundVolumeBJ\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"volumePercent\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"PlaySoundBJ\\"
				args: Args [
					Name \\"soundHandle\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetSoundOffsetBJ\\"
				args: Args [
					Name \\"startingOffset\\"
					Name \\"soundHandle\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlayMusicBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"musicFileName\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastPlayedMusic\\"
				value: Name \\"musicFileName\\"
			}
			Call {
				name: String \\"PlayMusic\\"
				args: Args [
					Name \\"musicFileName\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlayMusicExBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"musicFileName\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"startingOffset\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"fadeInTime\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastPlayedMusic\\"
				value: Name \\"musicFileName\\"
			}
			Call {
				name: String \\"PlayMusicEx\\"
				args: Args [
					Name \\"musicFileName\\"
					Call {
						name: String \\"R2I\\"
						args: Args [
							BinaryOp {
								left: Name \\"startingOffset\\"
								operator: String \\"*\\"
								right: Number 1000
							}
						]
					}
					Call {
						name: String \\"R2I\\"
						args: Args [
							BinaryOp {
								left: Name \\"fadeInTime\\"
								operator: String \\"*\\"
								right: Number 1000
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetMusicOffsetBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"newOffset\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetMusicPlayPosition\\"
				args: Args [
					Call {
						name: String \\"R2I\\"
						args: Args [
							BinaryOp {
								left: Name \\"newOffset\\"
								operator: String \\"*\\"
								right: Number 1000
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlayThematicMusicBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"musicName\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"PlayThematicMusic\\"
				args: Args [
					Name \\"musicName\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlayThematicMusicExBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"musicName\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"startingOffset\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"PlayThematicMusicEx\\"
				args: Args [
					Name \\"musicName\\"
					Call {
						name: String \\"R2I\\"
						args: Args [
							BinaryOp {
								left: Name \\"startingOffset\\"
								operator: String \\"*\\"
								right: Number 1000
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetThematicMusicOffsetBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"newOffset\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetThematicMusicPlayPosition\\"
				args: Args [
					Call {
						name: String \\"R2I\\"
						args: Args [
							BinaryOp {
								left: Name \\"newOffset\\"
								operator: String \\"*\\"
								right: Number 1000
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EndThematicMusicBJ\\"
		statements: Statements [
			Call {
				name: String \\"EndThematicMusic\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StopMusicBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"fadeOut\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"StopMusic\\"
				args: Args [
					Name \\"fadeOut\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ResumeMusicBJ\\"
		statements: Statements [
			Call {
				name: String \\"ResumeMusic\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetMusicVolumeBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"volumePercent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetMusicVolume\\"
				args: Args [
					Call {
						name: String \\"PercentToInt\\"
						args: Args [
							Name \\"volumePercent\\"
							Number 127
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetSoundDurationBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"soundHandle\\"
					operator: String \\"==\\"
				}
				then: Statements [
					Return Name \\"bj_NOTHING_SOUND_DURATION\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return BinaryOp {
								left: Call {
									name: String \\"I2R\\"
									args: Args [
										Call {
											name: String \\"GetSoundDuration\\"
											args: Args [
												Name \\"soundHandle\\"
											]
										}
									]
								}
								operator: String \\"*\\"
								right: Number 0.001
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetSoundFileDurationBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"musicFileName\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"I2R\\"
					args: Args [
						Call {
							name: String \\"GetSoundFileDuration\\"
							args: Args [
								Name \\"musicFileName\\"
							]
						}
					]
				}
				operator: String \\"*\\"
				right: Number 0.001
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastPlayedSound\\"
		returns: String \\"sound\\"
		statements: Statements [
			Return Name \\"bj_lastPlayedSound\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastPlayedMusic\\"
		returns: String \\"string\\"
		statements: Statements [
			Return Name \\"bj_lastPlayedMusic\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"VolumeGroupSetVolumeBJ\\"
		params: Params [
			Param {
				type: String \\"volumegroup\\"
				name: String \\"vgroup\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"vgroup\\"
					BinaryOp {
						left: Name \\"percent\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCineModeVolumeGroupsImmediateBJ\\"
		statements: Statements [
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_UNITMOVEMENT\\"
					Name \\"bj_CINEMODE_VOLUME_UNITMOVEMENT\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_UNITSOUNDS\\"
					Name \\"bj_CINEMODE_VOLUME_UNITSOUNDS\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_COMBAT\\"
					Name \\"bj_CINEMODE_VOLUME_COMBAT\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_SPELLS\\"
					Name \\"bj_CINEMODE_VOLUME_SPELLS\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_UI\\"
					Name \\"bj_CINEMODE_VOLUME_UI\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_MUSIC\\"
					Name \\"bj_CINEMODE_VOLUME_MUSIC\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_AMBIENTSOUNDS\\"
					Name \\"bj_CINEMODE_VOLUME_AMBIENTSOUNDS\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_FIRE\\"
					Name \\"bj_CINEMODE_VOLUME_FIRE\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCineModeVolumeGroupsBJ\\"
		statements: Statements [
			Comment \\" Delay the request if it occurs at map init.\\"
			IfThenElse {
				condition: Name \\"bj_gameStarted\\"
				then: Statements [
					Call {
						name: String \\"SetCineModeVolumeGroupsImmediateBJ\\"
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"TimerStart\\"
								args: Args [
									Name \\"bj_volumeGroupsTimer\\"
									Name \\"bj_GAME_STARTED_THRESHOLD\\"
									Boolean false
									FuncRef String \\"S\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetSpeechVolumeGroupsImmediateBJ\\"
		statements: Statements [
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_UNITMOVEMENT\\"
					Name \\"bj_SPEECH_VOLUME_UNITMOVEMENT\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_UNITSOUNDS\\"
					Name \\"bj_SPEECH_VOLUME_UNITSOUNDS\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_COMBAT\\"
					Name \\"bj_SPEECH_VOLUME_COMBAT\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_SPELLS\\"
					Name \\"bj_SPEECH_VOLUME_SPELLS\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_UI\\"
					Name \\"bj_SPEECH_VOLUME_UI\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_MUSIC\\"
					Name \\"bj_SPEECH_VOLUME_MUSIC\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_AMBIENTSOUNDS\\"
					Name \\"bj_SPEECH_VOLUME_AMBIENTSOUNDS\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolume\\"
				args: Args [
					Name \\"SOUND_VOLUMEGROUP_FIRE\\"
					Name \\"bj_SPEECH_VOLUME_FIRE\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetSpeechVolumeGroupsBJ\\"
		statements: Statements [
			Comment \\" Delay the request if it occurs at map init.\\"
			IfThenElse {
				condition: Name \\"bj_gameStarted\\"
				then: Statements [
					Call {
						name: String \\"SetSpeechVolumeGroupsImmediateBJ\\"
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"TimerStart\\"
								args: Args [
									Name \\"bj_volumeGroupsTimer\\"
									Name \\"bj_GAME_STARTED_THRESHOLD\\"
									Boolean false
									FuncRef String \\"S\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"VolumeGroupResetImmediateBJ\\"
		statements: Statements [
			Call {
				name: String \\"VolumeGroupReset\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"VolumeGroupResetBJ\\"
		statements: Statements [
			Comment \\" Delay the request if it occurs at map init.\\"
			IfThenElse {
				condition: Name \\"bj_gameStarted\\"
				then: Statements [
					Call {
						name: String \\"VolumeGroupResetImmediateBJ\\"
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"TimerStart\\"
								args: Args [
									Name \\"bj_volumeGroupsTimer\\"
									Name \\"bj_GAME_STARTED_THRESHOLD\\"
									Boolean false
									FuncRef String \\"V\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetSoundIsPlayingBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetSoundIsLoading\\"
					args: Args [
						Name \\"soundHandle\\"
					]
				}
				operator: String \\"or\\"
				right: Call {
					name: String \\"GetSoundIsPlaying\\"
					args: Args [
						Name \\"soundHandle\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WaitForSoundBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"offset\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TriggerWaitForSound\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"offset\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetMapMusicIndexedBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"musicName\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetMapMusic\\"
				args: Args [
					Name \\"musicName\\"
					Boolean false
					Name \\"index\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetMapMusicRandomBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"musicName\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetMapMusic\\"
				args: Args [
					Name \\"musicName\\"
					Boolean true
					Number 0
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ClearMapMusicBJ\\"
		statements: Statements [
			Call {
				name: String \\"ClearMapMusic\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetStackedSoundBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"add\\"
			}
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"width\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetRectMaxX\\"
						args: Args [
							Name \\"r\\"
						]
					}
					operator: String \\"-\\"
					right: Call {
						name: String \\"GetRectMinX\\"
						args: Args [
							Name \\"r\\"
						]
					}
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"height\\"
				value: BinaryOp {
					left: Call {
						name: String \\"GetRectMaxY\\"
						args: Args [
							Name \\"r\\"
						]
					}
					operator: String \\"-\\"
					right: Call {
						name: String \\"GetRectMinY\\"
						args: Args [
							Name \\"r\\"
						]
					}
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetSoundPosition\\"
				args: Args [
					Name \\"soundHandle\\"
					Call {
						name: String \\"GetRectCenterX\\"
						args: Args [
							Name \\"r\\"
						]
					}
					Call {
						name: String \\"GetRectCenterY\\"
						args: Args [
							Name \\"r\\"
						]
					}
					Number 0
				]
				statement: Boolean true
			}
			IfThenElse {
				condition: Name \\"add\\"
				then: Statements [
					Call {
						name: String \\"RegisterStackedSound\\"
						args: Args [
							Name \\"soundHandle\\"
							Boolean true
							Name \\"width\\"
							Name \\"height\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"UnregisterStackedSound\\"
								args: Args [
									Name \\"soundHandle\\"
									Boolean true
									Name \\"width\\"
									Name \\"height\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StartSoundForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"whichPlayer\\"
					operator: String \\"==\\"
					right: Call {
						name: String \\"GetLocalPlayer\\"
					}
				}
				then: Statements [
					Call {
						name: String \\"StartSound\\"
						args: Args [
							Name \\"soundHandle\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"VolumeGroupSetVolumeForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"volumegroup\\"
				name: String \\"vgroup\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"scale\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Call {
						name: String \\"VolumeGroupSetVolume\\"
						args: Args [
							Name \\"vgroup\\"
							Name \\"scale\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EnableDawnDusk\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_useDawnDuskSounds\\"
				value: Name \\"flag\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsDawnDuskEnabled\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Return Name \\"bj_useDawnDuskSounds\\"
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Day/Night ambient sounds\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetAmbientDaySound\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"inLabel\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"ToD\\"
			}
			EmptyLine {}
			Comment \\" Stop old sound, if necessary\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_dayAmbientSound\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Call {
						name: String \\"StopSound\\"
						args: Args [
							Name \\"bj_dayAmbientSound\\"
							Boolean true
							Boolean true
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Comment \\" Create new sound\\"
			JASSSet {
				name: String \\"bj_dayAmbientSound\\"
				value: Call {
					name: String \\"CreateMIDISound\\"
					args: Args [
						Name \\"inLabel\\"
						Number 20
						Number 20
					]
				}
			}
			EmptyLine {}
			Comment \\" Start the sound if necessary, based on current time\\"
			JASSSet {
				name: String \\"ToD\\"
				value: Call {
					name: String \\"GetTimeOfDay\\"
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: BinaryOp {
						left: Name \\"ToD\\"
						operator: String \\">=\\"
						right: Name \\"bj_TOD_DAWN\\"
					}
					operator: String \\"and\\"
					right: BinaryOp {
						left: Name \\"ToD\\"
						operator: String \\"<\\"
						right: Name \\"bj_TOD_DUSK\\"
					}
				}
				then: Statements [
					Call {
						name: String \\"StartSound\\"
						args: Args [
							Name \\"bj_dayAmbientSound\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetAmbientNightSound\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"inLabel\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"ToD\\"
			}
			EmptyLine {}
			Comment \\" Stop old sound, if necessary\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_nightAmbientSound\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Call {
						name: String \\"StopSound\\"
						args: Args [
							Name \\"bj_nightAmbientSound\\"
							Boolean true
							Boolean true
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Comment \\" Create new sound\\"
			JASSSet {
				name: String \\"bj_nightAmbientSound\\"
				value: Call {
					name: String \\"CreateMIDISound\\"
					args: Args [
						Name \\"inLabel\\"
						Number 20
						Number 20
					]
				}
			}
			EmptyLine {}
			Comment \\" Start the sound if necessary, based on current time\\"
			JASSSet {
				name: String \\"ToD\\"
				value: Call {
					name: String \\"GetTimeOfDay\\"
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: BinaryOp {
						left: Name \\"ToD\\"
						operator: String \\"<\\"
						right: Name \\"bj_TOD_DAWN\\"
					}
					operator: String \\"or\\"
					right: BinaryOp {
						left: Name \\"ToD\\"
						operator: String \\">=\\"
						right: Name \\"bj_TOD_DUSK\\"
					}
				}
				then: Statements [
					Call {
						name: String \\"StartSound\\"
						args: Args [
							Name \\"bj_nightAmbientSound\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Special Effect Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddSpecialEffectLocBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"modelName\\"
			}
		]
		returns: String \\"effect\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedEffect\\"
				value: Call {
					name: String \\"AddSpecialEffectLoc\\"
					args: Args [
						Name \\"modelName\\"
						Name \\"where\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddSpecialEffectTargetUnitBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"attachPointName\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"targetWidget\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"modelName\\"
			}
		]
		returns: String \\"effect\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedEffect\\"
				value: Call {
					name: String \\"AddSpecialEffectTarget\\"
					args: Args [
						Name \\"modelName\\"
						Name \\"targetWidget\\"
						Name \\"attachPointName\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Two distinct trigger actions can't share the same function name, so this\\"
	Comment \\" dummy function simply mimics the behavior of an existing call.\\"
	Comment \\"\\"
	Comment \\" Commented out - Destructibles have no attachment points.\\"
	Comment \\"\\"
	Comment \\"function AddSpecialEffectTargetDestructableBJ takes string attachPointName, widget targetWidget, string modelName returns effect\\"
	Comment \\"    return AddSpecialEffectTargetUnitBJ(attachPointName, targetWidget, modelName)\\"
	Comment \\"endfunction\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Two distinct trigger actions can't share the same function name, so this\\"
	Comment \\" dummy function simply mimics the behavior of an existing call.\\"
	Comment \\"\\"
	Comment \\" Commented out - Items have no attachment points.\\"
	Comment \\"\\"
	Comment \\"function AddSpecialEffectTargetItemBJ takes string attachPointName, widget targetWidget, string modelName returns effect\\"
	Comment \\"    return AddSpecialEffectTargetUnitBJ(attachPointName, targetWidget, modelName)\\"
	Comment \\"endfunction\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyEffectBJ\\"
		params: Params [
			Param {
				type: String \\"effect\\"
				name: String \\"whichEffect\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DestroyEffect\\"
				args: Args [
					Name \\"whichEffect\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedEffectBJ\\"
		returns: String \\"effect\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedEffect\\"
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Command Button Effect Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateCommandButtonEffectBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilityId\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
		]
		returns: String \\"commandbuttoneffect\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedCommandButtonEffect\\"
				value: Call {
					name: String \\"CreateCommandButtonEffect\\"
					args: Args [
						Name \\"abilityId\\"
						Name \\"order\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedCommandButtonEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateTrainCommandButtonEffectBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
		]
		returns: String \\"commandbuttoneffect\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedCommandButtonEffect\\"
				value: Call {
					name: String \\"CreateCommandButtonEffect\\"
					args: Args [
						FourCC \\"Aque\\"
						Call {
							name: String \\"UnitId2String\\"
							args: Args [
								Name \\"unitId\\"
							]
						}
					]
				}
			}
			Return Name \\"bj_lastCreatedCommandButtonEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateUpgradeCommandButtonEffectBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"techId\\"
			}
		]
		returns: String \\"commandbuttoneffect\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedCommandButtonEffect\\"
				value: Call {
					name: String \\"CreateUpgradeCommandButtonEffect\\"
					args: Args [
						Name \\"techId\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedCommandButtonEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateCommonCommandButtonEffectBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
		]
		returns: String \\"commandbuttoneffect\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedCommandButtonEffect\\"
				value: Call {
					name: String \\"CreateCommandButtonEffect\\"
					args: Args [
						Number 0
						Name \\"order\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedCommandButtonEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateLearnCommandButtonEffectBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilityId\\"
			}
		]
		returns: String \\"commandbuttoneffect\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedCommandButtonEffect\\"
				value: Call {
					name: String \\"CreateLearnCommandButtonEffect\\"
					args: Args [
						Name \\"abilityId\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedCommandButtonEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateBuildCommandButtonEffectBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
		]
		returns: String \\"commandbuttoneffect\\"
		statements: Statements [
			Variable {
				type: String \\"race\\"
				name: String \\"r\\"
				value: Call {
					name: String \\"GetPlayerRace\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"abilityId\\"
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"r\\"
					operator: String \\"==\\"
					right: Name \\"RACE_HUMAN\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"abilityId\\"
						value: FourCC \\"AHbu\\"
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_ORC\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"abilityId\\"
								value: FourCC \\"AObu\\"
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_UNDEAD\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"abilityId\\"
								value: FourCC \\"AUbu\\"
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_NIGHTELF\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"abilityId\\"
								value: FourCC \\"AEbu\\"
							}
						]
					}
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"abilityId\\"
								value: FourCC \\"ANbu\\"
							}
						]
					}
				]
			}
			JASSSet {
				name: String \\"bj_lastCreatedCommandButtonEffect\\"
				value: Call {
					name: String \\"CreateCommandButtonEffect\\"
					args: Args [
						Name \\"abilityId\\"
						Call {
							name: String \\"UnitId2String\\"
							args: Args [
								Name \\"unitId\\"
							]
						}
					]
				}
			}
			Return Name \\"bj_lastCreatedCommandButtonEffect\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedCommandButtonEffectBJ\\"
		returns: String \\"commandbuttoneffect\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedCommandButtonEffect\\"
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Hero and Item Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetItemLoc\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Return Call {
				name: String \\"Location\\"
				args: Args [
					Call {
						name: String \\"GetItemX\\"
						args: Args [
							Name \\"whichItem\\"
						]
					}
					Call {
						name: String \\"GetItemY\\"
						args: Args [
							Name \\"whichItem\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetItemLifeBJ\\"
		params: Params [
			Param {
				type: String \\"widget\\"
				name: String \\"whichWidget\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetWidgetLife\\"
				args: Args [
					Name \\"whichWidget\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetItemLifeBJ\\"
		params: Params [
			Param {
				type: String \\"widget\\"
				name: String \\"whichWidget\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"life\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetWidgetLife\\"
				args: Args [
					Name \\"whichWidget\\"
					Name \\"life\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddHeroXPSwapped\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"xpToAdd\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showEyeCandy\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AddHeroXP\\"
				args: Args [
					Name \\"whichHero\\"
					Name \\"xpToAdd\\"
					Name \\"showEyeCandy\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetHeroLevelBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"newLevel\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showEyeCandy\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"oldLevel\\"
				value: Call {
					name: String \\"GetHeroLevel\\"
					args: Args [
						Name \\"whichHero\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"newLevel\\"
					operator: String \\">\\"
					right: Name \\"oldLevel\\"
				}
				then: Statements [
					Call {
						name: String \\"SetHeroLevel\\"
						args: Args [
							Name \\"whichHero\\"
							Name \\"newLevel\\"
							Name \\"showEyeCandy\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"newLevel\\"
							operator: String \\"<\\"
							right: Name \\"oldLevel\\"
						}
						statements: Statements [
							Call {
								name: String \\"UnitStripHeroLevel\\"
								args: Args [
									Name \\"whichHero\\"
									BinaryOp {
										left: Name \\"oldLevel\\"
										operator: String \\"-\\"
										right: Name \\"newLevel\\"
									}
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" No change in level - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DecUnitAbilityLevelSwapped\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilcode\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"DecUnitAbilityLevel\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"abilcode\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IncUnitAbilityLevelSwapped\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilcode\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"IncUnitAbilityLevel\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"abilcode\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitAbilityLevelSwapped\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilcode\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"SetUnitAbilityLevel\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"abilcode\\"
					Name \\"level\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitAbilityLevelSwapped\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilcode\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetUnitAbilityLevel\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"abilcode\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitHasBuffBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"buffcode\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Parens BinaryOp {
				left: Call {
					name: String \\"GetUnitAbilityLevel\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"buffcode\\"
					]
				}
				operator: String \\">\\"
				right: Number 0
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitRemoveBuffBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"buffcode\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitRemoveAbility\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"buffcode\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitAddItemSwapped\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitAddItem\\"
				args: Args [
					Name \\"whichHero\\"
					Name \\"whichItem\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitAddItemByIdSwapped\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"itemId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			Comment \\" Create the item at the hero's feet first, and then give it to him.\\"
			Comment \\" This is to ensure that the item will be left at the hero's feet if\\"
			Comment \\" his inventory is full. \\"
			JASSSet {
				name: String \\"bj_lastCreatedItem\\"
				value: Call {
					name: String \\"CreateItem\\"
					args: Args [
						Name \\"itemId\\"
						Call {
							name: String \\"GetUnitX\\"
							args: Args [
								Name \\"whichHero\\"
							]
						}
						Call {
							name: String \\"GetUnitY\\"
							args: Args [
								Name \\"whichHero\\"
							]
						}
					]
				}
			}
			Call {
				name: String \\"UnitAddItem\\"
				args: Args [
					Name \\"whichHero\\"
					Name \\"bj_lastCreatedItem\\"
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastCreatedItem\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitRemoveItemSwapped\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastRemovedItem\\"
				value: Name \\"whichItem\\"
			}
			Call {
				name: String \\"UnitRemoveItem\\"
				args: Args [
					Name \\"whichHero\\"
					Name \\"whichItem\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Translates 0-based slot indices to 1-based slot indices.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"UnitRemoveItemFromSlotSwapped\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"itemSlot\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastRemovedItem\\"
				value: Call {
					name: String \\"UnitRemoveItemFromSlot\\"
					args: Args [
						Name \\"whichHero\\"
						BinaryOp {
							left: Name \\"itemSlot\\"
							operator: String \\"-\\"
							right: Number 1
						}
					]
				}
			}
			Return Name \\"bj_lastRemovedItem\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateItemLoc\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"itemId\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedItem\\"
				value: Call {
					name: String \\"CreateItem\\"
					args: Args [
						Name \\"itemId\\"
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"loc\\"
							]
						}
					]
				}
			}
			Return Name \\"bj_lastCreatedItem\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedItem\\"
		returns: String \\"item\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedItem\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastRemovedItem\\"
		returns: String \\"item\\"
		statements: Statements [
			Return Name \\"bj_lastRemovedItem\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetItemPositionLoc\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetItemPosition\\"
				args: Args [
					Name \\"whichItem\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLearnedSkillBJ\\"
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetLearnedSkill\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SuspendHeroXPBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SuspendHeroXP\\"
				args: Args [
					Name \\"whichHero\\"
					UnaryOp {
						operator: String \\"not\\"
						expr: Name \\"flag\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerHandicapDamageBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"handicapPercent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerHandicapDamage\\"
				args: Args [
					Name \\"whichPlayer\\"
					BinaryOp {
						left: Name \\"handicapPercent\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerHandicapDamageBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetPlayerHandicapDamage\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
				operator: String \\"*\\"
				right: Number 100
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerHandicapReviveTimeBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"handicapPercent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerHandicapReviveTime\\"
				args: Args [
					Name \\"whichPlayer\\"
					BinaryOp {
						left: Name \\"handicapPercent\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerHandicapReviveTimeBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetPlayerHandicapReviveTime\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
				operator: String \\"*\\"
				right: Number 100
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerHandicapXPBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"handicapPercent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerHandicapXP\\"
				args: Args [
					Name \\"whichPlayer\\"
					BinaryOp {
						left: Name \\"handicapPercent\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerHandicapXPBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetPlayerHandicapXP\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
				operator: String \\"*\\"
				right: Number 100
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerHandicapBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"handicapPercent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerHandicap\\"
				args: Args [
					Name \\"whichPlayer\\"
					BinaryOp {
						left: Name \\"handicapPercent\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerHandicapBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetPlayerHandicap\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
				operator: String \\"*\\"
				right: Number 100
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetHeroStatBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"whichStat\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"includeBonuses\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"whichStat\\"
					operator: String \\"==\\"
					right: Name \\"bj_HEROSTAT_STR\\"
				}
				then: Statements [
					Return Call {
						name: String \\"GetHeroStr\\"
						args: Args [
							Name \\"whichHero\\"
							Name \\"includeBonuses\\"
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"whichStat\\"
							operator: String \\"==\\"
							right: Name \\"bj_HEROSTAT_AGI\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"GetHeroAgi\\"
								args: Args [
									Name \\"whichHero\\"
									Name \\"includeBonuses\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"whichStat\\"
							operator: String \\"==\\"
							right: Name \\"bj_HEROSTAT_INT\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"GetHeroInt\\"
								args: Args [
									Name \\"whichHero\\"
									Name \\"includeBonuses\\"
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized hero stat - return 0\\"
							Return Number 0
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetHeroStat\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"whichStat\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			Comment \\" Ignore requests for negative hero stats.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"value\\"
					operator: String \\"<=\\"
					right: Number 0
				}
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"whichStat\\"
					operator: String \\"==\\"
					right: Name \\"bj_HEROSTAT_STR\\"
				}
				then: Statements [
					Call {
						name: String \\"SetHeroStr\\"
						args: Args [
							Name \\"whichHero\\"
							Name \\"value\\"
							Boolean true
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"whichStat\\"
							operator: String \\"==\\"
							right: Name \\"bj_HEROSTAT_AGI\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetHeroAgi\\"
								args: Args [
									Name \\"whichHero\\"
									Name \\"value\\"
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"whichStat\\"
							operator: String \\"==\\"
							right: Name \\"bj_HEROSTAT_INT\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetHeroInt\\"
								args: Args [
									Name \\"whichHero\\"
									Name \\"value\\"
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized hero stat - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ModifyHeroStat\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"whichStat\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"modifyMethod\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"modifyMethod\\"
					operator: String \\"==\\"
					right: Name \\"bj_MODIFYMETHOD_ADD\\"
				}
				then: Statements [
					Call {
						name: String \\"SetHeroStat\\"
						args: Args [
							Name \\"whichHero\\"
							Name \\"whichStat\\"
							BinaryOp {
								left: Call {
									name: String \\"GetHeroStatBJ\\"
									args: Args [
										Name \\"whichStat\\"
										Name \\"whichHero\\"
										Boolean false
									]
								}
								operator: String \\"+\\"
								right: Name \\"value\\"
							}
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"modifyMethod\\"
							operator: String \\"==\\"
							right: Name \\"bj_MODIFYMETHOD_SUB\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetHeroStat\\"
								args: Args [
									Name \\"whichHero\\"
									Name \\"whichStat\\"
									BinaryOp {
										left: Call {
											name: String \\"GetHeroStatBJ\\"
											args: Args [
												Name \\"whichStat\\"
												Name \\"whichHero\\"
												Boolean false
											]
										}
										operator: String \\"-\\"
										right: Name \\"value\\"
									}
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"modifyMethod\\"
							operator: String \\"==\\"
							right: Name \\"bj_MODIFYMETHOD_SET\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetHeroStat\\"
								args: Args [
									Name \\"whichHero\\"
									Name \\"whichStat\\"
									Name \\"value\\"
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized modification method - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ModifyHeroSkillPoints\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichHero\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"modifyMethod\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"modifyMethod\\"
					operator: String \\"==\\"
					right: Name \\"bj_MODIFYMETHOD_ADD\\"
				}
				then: Statements [
					Return Call {
						name: String \\"UnitModifySkillPoints\\"
						args: Args [
							Name \\"whichHero\\"
							Name \\"value\\"
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"modifyMethod\\"
							operator: String \\"==\\"
							right: Name \\"bj_MODIFYMETHOD_SUB\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"UnitModifySkillPoints\\"
								args: Args [
									Name \\"whichHero\\"
									UnaryOp {
										operator: String \\"-\\"
										expr: Name \\"value\\"
									}
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"modifyMethod\\"
							operator: String \\"==\\"
							right: Name \\"bj_MODIFYMETHOD_SET\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"UnitModifySkillPoints\\"
								args: Args [
									Name \\"whichHero\\"
									BinaryOp {
										left: Name \\"value\\"
										operator: String \\"-\\"
										right: Call {
											name: String \\"GetHeroSkillPoints\\"
											args: Args [
												Name \\"whichHero\\"
											]
										}
									}
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized modification method - ignore the request and return failure.\\"
							Return Boolean false
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitDropItemPointBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitDropItemPoint\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichItem\\"
					Name \\"x\\"
					Name \\"y\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitDropItemPointLoc\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitDropItemPoint\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichItem\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitDropItemSlotBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"slot\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitDropItemSlot\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichItem\\"
					BinaryOp {
						left: Name \\"slot\\"
						operator: String \\"-\\"
						right: Number 1
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitDropItemTargetBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"target\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitDropItemTarget\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichItem\\"
					Name \\"target\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Two distinct trigger actions can't share the same function name, so this\\"
	Comment \\" dummy function simply mimics the behavior of an existing call.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"UnitUseItemDestructable\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"target\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitUseItemTarget\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichItem\\"
					Name \\"target\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitUseItemPointLoc\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitUseItemPoint\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichItem\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Translates 0-based slot indices to 1-based slot indices.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"UnitItemInSlotBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"itemSlot\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitItemInSlot\\"
				args: Args [
					Name \\"whichUnit\\"
					BinaryOp {
						left: Name \\"itemSlot\\"
						operator: String \\"-\\"
						right: Number 1
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Translates 0-based slot indices to 1-based slot indices.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GetInventoryIndexOfItemTypeBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"itemId\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"item\\"
				name: String \\"indexItem\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexItem\\"
						value: Call {
							name: String \\"UnitItemInSlot\\"
							args: Args [
								Name \\"whichUnit\\"
								Name \\"index\\"
							]
						}
					}
					IfThenElse {
						condition: BinaryOp {
							left: Parens BinaryOp {
								left: Name \\"indexItem\\"
								operator: String \\"!=\\"
							}
							operator: String \\"and\\"
							right: Parens BinaryOp {
								left: Call {
									name: String \\"GetItemTypeId\\"
									args: Args [
										Name \\"indexItem\\"
									]
								}
								operator: String \\"==\\"
								right: Name \\"itemId\\"
							}
						}
						then: Statements [
							Return BinaryOp {
								left: Name \\"index\\"
								operator: String \\"+\\"
								right: Number 1
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\">=\\"
						right: Name \\"bj_MAX_INVENTORY\\"
					}
				]
			}
			Return Number 0
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetItemOfTypeFromUnitBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"itemId\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
				value: Call {
					name: String \\"GetInventoryIndexOfItemTypeBJ\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"itemId\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"index\\"
					operator: String \\"==\\"
					right: Number 0
				}
				then: Statements [
					Return Null
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Call {
								name: String \\"UnitItemInSlot\\"
								args: Args [
									Name \\"whichUnit\\"
									BinaryOp {
										left: Name \\"index\\"
										operator: String \\"-\\"
										right: Number 1
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitHasItemOfTypeBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"itemId\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetInventoryIndexOfItemTypeBJ\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"itemId\\"
					]
				}
				operator: String \\">\\"
				right: Number 0
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitInventoryCount\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"count\\"
				value: Number 0
			}
			EmptyLine {}
			Loop {
				statements: Statements [
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"UnitItemInSlot\\"
								args: Args [
									Name \\"whichUnit\\"
									Name \\"index\\"
								]
							}
							operator: String \\"!=\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"count\\"
								value: BinaryOp {
									left: Name \\"count\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\">=\\"
						right: Name \\"bj_MAX_INVENTORY\\"
					}
				]
			}
			EmptyLine {}
			Return Name \\"count\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitInventorySizeBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitInventorySize\\"
				args: Args [
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetItemInvulnerableBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetItemInvulnerable\\"
				args: Args [
					Name \\"whichItem\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetItemDropOnDeathBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetItemDropOnDeath\\"
				args: Args [
					Name \\"whichItem\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetItemDroppableBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetItemDroppable\\"
				args: Args [
					Name \\"whichItem\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetItemPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"changeColor\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetItemPlayer\\"
				args: Args [
					Name \\"whichItem\\"
					Name \\"whichPlayer\\"
					Name \\"changeColor\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetItemVisibleBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"show\\"
			}
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetItemVisible\\"
				args: Args [
					Name \\"whichItem\\"
					Name \\"show\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsItemHiddenBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return UnaryOp {
				operator: String \\"not\\"
				expr: Call {
					name: String \\"IsItemVisible\\"
					args: Args [
						Name \\"whichItem\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ChooseRandomItemBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"ChooseRandomItem\\"
				args: Args [
					Name \\"level\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ChooseRandomItemExBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"itemtype\\"
				name: String \\"whichType\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"ChooseRandomItemEx\\"
				args: Args [
					Name \\"whichType\\"
					Name \\"level\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ChooseRandomNPBuildingBJ\\"
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"ChooseRandomNPBuilding\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ChooseRandomCreepBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"ChooseRandomCreep\\"
				args: Args [
					Name \\"level\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EnumItemsInRectBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"code\\"
				name: String \\"actionFunc\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"EnumItemsInRect\\"
				args: Args [
					Name \\"r\\"
					Null
					Name \\"actionFunc\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" See GroupPickRandomUnitEnum for the details of this algorithm.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"RandomItemInRectBJEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_itemRandomConsidered\\"
				value: BinaryOp {
					left: Name \\"bj_itemRandomConsidered\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetRandomInt\\"
						args: Args [
							Number 1
							Name \\"bj_itemRandomConsidered\\"
						]
					}
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_itemRandomCurrentPick\\"
						value: Call {
							name: String \\"GetEnumItem\\"
						}
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Picks a random item from within a rect, matching a condition\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"RandomItemInRectBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"boolexpr\\"
				name: String \\"filter\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_itemRandomConsidered\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"bj_itemRandomCurrentPick\\"
			}
			Call {
				name: String \\"EnumItemsInRect\\"
				args: Args [
					Name \\"r\\"
					Name \\"filter\\"
					FuncRef String \\"R\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyBoolExpr\\"
				args: Args [
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Return Name \\"bj_itemRandomCurrentPick\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Picks a random item from within a rect\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"RandomItemInRectSimpleBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			Return Call {
				name: String \\"RandomItemInRectBJ\\"
				args: Args [
					Name \\"r\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CheckItemStatus\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"status\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"status\\"
					operator: String \\"==\\"
					right: Name \\"bj_ITEM_STATUS_HIDDEN\\"
				}
				then: Statements [
					Return UnaryOp {
						operator: String \\"not\\"
						expr: Call {
							name: String \\"IsItemVisible\\"
							args: Args [
								Name \\"whichItem\\"
							]
						}
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"status\\"
							operator: String \\"==\\"
							right: Name \\"bj_ITEM_STATUS_OWNED\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"IsItemOwned\\"
								args: Args [
									Name \\"whichItem\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"status\\"
							operator: String \\"==\\"
							right: Name \\"bj_ITEM_STATUS_INVULNERABLE\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"IsItemInvulnerable\\"
								args: Args [
									Name \\"whichItem\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"status\\"
							operator: String \\"==\\"
							right: Name \\"bj_ITEM_STATUS_POWERUP\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"IsItemPowerup\\"
								args: Args [
									Name \\"whichItem\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"status\\"
							operator: String \\"==\\"
							right: Name \\"bj_ITEM_STATUS_SELLABLE\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"IsItemSellable\\"
								args: Args [
									Name \\"whichItem\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"status\\"
							operator: String \\"==\\"
							right: Name \\"bj_ITEM_STATUS_PAWNABLE\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"IsItemPawnable\\"
								args: Args [
									Name \\"whichItem\\"
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized status - return false\\"
							Return Boolean false
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CheckItemcodeStatus\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"itemId\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"status\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"status\\"
					operator: String \\"==\\"
					right: Name \\"bj_ITEMCODE_STATUS_POWERUP\\"
				}
				then: Statements [
					Return Call {
						name: String \\"IsItemIdPowerup\\"
						args: Args [
							Name \\"itemId\\"
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"status\\"
							operator: String \\"==\\"
							right: Name \\"bj_ITEMCODE_STATUS_SELLABLE\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"IsItemIdSellable\\"
								args: Args [
									Name \\"itemId\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"status\\"
							operator: String \\"==\\"
							right: Name \\"bj_ITEMCODE_STATUS_PAWNABLE\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"IsItemIdPawnable\\"
								args: Args [
									Name \\"itemId\\"
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized status - return false\\"
							Return Boolean false
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Unit Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitId2OrderIdBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Name \\"unitId\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"String2UnitIdBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"unitIdString\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitId\\"
				args: Args [
					Name \\"unitIdString\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitId2StringBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Variable {
				type: String \\"string\\"
				name: String \\"unitString\\"
				value: Call {
					name: String \\"UnitId2String\\"
					args: Args [
						Name \\"unitId\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"unitString\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Return Name \\"unitString\\"
				]
			}
			EmptyLine {}
			Comment \\" The unitId was not recognized - return an empty string.\\"
			Return String \\"\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"String2OrderIdBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"orderIdString\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"orderId\\"
			}
			EmptyLine {}
			Comment \\" Check to see if it's a generic order.\\"
			JASSSet {
				name: String \\"orderId\\"
				value: Call {
					name: String \\"OrderId\\"
					args: Args [
						Name \\"orderIdString\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"orderId\\"
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					Return Name \\"orderId\\"
				]
			}
			EmptyLine {}
			Comment \\" Check to see if it's a (train) unit order.\\"
			JASSSet {
				name: String \\"orderId\\"
				value: Call {
					name: String \\"UnitId\\"
					args: Args [
						Name \\"orderIdString\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"orderId\\"
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					Return Name \\"orderId\\"
				]
			}
			EmptyLine {}
			Comment \\" Unrecognized - return 0\\"
			Return Number 0
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"OrderId2StringBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"orderId\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Variable {
				type: String \\"string\\"
				name: String \\"orderString\\"
			}
			EmptyLine {}
			Comment \\" Check to see if it's a generic order.\\"
			JASSSet {
				name: String \\"orderString\\"
				value: Call {
					name: String \\"OrderId2String\\"
					args: Args [
						Name \\"orderId\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"orderString\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Return Name \\"orderString\\"
				]
			}
			EmptyLine {}
			Comment \\" Check to see if it's a (train) unit order.\\"
			JASSSet {
				name: String \\"orderString\\"
				value: Call {
					name: String \\"UnitId2String\\"
					args: Args [
						Name \\"orderId\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"orderString\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Return Name \\"orderString\\"
				]
			}
			EmptyLine {}
			Comment \\" Unrecognized - return an empty string.\\"
			Return String \\"\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetIssuedOrderIdBJ\\"
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetIssuedOrderId\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetKillingUnitBJ\\"
		returns: String \\"unit\\"
		statements: Statements [
			Return Call {
				name: String \\"GetKillingUnit\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateUnitAtLocSaveLast\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"id\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitid\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"face\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"unitid\\"
					operator: String \\"==\\"
					right: FourCC \\"ugol\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_lastCreatedUnit\\"
						value: Call {
							name: String \\"CreateBlightedGoldmine\\"
							args: Args [
								Name \\"id\\"
								Call {
									name: String \\"GetLocationX\\"
									args: Args [
										Name \\"loc\\"
									]
								}
								Call {
									name: String \\"GetLocationY\\"
									args: Args [
										Name \\"loc\\"
									]
								}
								Name \\"face\\"
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"bj_lastCreatedUnit\\"
								value: Call {
									name: String \\"CreateUnitAtLoc\\"
									args: Args [
										Name \\"id\\"
										Name \\"unitid\\"
										Name \\"loc\\"
										Name \\"face\\"
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			Return Name \\"bj_lastCreatedUnit\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedUnit\\"
		returns: String \\"unit\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedUnit\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateNUnitsAtLoc\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"count\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"face\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Call {
				name: String \\"GroupClear\\"
				args: Args [
					Name \\"bj_lastCreatedGroup\\"
				]
				statement: Boolean true
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"count\\"
						value: BinaryOp {
							left: Name \\"count\\"
							operator: String \\"-\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"count\\"
						operator: String \\"<\\"
						right: Number 0
					}
					Call {
						name: String \\"CreateUnitAtLocSaveLast\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"unitId\\"
							Name \\"loc\\"
							Name \\"face\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"GroupAddUnit\\"
						args: Args [
							Name \\"bj_lastCreatedGroup\\"
							Name \\"bj_lastCreatedUnit\\"
						]
						statement: Boolean true
					}
				]
			}
			Return Name \\"bj_lastCreatedGroup\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateNUnitsAtLocFacingLocBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"count\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"lookAt\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Return Call {
				name: String \\"CreateNUnitsAtLoc\\"
				args: Args [
					Name \\"count\\"
					Name \\"unitId\\"
					Name \\"whichPlayer\\"
					Name \\"loc\\"
					Call {
						name: String \\"AngleBetweenPoints\\"
						args: Args [
							Name \\"loc\\"
							Name \\"lookAt\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedGroupEnum\\"
		statements: Statements [
			Call {
				name: String \\"GroupAddUnit\\"
				args: Args [
					Name \\"bj_groupLastCreatedDest\\"
					Call {
						name: String \\"GetEnumUnit\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedGroup\\"
		returns: String \\"group\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_groupLastCreatedDest\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"bj_lastCreatedGroup\\"
					FuncRef String \\"G\\"
				]
				statement: Boolean true
			}
			Return Name \\"bj_groupLastCreatedDest\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateCorpseLocBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitid\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedUnit\\"
				value: Call {
					name: String \\"CreateCorpse\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"unitid\\"
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Call {
							name: String \\"GetRandomReal\\"
							args: Args [
								Number 0
								Number 360
							]
						}
					]
				}
			}
			Return Name \\"bj_lastCreatedUnit\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitSuspendDecayBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"suspend\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"UnitSuspendDecay\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"suspend\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DelayedSuspendDecayStopAnimEnum\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"enumUnit\\"
				value: Call {
					name: String \\"GetEnumUnit\\"
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetUnitState\\"
						args: Args [
							Name \\"enumUnit\\"
							Name \\"UNIT_STATE_LIFE\\"
						]
					}
					operator: String \\"<=\\"
					right: Number 0
				}
				then: Statements [
					Call {
						name: String \\"SetUnitTimeScale\\"
						args: Args [
							Name \\"enumUnit\\"
							Number 0.0001
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DelayedSuspendDecayBoneEnum\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"enumUnit\\"
				value: Call {
					name: String \\"GetEnumUnit\\"
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetUnitState\\"
						args: Args [
							Name \\"enumUnit\\"
							Name \\"UNIT_STATE_LIFE\\"
						]
					}
					operator: String \\"<=\\"
					right: Number 0
				}
				then: Statements [
					Call {
						name: String \\"UnitSuspendDecay\\"
						args: Args [
							Name \\"enumUnit\\"
							Boolean true
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetUnitTimeScale\\"
						args: Args [
							Name \\"enumUnit\\"
							Number 0.0001
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Game code explicitly sets the animation back to \\\\\\"decay bone\\\\\\" after the\\"
	Comment \\" initial corpse fades away, so we reset it now.  It's best not to show\\"
	Comment \\" off corpses thus created until after this grace period has passed.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"DelayedSuspendDecayFleshEnum\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"enumUnit\\"
				value: Call {
					name: String \\"GetEnumUnit\\"
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetUnitState\\"
						args: Args [
							Name \\"enumUnit\\"
							Name \\"UNIT_STATE_LIFE\\"
						]
					}
					operator: String \\"<=\\"
					right: Number 0
				}
				then: Statements [
					Call {
						name: String \\"UnitSuspendDecay\\"
						args: Args [
							Name \\"enumUnit\\"
							Boolean true
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetUnitTimeScale\\"
						args: Args [
							Name \\"enumUnit\\"
							Number 10
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetUnitAnimation\\"
						args: Args [
							Name \\"enumUnit\\"
							String \\"decay flesh\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Waits a short period of time to ensure that the corpse is decaying, and\\"
	Comment \\" then suspend the animation and corpse decay.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"DelayedSuspendDecay\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"boneGroup\\"
			}
			Variable {
				type: String \\"group\\"
				name: String \\"fleshGroup\\"
			}
			EmptyLine {}
			Comment \\" Switch the global unit groups over to local variables and recreate\\"
			Comment \\" the global versions, so that this function can handle overlapping\\"
			Comment \\" calls.\\"
			JASSSet {
				name: String \\"boneGroup\\"
				value: Name \\"bj_suspendDecayBoneGroup\\"
			}
			JASSSet {
				name: String \\"fleshGroup\\"
				value: Name \\"bj_suspendDecayFleshGroup\\"
			}
			JASSSet {
				name: String \\"bj_suspendDecayBoneGroup\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			JASSSet {
				name: String \\"bj_suspendDecayFleshGroup\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"fleshGroup\\"
					FuncRef String \\"D\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"boneGroup\\"
					FuncRef String \\"D\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"TriggerSleepAction\\"
				args: Args [
					Name \\"bj_CORPSE_MAX_DEATH_TIME\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"fleshGroup\\"
					FuncRef String \\"D\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"boneGroup\\"
					FuncRef String \\"D\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"TriggerSleepAction\\"
				args: Args [
					Number 0.05
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"fleshGroup\\"
					FuncRef String \\"D\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"boneGroup\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"fleshGroup\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DelayedSuspendDecayCreate\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_delayedSuspendDecayTrig\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterTimerExpireEvent\\"
				args: Args [
					Name \\"bj_delayedSuspendDecayTrig\\"
					Name \\"bj_delayedSuspendDecayTimer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"bj_delayedSuspendDecayTrig\\"
					FuncRef String \\"D\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreatePermanentCorpseLocBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"style\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitid\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"facing\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedUnit\\"
				value: Call {
					name: String \\"CreateCorpse\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"unitid\\"
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Name \\"facing\\"
					]
				}
			}
			Call {
				name: String \\"SetUnitBlendTime\\"
				args: Args [
					Name \\"bj_lastCreatedUnit\\"
					Number 0
				]
				statement: Boolean true
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"style\\"
					operator: String \\"==\\"
					right: Name \\"bj_CORPSETYPE_FLESH\\"
				}
				then: Statements [
					Call {
						name: String \\"SetUnitAnimation\\"
						args: Args [
							Name \\"bj_lastCreatedUnit\\"
							String \\"decay flesh\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"GroupAddUnit\\"
						args: Args [
							Name \\"bj_suspendDecayFleshGroup\\"
							Name \\"bj_lastCreatedUnit\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_CORPSETYPE_BONE\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetUnitAnimation\\"
								args: Args [
									Name \\"bj_lastCreatedUnit\\"
									String \\"decay bone\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"GroupAddUnit\\"
								args: Args [
									Name \\"bj_suspendDecayBoneGroup\\"
									Name \\"bj_lastCreatedUnit\\"
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unknown decay style - treat as skeletal.\\"
							Call {
								name: String \\"SetUnitAnimation\\"
								args: Args [
									Name \\"bj_lastCreatedUnit\\"
									String \\"decay bone\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"GroupAddUnit\\"
								args: Args [
									Name \\"bj_suspendDecayBoneGroup\\"
									Name \\"bj_lastCreatedUnit\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Name \\"bj_delayedSuspendDecayTimer\\"
					Number 0.05
					Boolean false
					Null
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastCreatedUnit\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitStateSwap\\"
		params: Params [
			Param {
				type: String \\"unitstate\\"
				name: String \\"whichState\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetUnitState\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichState\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitStatePercent\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitstate\\"
				name: String \\"whichState\\"
			}
			Param {
				type: String \\"unitstate\\"
				name: String \\"whichMaxState\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"value\\"
				value: Call {
					name: String \\"GetUnitState\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichState\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"maxValue\\"
				value: Call {
					name: String \\"GetUnitState\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichMaxState\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" Return 0 for null units.\\"
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"whichUnit\\"
						operator: String \\"==\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"maxValue\\"
						operator: String \\"==\\"
						right: Number 0
					}
				}
				then: Statements [
					Return Number 0
				]
			}
			EmptyLine {}
			Return BinaryOp {
				left: BinaryOp {
					left: Name \\"value\\"
					operator: String \\"/\\"
					right: Name \\"maxValue\\"
				}
				operator: String \\"*\\"
				right: Number 100
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitLifePercent\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetUnitStatePercent\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"UNIT_STATE_LIFE\\"
					Name \\"UNIT_STATE_MAX_LIFE\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitManaPercent\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetUnitStatePercent\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"UNIT_STATE_MANA\\"
					Name \\"UNIT_STATE_MAX_MANA\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectUnitSingle\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ClearSelection\\"
				statement: Boolean true
			}
			Call {
				name: String \\"SelectUnit\\"
				args: Args [
					Name \\"whichUnit\\"
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectGroupBJEnum\\"
		statements: Statements [
			Call {
				name: String \\"SelectUnit\\"
				args: Args [
					Call {
						name: String \\"GetEnumUnit\\"
					}
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectGroupBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"g\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ClearSelection\\"
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					FuncRef String \\"S\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectUnitAdd\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SelectUnit\\"
				args: Args [
					Name \\"whichUnit\\"
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectUnitRemove\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SelectUnit\\"
				args: Args [
					Name \\"whichUnit\\"
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ClearSelectionForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ClearSelection\\"
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectUnitForPlayerSingle\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ClearSelection\\"
						statement: Boolean true
					}
					Call {
						name: String \\"SelectUnit\\"
						args: Args [
							Name \\"whichUnit\\"
							Boolean true
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectGroupForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ClearSelection\\"
						statement: Boolean true
					}
					Call {
						name: String \\"ForGroup\\"
						args: Args [
							Name \\"g\\"
							FuncRef String \\"S\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectUnitAddForPlayer\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SelectUnit\\"
						args: Args [
							Name \\"whichUnit\\"
							Boolean true
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SelectUnitRemoveForPlayer\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SelectUnit\\"
						args: Args [
							Name \\"whichUnit\\"
							Boolean false
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitLifeBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"newValue\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitState\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"UNIT_STATE_LIFE\\"
					Call {
						name: String \\"RMaxBJ\\"
						args: Args [
							Number 0
							Name \\"newValue\\"
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitManaBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"newValue\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitState\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"UNIT_STATE_MANA\\"
					Call {
						name: String \\"RMaxBJ\\"
						args: Args [
							Number 0
							Name \\"newValue\\"
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitLifePercentBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitState\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"UNIT_STATE_LIFE\\"
					BinaryOp {
						left: BinaryOp {
							left: Call {
								name: String \\"GetUnitState\\"
								args: Args [
									Name \\"whichUnit\\"
									Name \\"UNIT_STATE_MAX_LIFE\\"
								]
							}
							operator: String \\"*\\"
							right: Call {
								name: String \\"RMaxBJ\\"
								args: Args [
									Number 0
									Name \\"percent\\"
								]
							}
						}
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitManaPercentBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitState\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"UNIT_STATE_MANA\\"
					BinaryOp {
						left: BinaryOp {
							left: Call {
								name: String \\"GetUnitState\\"
								args: Args [
									Name \\"whichUnit\\"
									Name \\"UNIT_STATE_MAX_MANA\\"
								]
							}
							operator: String \\"*\\"
							right: Call {
								name: String \\"RMaxBJ\\"
								args: Args [
									Number 0
									Name \\"percent\\"
								]
							}
						}
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitDeadBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetUnitState\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"UNIT_STATE_LIFE\\"
					]
				}
				operator: String \\"<=\\"
				right: Number 0
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitAliveBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return UnaryOp {
				operator: String \\"not\\"
				expr: Call {
					name: String \\"IsUnitDeadBJ\\"
					args: Args [
						Name \\"whichUnit\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitGroupDeadBJEnum\\"
		statements: Statements [
			IfThenElse {
				condition: UnaryOp {
					operator: String \\"not\\"
					expr: Call {
						name: String \\"IsUnitDeadBJ\\"
						args: Args [
							Call {
								name: String \\"GetEnumUnit\\"
							}
						]
					}
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_isUnitGroupDeadResult\\"
						value: Boolean false
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns true if every unit of the group is dead.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"IsUnitGroupDeadBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"g\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Comment \\" If the user wants the group destroyed, remember that fact and clear\\"
			Comment \\" the flag, in case it is used again in the callback.\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"wantDestroy\\"
				value: Name \\"bj_wantDestroyGroup\\"
			}
			JASSSet {
				name: String \\"bj_wantDestroyGroup\\"
				value: Boolean false
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_isUnitGroupDeadResult\\"
				value: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					FuncRef String \\"I\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If the user wants the group destroyed, do so now.\\"
			IfThenElse {
				condition: Parens Name \\"wantDestroy\\"
				then: Statements [
					Call {
						name: String \\"DestroyGroup\\"
						args: Args [
							Name \\"g\\"
						]
						statement: Boolean true
					}
				]
			}
			Return Name \\"bj_isUnitGroupDeadResult\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitGroupEmptyBJEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_isUnitGroupEmptyResult\\"
				value: Boolean false
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns true if the group contains no units.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"IsUnitGroupEmptyBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"g\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Comment \\" If the user wants the group destroyed, remember that fact and clear\\"
			Comment \\" the flag, in case it is used again in the callback.\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"wantDestroy\\"
				value: Name \\"bj_wantDestroyGroup\\"
			}
			JASSSet {
				name: String \\"bj_wantDestroyGroup\\"
				value: Boolean false
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_isUnitGroupEmptyResult\\"
				value: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					FuncRef String \\"I\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If the user wants the group destroyed, do so now.\\"
			IfThenElse {
				condition: Parens Name \\"wantDestroy\\"
				then: Statements [
					Call {
						name: String \\"DestroyGroup\\"
						args: Args [
							Name \\"g\\"
						]
						statement: Boolean true
					}
				]
			}
			Return Name \\"bj_isUnitGroupEmptyResult\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitGroupInRectBJEnum\\"
		statements: Statements [
			IfThenElse {
				condition: UnaryOp {
					operator: String \\"not\\"
					expr: Call {
						name: String \\"RectContainsUnit\\"
						args: Args [
							Name \\"bj_isUnitGroupInRectRect\\"
							Call {
								name: String \\"GetEnumUnit\\"
							}
						]
					}
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_isUnitGroupInRectResult\\"
						value: Boolean false
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns true if every unit of the group is within the given rect.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"IsUnitGroupInRectBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_isUnitGroupInRectResult\\"
				value: Boolean true
			}
			JASSSet {
				name: String \\"bj_isUnitGroupInRectRect\\"
				value: Name \\"r\\"
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					FuncRef String \\"I\\"
				]
				statement: Boolean true
			}
			Return Name \\"bj_isUnitGroupInRectResult\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitHiddenBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsUnitHidden\\"
				args: Args [
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ShowUnitHide\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ShowUnit\\"
				args: Args [
					Name \\"whichUnit\\"
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ShowUnitShow\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Comment \\" Prevent dead heroes from being unhidden.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"IsUnitType\\"
						args: Args [
							Name \\"whichUnit\\"
							Name \\"UNIT_TYPE_HERO\\"
						]
					}
					operator: String \\"and\\"
					right: Call {
						name: String \\"IsUnitDeadBJ\\"
						args: Args [
							Name \\"whichUnit\\"
						]
					}
				}
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			Call {
				name: String \\"ShowUnit\\"
				args: Args [
					Name \\"whichUnit\\"
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IssueHauntOrderAtLocBJFilter\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetUnitTypeId\\"
					args: Args [
						Call {
							name: String \\"GetFilterUnit\\"
						}
					]
				}
				operator: String \\"==\\"
				right: FourCC \\"ngol\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IssueHauntOrderAtLocBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichPeon\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"goldMine\\"
			}
			EmptyLine {}
			Comment \\" Search for a gold mine within a 1-cell radius of the specified location.\\"
			JASSSet {
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsInRangeOfLoc\\"
				args: Args [
					Name \\"g\\"
					Name \\"loc\\"
					BinaryOp {
						left: Number 2
						operator: String \\"*\\"
						right: Name \\"bj_CELLWIDTH\\"
					}
					Name \\"filterIssueHauntOrderAtLocBJ\\"
				]
				statement: Boolean true
			}
			JASSSet {
				name: String \\"goldMine\\"
				value: Call {
					name: String \\"FirstOfGroup\\"
					args: Args [
						Name \\"g\\"
					]
				}
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"g\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If no mine was found, abort the request.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"goldMine\\"
					operator: String \\"==\\"
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			Comment \\" Issue the Haunt Gold Mine order.\\"
			Return Call {
				name: String \\"IssueTargetOrderById\\"
				args: Args [
					Name \\"whichPeon\\"
					FourCC \\"ugol\\"
					Name \\"goldMine\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IssueBuildOrderByIdLocBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichPeon\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"unitId\\"
					operator: String \\"==\\"
					right: FourCC \\"ugol\\"
				}
				then: Statements [
					Return Call {
						name: String \\"IssueHauntOrderAtLocBJ\\"
						args: Args [
							Name \\"whichPeon\\"
							Name \\"loc\\"
						]
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Call {
								name: String \\"IssueBuildOrderById\\"
								args: Args [
									Name \\"whichPeon\\"
									Name \\"unitId\\"
									Call {
										name: String \\"GetLocationX\\"
										args: Args [
											Name \\"loc\\"
										]
									}
									Call {
										name: String \\"GetLocationY\\"
										args: Args [
											Name \\"loc\\"
										]
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IssueTrainOrderByIdBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IssueImmediateOrderById\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"unitId\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupTrainOrderByIdBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"GroupImmediateOrderById\\"
				args: Args [
					Name \\"g\\"
					Name \\"unitId\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IssueUpgradeOrderByIdBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"techId\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IssueImmediateOrderById\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"techId\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetAttackedUnitBJ\\"
		returns: String \\"unit\\"
		statements: Statements [
			Return Call {
				name: String \\"GetTriggerUnit\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitFlyHeightBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"newHeight\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"rate\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitFlyHeight\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"newHeight\\"
					Name \\"rate\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitTurnSpeedBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"turnSpeed\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitTurnSpeed\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"turnSpeed\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitPropWindowBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"propWindow\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"angle\\"
				value: Name \\"propWindow\\"
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"angle\\"
					operator: String \\"<=\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"angle\\"
						value: Number 1
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"angle\\"
							operator: String \\">=\\"
							right: Number 360
						}
						statements: Statements [
							JASSSet {
								name: String \\"angle\\"
								value: Number 359
							}
						]
					}
				]
			}
			JASSSet {
				name: String \\"angle\\"
				value: BinaryOp {
					left: Name \\"angle\\"
					operator: String \\"*\\"
					right: Name \\"bj_DEGTORAD\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetUnitPropWindow\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"angle\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitPropWindowBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetUnitPropWindow\\"
					args: Args [
						Name \\"whichUnit\\"
					]
				}
				operator: String \\"*\\"
				right: Name \\"bj_RADTODEG\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitDefaultPropWindowBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetUnitDefaultPropWindow\\"
				args: Args [
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitBlendTimeBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blendTime\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitBlendTime\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"blendTime\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitAcquireRangeBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"acquireRange\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitAcquireRange\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"acquireRange\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitSetCanSleepBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"canSleep\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"UnitAddSleep\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"canSleep\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitCanSleepBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitCanSleep\\"
				args: Args [
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitWakeUpBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"UnitWakeUp\\"
				args: Args [
					Name \\"whichUnit\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitIsSleepingBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitIsSleeping\\"
				args: Args [
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WakePlayerUnitsEnum\\"
		statements: Statements [
			Call {
				name: String \\"UnitWakeUp\\"
				args: Args [
					Call {
						name: String \\"GetEnumUnit\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WakePlayerUnits\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsOfPlayer\\"
				args: Args [
					Name \\"g\\"
					Name \\"whichPlayer\\"
					Null
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					FuncRef String \\"W\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"g\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EnableCreepSleepBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"enable\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerState\\"
				args: Args [
					Call {
						name: String \\"Player\\"
						args: Args [
							Name \\"PLAYER_NEUTRAL_AGGRESSIVE\\"
						]
					}
					Name \\"PLAYER_STATE_NO_CREEP_SLEEP\\"
					Call {
						name: String \\"IntegerTertiaryOp\\"
						args: Args [
							Name \\"enable\\"
							Number 0
							Number 1
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If we're disabling, attempt to wake any already-sleeping creeps.\\"
			IfThenElse {
				condition: Parens UnaryOp {
					operator: String \\"not\\"
					expr: Name \\"enable\\"
				}
				then: Statements [
					Call {
						name: String \\"WakePlayerUnits\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"PLAYER_NEUTRAL_AGGRESSIVE\\"
								]
							}
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitGenerateAlarms\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"generate\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitIgnoreAlarm\\"
				args: Args [
					Name \\"whichUnit\\"
					UnaryOp {
						operator: String \\"not\\"
						expr: Name \\"generate\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DoesUnitGenerateAlarms\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return UnaryOp {
				operator: String \\"not\\"
				expr: Call {
					name: String \\"UnitIgnoreAlarmToggled\\"
					args: Args [
						Name \\"whichUnit\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PauseAllUnitsBJEnum\\"
		statements: Statements [
			Call {
				name: String \\"PauseUnit\\"
				args: Args [
					Call {
						name: String \\"GetEnumUnit\\"
					}
					Name \\"bj_pauseAllUnitsFlag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Pause all units \\"
	JASSFunction {
		name: String \\"PauseAllUnitsBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"pause\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_pauseAllUnitsFlag\\"
				value: Name \\"pause\\"
			}
			JASSSet {
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					EmptyLine {}
					Comment \\" If this is a computer slot, pause/resume the AI.\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerController\\"
								args: Args [
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"MAP_CONTROL_COMPUTER\\"
						}
						then: Statements [
							Call {
								name: String \\"PauseCompAI\\"
								args: Args [
									Name \\"indexPlayer\\"
									Name \\"pause\\"
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					Comment \\" Enumerate and unpause every unit owned by the player.\\"
					Call {
						name: String \\"GroupEnumUnitsOfPlayer\\"
						args: Args [
							Name \\"g\\"
							Name \\"indexPlayer\\"
							Null
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ForGroup\\"
						args: Args [
							Name \\"g\\"
							FuncRef String \\"P\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"GroupClear\\"
						args: Args [
							Name \\"g\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYER_SLOTS\\"
					}
				]
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"g\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PauseUnitBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"pause\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"PauseUnit\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"pause\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitPausedBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsUnitPaused\\"
				args: Args [
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitPauseTimedLifeBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"UnitPauseTimedLife\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitApplyTimedLifeBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"buffId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"UnitApplyTimedLife\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"buffId\\"
					Name \\"duration\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitShareVisionBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"share\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"UnitShareVision\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichPlayer\\"
					Name \\"share\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitRemoveBuffsBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"buffType\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"buffType\\"
					operator: String \\"==\\"
					right: Name \\"bj_REMOVEBUFFS_POSITIVE\\"
				}
				then: Statements [
					Call {
						name: String \\"UnitRemoveBuffs\\"
						args: Args [
							Name \\"whichUnit\\"
							Boolean true
							Boolean false
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"buffType\\"
							operator: String \\"==\\"
							right: Name \\"bj_REMOVEBUFFS_NEGATIVE\\"
						}
						statements: Statements [
							Call {
								name: String \\"UnitRemoveBuffs\\"
								args: Args [
									Name \\"whichUnit\\"
									Boolean false
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"buffType\\"
							operator: String \\"==\\"
							right: Name \\"bj_REMOVEBUFFS_ALL\\"
						}
						statements: Statements [
							Call {
								name: String \\"UnitRemoveBuffs\\"
								args: Args [
									Name \\"whichUnit\\"
									Boolean true
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"buffType\\"
							operator: String \\"==\\"
							right: Name \\"bj_REMOVEBUFFS_NONTLIFE\\"
						}
						statements: Statements [
							Call {
								name: String \\"UnitRemoveBuffsEx\\"
								args: Args [
									Name \\"whichUnit\\"
									Boolean true
									Boolean true
									Boolean false
									Boolean false
									Boolean false
									Boolean true
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized dispel type - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitRemoveBuffsExBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"polarity\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"resist\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"bTLife\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"bAura\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"boolean\\"
				name: String \\"bPos\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"polarity\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_POLARITY_EITHER\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"polarity\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_POLARITY_POSITIVE\\"
					}
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bNeg\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"polarity\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_POLARITY_EITHER\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"polarity\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_POLARITY_NEGATIVE\\"
					}
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bMagic\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"resist\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_RESIST_BOTH\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"resist\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_RESIST_MAGIC\\"
					}
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bPhys\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"resist\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_RESIST_BOTH\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"resist\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_RESIST_PHYSICAL\\"
					}
				}
			}
			EmptyLine {}
			Call {
				name: String \\"UnitRemoveBuffsEx\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"bPos\\"
					Name \\"bNeg\\"
					Name \\"bMagic\\"
					Name \\"bPhys\\"
					Name \\"bTLife\\"
					Name \\"bAura\\"
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitCountBuffsExBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"polarity\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"resist\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"bTLife\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"bAura\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"boolean\\"
				name: String \\"bPos\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"polarity\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_POLARITY_EITHER\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"polarity\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_POLARITY_POSITIVE\\"
					}
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bNeg\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"polarity\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_POLARITY_EITHER\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"polarity\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_POLARITY_NEGATIVE\\"
					}
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bMagic\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"resist\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_RESIST_BOTH\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"resist\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_RESIST_MAGIC\\"
					}
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"bPhys\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"resist\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_RESIST_BOTH\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"resist\\"
						operator: String \\"==\\"
						right: Name \\"bj_BUFF_RESIST_PHYSICAL\\"
					}
				}
			}
			EmptyLine {}
			Return Call {
				name: String \\"UnitCountBuffsEx\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"bPos\\"
					Name \\"bNeg\\"
					Name \\"bMagic\\"
					Name \\"bPhys\\"
					Name \\"bTLife\\"
					Name \\"bAura\\"
					Boolean false
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitRemoveAbilityBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilityId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitRemoveAbility\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"abilityId\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitAddAbilityBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilityId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitAddAbility\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"abilityId\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitRemoveTypeBJ\\"
		params: Params [
			Param {
				type: String \\"unittype\\"
				name: String \\"whichType\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitRemoveType\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichType\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitAddTypeBJ\\"
		params: Params [
			Param {
				type: String \\"unittype\\"
				name: String \\"whichType\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitAddType\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichType\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitMakeAbilityPermanentBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"permanent\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"abilityId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitMakeAbilityPermanent\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"permanent\\"
					Name \\"abilityId\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitExplodedBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"exploded\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitExploded\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"exploded\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ExplodeUnitBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitExploded\\"
				args: Args [
					Name \\"whichUnit\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"KillUnit\\"
				args: Args [
					Name \\"whichUnit\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetTransportUnitBJ\\"
		returns: String \\"unit\\"
		statements: Statements [
			Return Call {
				name: String \\"GetTransportUnit\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLoadedUnitBJ\\"
		returns: String \\"unit\\"
		statements: Statements [
			Return Call {
				name: String \\"GetLoadedUnit\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitInTransportBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichTransport\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsUnitInTransport\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichTransport\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitLoadedBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsUnitLoaded\\"
				args: Args [
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsUnitIllusionBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsUnitIllusion\\"
				args: Args [
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" This attempts to replace a unit with a new unit type by creating a new\\"
	Comment \\" unit of the desired type using the old unit's location, facing, etc.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ReplaceUnitBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"newUnitId\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitStateMethod\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"oldUnit\\"
				value: Name \\"whichUnit\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"newUnit\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"wasHidden\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"item\\"
				name: String \\"indexItem\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"oldRatio\\"
			}
			EmptyLine {}
			Comment \\" If we have bogus data, don't attempt the replace.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"oldUnit\\"
					operator: String \\"==\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_lastReplacedUnit\\"
						value: Name \\"oldUnit\\"
					}
					Return Name \\"oldUnit\\"
				]
			}
			EmptyLine {}
			Comment \\" Hide the original unit.\\"
			JASSSet {
				name: String \\"wasHidden\\"
				value: Call {
					name: String \\"IsUnitHidden\\"
					args: Args [
						Name \\"oldUnit\\"
					]
				}
			}
			Call {
				name: String \\"ShowUnit\\"
				args: Args [
					Name \\"oldUnit\\"
					Boolean false
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Create the replacement unit.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"newUnitId\\"
					operator: String \\"==\\"
					right: FourCC \\"ugol\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"newUnit\\"
						value: Call {
							name: String \\"CreateBlightedGoldmine\\"
							args: Args [
								Call {
									name: String \\"GetOwningPlayer\\"
									args: Args [
										Name \\"oldUnit\\"
									]
								}
								Call {
									name: String \\"GetUnitX\\"
									args: Args [
										Name \\"oldUnit\\"
									]
								}
								Call {
									name: String \\"GetUnitY\\"
									args: Args [
										Name \\"oldUnit\\"
									]
								}
								Call {
									name: String \\"GetUnitFacing\\"
									args: Args [
										Name \\"oldUnit\\"
									]
								}
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"newUnit\\"
								value: Call {
									name: String \\"CreateUnit\\"
									args: Args [
										Call {
											name: String \\"GetOwningPlayer\\"
											args: Args [
												Name \\"oldUnit\\"
											]
										}
										Name \\"newUnitId\\"
										Call {
											name: String \\"GetUnitX\\"
											args: Args [
												Name \\"oldUnit\\"
											]
										}
										Call {
											name: String \\"GetUnitY\\"
											args: Args [
												Name \\"oldUnit\\"
											]
										}
										Call {
											name: String \\"GetUnitFacing\\"
											args: Args [
												Name \\"oldUnit\\"
											]
										}
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Set the unit's life and mana according to the requested method.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"unitStateMethod\\"
					operator: String \\"==\\"
					right: Name \\"bj_UNIT_STATE_METHOD_RELATIVE\\"
				}
				then: Statements [
					Comment \\" Set the replacement's current/max life ratio to that of the old unit.\\"
					Comment \\" If both units have mana, do the same for mana.\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetUnitState\\"
								args: Args [
									Name \\"oldUnit\\"
									Name \\"UNIT_STATE_MAX_LIFE\\"
								]
							}
							operator: String \\">\\"
							right: Number 0
						}
						then: Statements [
							JASSSet {
								name: String \\"oldRatio\\"
								value: BinaryOp {
									left: Call {
										name: String \\"GetUnitState\\"
										args: Args [
											Name \\"oldUnit\\"
											Name \\"UNIT_STATE_LIFE\\"
										]
									}
									operator: String \\"/\\"
									right: Call {
										name: String \\"GetUnitState\\"
										args: Args [
											Name \\"oldUnit\\"
											Name \\"UNIT_STATE_MAX_LIFE\\"
										]
									}
								}
							}
							Call {
								name: String \\"SetUnitState\\"
								args: Args [
									Name \\"newUnit\\"
									Name \\"UNIT_STATE_LIFE\\"
									BinaryOp {
										left: Name \\"oldRatio\\"
										operator: String \\"*\\"
										right: Call {
											name: String \\"GetUnitState\\"
											args: Args [
												Name \\"newUnit\\"
												Name \\"UNIT_STATE_MAX_LIFE\\"
											]
										}
									}
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					IfThenElse {
						condition: BinaryOp {
							left: Parens BinaryOp {
								left: Call {
									name: String \\"GetUnitState\\"
									args: Args [
										Name \\"oldUnit\\"
										Name \\"UNIT_STATE_MAX_MANA\\"
									]
								}
								operator: String \\">\\"
								right: Number 0
							}
							operator: String \\"and\\"
							right: Parens BinaryOp {
								left: Call {
									name: String \\"GetUnitState\\"
									args: Args [
										Name \\"newUnit\\"
										Name \\"UNIT_STATE_MAX_MANA\\"
									]
								}
								operator: String \\">\\"
								right: Number 0
							}
						}
						then: Statements [
							JASSSet {
								name: String \\"oldRatio\\"
								value: BinaryOp {
									left: Call {
										name: String \\"GetUnitState\\"
										args: Args [
											Name \\"oldUnit\\"
											Name \\"UNIT_STATE_MANA\\"
										]
									}
									operator: String \\"/\\"
									right: Call {
										name: String \\"GetUnitState\\"
										args: Args [
											Name \\"oldUnit\\"
											Name \\"UNIT_STATE_MAX_MANA\\"
										]
									}
								}
							}
							Call {
								name: String \\"SetUnitState\\"
								args: Args [
									Name \\"newUnit\\"
									Name \\"UNIT_STATE_MANA\\"
									BinaryOp {
										left: Name \\"oldRatio\\"
										operator: String \\"*\\"
										right: Call {
											name: String \\"GetUnitState\\"
											args: Args [
												Name \\"newUnit\\"
												Name \\"UNIT_STATE_MAX_MANA\\"
											]
										}
									}
								]
								statement: Boolean true
							}
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"unitStateMethod\\"
							operator: String \\"==\\"
							right: Name \\"bj_UNIT_STATE_METHOD_ABSOLUTE\\"
						}
						statements: Statements [
							Comment \\" Set the replacement's current life to that of the old unit.\\"
							Comment \\" If the new unit has mana, do the same for mana.\\"
							Call {
								name: String \\"SetUnitState\\"
								args: Args [
									Name \\"newUnit\\"
									Name \\"UNIT_STATE_LIFE\\"
									Call {
										name: String \\"GetUnitState\\"
										args: Args [
											Name \\"oldUnit\\"
											Name \\"UNIT_STATE_LIFE\\"
										]
									}
								]
								statement: Boolean true
							}
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetUnitState\\"
										args: Args [
											Name \\"newUnit\\"
											Name \\"UNIT_STATE_MAX_MANA\\"
										]
									}
									operator: String \\">\\"
									right: Number 0
								}
								then: Statements [
									Call {
										name: String \\"SetUnitState\\"
										args: Args [
											Name \\"newUnit\\"
											Name \\"UNIT_STATE_MANA\\"
											Call {
												name: String \\"GetUnitState\\"
												args: Args [
													Name \\"oldUnit\\"
													Name \\"UNIT_STATE_MANA\\"
												]
											}
										]
										statement: Boolean true
									}
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"unitStateMethod\\"
							operator: String \\"==\\"
							right: Name \\"bj_UNIT_STATE_METHOD_DEFAULTS\\"
						}
						statements: Statements [
							Comment \\" The newly created unit should already have default life and mana.\\"
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"unitStateMethod\\"
							operator: String \\"==\\"
							right: Name \\"bj_UNIT_STATE_METHOD_MAXIMUM\\"
						}
						statements: Statements [
							Comment \\" Use max life and mana.\\"
							Call {
								name: String \\"SetUnitState\\"
								args: Args [
									Name \\"newUnit\\"
									Name \\"UNIT_STATE_LIFE\\"
									Call {
										name: String \\"GetUnitState\\"
										args: Args [
											Name \\"newUnit\\"
											Name \\"UNIT_STATE_MAX_LIFE\\"
										]
									}
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetUnitState\\"
								args: Args [
									Name \\"newUnit\\"
									Name \\"UNIT_STATE_MANA\\"
									Call {
										name: String \\"GetUnitState\\"
										args: Args [
											Name \\"newUnit\\"
											Name \\"UNIT_STATE_MAX_MANA\\"
										]
									}
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized unit state method - ignore the request.\\"
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Mirror properties of the old unit onto the new unit.\\"
			Comment \\"call PauseUnit(newUnit, IsUnitPaused(oldUnit))\\"
			Call {
				name: String \\"SetResourceAmount\\"
				args: Args [
					Name \\"newUnit\\"
					Call {
						name: String \\"GetResourceAmount\\"
						args: Args [
							Name \\"oldUnit\\"
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If both the old and new units are heroes, handle their hero info.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"IsUnitType\\"
						args: Args [
							Name \\"oldUnit\\"
							Name \\"UNIT_TYPE_HERO\\"
						]
					}
					operator: String \\"and\\"
					right: Call {
						name: String \\"IsUnitType\\"
						args: Args [
							Name \\"newUnit\\"
							Name \\"UNIT_TYPE_HERO\\"
						]
					}
				}
				then: Statements [
					Call {
						name: String \\"SetHeroXP\\"
						args: Args [
							Name \\"newUnit\\"
							Call {
								name: String \\"GetHeroXP\\"
								args: Args [
									Name \\"oldUnit\\"
								]
							}
							Boolean false
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: Number 0
					}
					Loop {
						statements: Statements [
							JASSSet {
								name: String \\"indexItem\\"
								value: Call {
									name: String \\"UnitItemInSlot\\"
									args: Args [
										Name \\"oldUnit\\"
										Name \\"index\\"
									]
								}
							}
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"indexItem\\"
									operator: String \\"!=\\"
								}
								then: Statements [
									Call {
										name: String \\"UnitRemoveItem\\"
										args: Args [
											Name \\"oldUnit\\"
											Name \\"indexItem\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"UnitAddItem\\"
										args: Args [
											Name \\"newUnit\\"
											Name \\"indexItem\\"
										]
										statement: Boolean true
									}
								]
							}
							EmptyLine {}
							JASSSet {
								name: String \\"index\\"
								value: BinaryOp {
									left: Name \\"index\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"index\\"
								operator: String \\">=\\"
								right: Name \\"bj_MAX_INVENTORY\\"
							}
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Remove or kill the original unit.  It is sometimes unsafe to remove\\"
			Comment \\" hidden units, so kill the original unit if it was previously hidden.\\"
			IfThenElse {
				condition: Name \\"wasHidden\\"
				then: Statements [
					Call {
						name: String \\"KillUnit\\"
						args: Args [
							Name \\"oldUnit\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"RemoveUnit\\"
						args: Args [
							Name \\"oldUnit\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"RemoveUnit\\"
								args: Args [
									Name \\"oldUnit\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_lastReplacedUnit\\"
				value: Name \\"newUnit\\"
			}
			Return Name \\"newUnit\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastReplacedUnitBJ\\"
		returns: String \\"unit\\"
		statements: Statements [
			Return Name \\"bj_lastReplacedUnit\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitPositionLocFacingBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"facing\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitPositionLoc\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"loc\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetUnitFacing\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"facing\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitPositionLocFacingLocBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"lookAt\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitPositionLoc\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"loc\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetUnitFacing\\"
				args: Args [
					Name \\"whichUnit\\"
					Call {
						name: String \\"AngleBetweenPoints\\"
						args: Args [
							Name \\"loc\\"
							Name \\"lookAt\\"
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddItemToStockBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"itemId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"currentStock\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"stockMax\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AddItemToStock\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"itemId\\"
					Name \\"currentStock\\"
					Name \\"stockMax\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddUnitToStockBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"currentStock\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"stockMax\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AddUnitToStock\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"unitId\\"
					Name \\"currentStock\\"
					Name \\"stockMax\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RemoveItemFromStockBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"itemId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"RemoveItemFromStock\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"itemId\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RemoveUnitFromStockBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"RemoveUnitFromStock\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"unitId\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitUseFoodBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"enable\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitUseFood\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"enable\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitDamagePointLoc\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"delay\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"amount\\"
			}
			Param {
				type: String \\"attacktype\\"
				name: String \\"whichAttack\\"
			}
			Param {
				type: String \\"damagetype\\"
				name: String \\"whichDamage\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitDamagePoint\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"delay\\"
					Name \\"radius\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Name \\"amount\\"
					Boolean true
					Boolean false
					Name \\"whichAttack\\"
					Name \\"whichDamage\\"
					Name \\"WEAPON_TYPE_WHOKNOWS\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitDamageTargetBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"target\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"amount\\"
			}
			Param {
				type: String \\"attacktype\\"
				name: String \\"whichAttack\\"
			}
			Param {
				type: String \\"damagetype\\"
				name: String \\"whichDamage\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"UnitDamageTarget\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"target\\"
					Name \\"amount\\"
					Boolean true
					Boolean false
					Name \\"whichAttack\\"
					Name \\"whichDamage\\"
					Name \\"WEAPON_TYPE_WHOKNOWS\\"
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Destructable Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateDestructableLoc\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"objectid\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"facing\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"scale\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"variation\\"
			}
		]
		returns: String \\"destructable\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedDestructable\\"
				value: Call {
					name: String \\"CreateDestructable\\"
					args: Args [
						Name \\"objectid\\"
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Name \\"facing\\"
						Name \\"scale\\"
						Name \\"variation\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedDestructable\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateDeadDestructableLocBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"objectid\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"facing\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"scale\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"variation\\"
			}
		]
		returns: String \\"destructable\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedDestructable\\"
				value: Call {
					name: String \\"CreateDeadDestructable\\"
					args: Args [
						Name \\"objectid\\"
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Name \\"facing\\"
						Name \\"scale\\"
						Name \\"variation\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedDestructable\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedDestructable\\"
		returns: String \\"destructable\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedDestructable\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ShowDestructableBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ShowDestructable\\"
				args: Args [
					Name \\"d\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDestructableInvulnerableBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetDestructableInvulnerable\\"
				args: Args [
					Name \\"d\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsDestructableInvulnerableBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsDestructableInvulnerable\\"
				args: Args [
					Name \\"d\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetDestructableLoc\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"whichDestructable\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Return Call {
				name: String \\"Location\\"
				args: Args [
					Call {
						name: String \\"GetDestructableX\\"
						args: Args [
							Name \\"whichDestructable\\"
						]
					}
					Call {
						name: String \\"GetDestructableY\\"
						args: Args [
							Name \\"whichDestructable\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EnumDestructablesInRectAll\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"code\\"
				name: String \\"actionFunc\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"EnumDestructablesInRect\\"
				args: Args [
					Name \\"r\\"
					Null
					Name \\"actionFunc\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EnumDestructablesInCircleBJFilter\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Variable {
				type: String \\"location\\"
				name: String \\"destLoc\\"
				value: Call {
					name: String \\"GetDestructableLoc\\"
					args: Args [
						Call {
							name: String \\"GetFilterDestructable\\"
						}
					]
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"result\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"result\\"
				value: BinaryOp {
					left: Call {
						name: String \\"DistanceBetweenPoints\\"
						args: Args [
							Name \\"destLoc\\"
							Name \\"bj_enumDestructableCenter\\"
						]
					}
					operator: String \\"<=\\"
					right: Name \\"bj_enumDestructableRadius\\"
				}
			}
			Call {
				name: String \\"RemoveLocation\\"
				args: Args [
					Name \\"destLoc\\"
				]
				statement: Boolean true
			}
			Return Name \\"result\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsDestructableDeadBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetDestructableLife\\"
					args: Args [
						Name \\"d\\"
					]
				}
				operator: String \\"<=\\"
				right: Number 0
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsDestructableAliveBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return UnaryOp {
				operator: String \\"not\\"
				expr: Call {
					name: String \\"IsDestructableDeadBJ\\"
					args: Args [
						Name \\"d\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" See GroupPickRandomUnitEnum for the details of this algorithm.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"RandomDestructableInRectBJEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_destRandomConsidered\\"
				value: BinaryOp {
					left: Name \\"bj_destRandomConsidered\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetRandomInt\\"
						args: Args [
							Number 1
							Name \\"bj_destRandomConsidered\\"
						]
					}
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_destRandomCurrentPick\\"
						value: Call {
							name: String \\"GetEnumDestructable\\"
						}
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Picks a random destructable from within a rect, matching a condition\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"RandomDestructableInRectBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"boolexpr\\"
				name: String \\"filter\\"
			}
		]
		returns: String \\"destructable\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_destRandomConsidered\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"bj_destRandomCurrentPick\\"
			}
			Call {
				name: String \\"EnumDestructablesInRect\\"
				args: Args [
					Name \\"r\\"
					Name \\"filter\\"
					FuncRef String \\"R\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyBoolExpr\\"
				args: Args [
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Return Name \\"bj_destRandomCurrentPick\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Picks a random destructable from within a rect\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"RandomDestructableInRectSimpleBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"destructable\\"
		statements: Statements [
			Return Call {
				name: String \\"RandomDestructableInRectBJ\\"
				args: Args [
					Name \\"r\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Enumerates within a rect, with a filter to narrow the enumeration down\\"
	Comment \\" objects within a circular area.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"EnumDestructablesInCircleBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"code\\"
				name: String \\"actionFunc\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"radius\\"
					operator: String \\">=\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_enumDestructableCenter\\"
						value: Name \\"loc\\"
					}
					JASSSet {
						name: String \\"bj_enumDestructableRadius\\"
						value: Name \\"radius\\"
					}
					JASSSet {
						name: String \\"r\\"
						value: Call {
							name: String \\"GetRectFromCircleBJ\\"
							args: Args [
								Name \\"loc\\"
								Name \\"radius\\"
							]
						}
					}
					Call {
						name: String \\"EnumDestructablesInRect\\"
						args: Args [
							Name \\"r\\"
							Name \\"filterEnumDestructablesInCircleBJ\\"
							Name \\"actionFunc\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"RemoveRect\\"
						args: Args [
							Name \\"r\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDestructableLifePercentBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percent\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetDestructableLife\\"
				args: Args [
					Name \\"d\\"
					BinaryOp {
						left: BinaryOp {
							left: Call {
								name: String \\"GetDestructableMaxLife\\"
								args: Args [
									Name \\"d\\"
								]
							}
							operator: String \\"*\\"
							right: Name \\"percent\\"
						}
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDestructableMaxLifeBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"max\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetDestructableMaxLife\\"
				args: Args [
					Name \\"d\\"
					Name \\"max\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ModifyGateBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"gateOperation\\"
			}
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"gateOperation\\"
					operator: String \\"==\\"
					right: Name \\"bj_GATEOPERATION_CLOSE\\"
				}
				then: Statements [
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetDestructableLife\\"
								args: Args [
									Name \\"d\\"
								]
							}
							operator: String \\"<=\\"
							right: Number 0
						}
						then: Statements [
							Call {
								name: String \\"DestructableRestoreLife\\"
								args: Args [
									Name \\"d\\"
									Call {
										name: String \\"GetDestructableMaxLife\\"
										args: Args [
											Name \\"d\\"
										]
									}
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					Call {
						name: String \\"SetDestructableAnimation\\"
						args: Args [
							Name \\"d\\"
							String \\"stand\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"gateOperation\\"
							operator: String \\"==\\"
							right: Name \\"bj_GATEOPERATION_OPEN\\"
						}
						statements: Statements [
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetDestructableLife\\"
										args: Args [
											Name \\"d\\"
										]
									}
									operator: String \\">\\"
									right: Number 0
								}
								then: Statements [
									Call {
										name: String \\"KillDestructable\\"
										args: Args [
											Name \\"d\\"
										]
										statement: Boolean true
									}
								]
							}
							Call {
								name: String \\"SetDestructableAnimation\\"
								args: Args [
									Name \\"d\\"
									String \\"death alternate\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"gateOperation\\"
							operator: String \\"==\\"
							right: Name \\"bj_GATEOPERATION_DESTROY\\"
						}
						statements: Statements [
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetDestructableLife\\"
										args: Args [
											Name \\"d\\"
										]
									}
									operator: String \\">\\"
									right: Number 0
								}
								then: Statements [
									Call {
										name: String \\"KillDestructable\\"
										args: Args [
											Name \\"d\\"
										]
										statement: Boolean true
									}
								]
							}
							Call {
								name: String \\"SetDestructableAnimation\\"
								args: Args [
									Name \\"d\\"
									String \\"death\\"
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized gate state - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Determine the elevator's height from its occlusion height.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GetElevatorHeight\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"height\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"height\\"
				value: BinaryOp {
					left: Number 1
					operator: String \\"+\\"
					right: Call {
						name: String \\"R2I\\"
						args: Args [
							BinaryOp {
								left: Call {
									name: String \\"GetDestructableOccluderHeight\\"
									args: Args [
										Name \\"d\\"
									]
								}
								operator: String \\"/\\"
								right: Name \\"bj_CLIFFHEIGHT\\"
							}
						]
					}
				}
			}
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"height\\"
						operator: String \\"<\\"
						right: Number 1
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"height\\"
						operator: String \\">\\"
						right: Number 3
					}
				}
				then: Statements [
					JASSSet {
						name: String \\"height\\"
						value: Number 1
					}
				]
			}
			Return Name \\"height\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" To properly animate an elevator, we must know not only what height we\\"
	Comment \\" want to change to, but also what height we are currently at.  This code\\"
	Comment \\" determines the elevator's current height from its occlusion height.\\"
	Comment \\" Arbitrarily changing an elevator's occlusion height is thus inadvisable.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ChangeElevatorHeight\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"newHeight\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"oldHeight\\"
			}
			EmptyLine {}
			Comment \\" Cap the new height within the supported range.\\"
			JASSSet {
				name: String \\"newHeight\\"
				value: Call {
					name: String \\"IMaxBJ\\"
					args: Args [
						Number 1
						Name \\"newHeight\\"
					]
				}
			}
			JASSSet {
				name: String \\"newHeight\\"
				value: Call {
					name: String \\"IMinBJ\\"
					args: Args [
						Number 3
						Name \\"newHeight\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" Find out what height the elevator is already at.\\"
			JASSSet {
				name: String \\"oldHeight\\"
				value: Call {
					name: String \\"GetElevatorHeight\\"
					args: Args [
						Name \\"d\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" Set the elevator's occlusion height.\\"
			Call {
				name: String \\"SetDestructableOccluderHeight\\"
				args: Args [
					Name \\"d\\"
					BinaryOp {
						left: Name \\"bj_CLIFFHEIGHT\\"
						operator: String \\"*\\"
						right: Parens BinaryOp {
							left: Name \\"newHeight\\"
							operator: String \\"-\\"
							right: Number 1
						}
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"newHeight\\"
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"oldHeight\\"
							operator: String \\"==\\"
							right: Number 2
						}
						then: Statements [
							Call {
								name: String \\"SetDestructableAnimation\\"
								args: Args [
									Name \\"d\\"
									String \\"birth\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"QueueDestructableAnimation\\"
								args: Args [
									Name \\"d\\"
									String \\"stand\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"oldHeight\\"
									operator: String \\"==\\"
									right: Number 3
								}
								statements: Statements [
									Call {
										name: String \\"SetDestructableAnimation\\"
										args: Args [
											Name \\"d\\"
											String \\"birth third\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"QueueDestructableAnimation\\"
										args: Args [
											Name \\"d\\"
											String \\"stand\\"
										]
										statement: Boolean true
									}
								]
							}
							Else {
								statements: Statements [
									Comment \\" Unrecognized old height - snap to new height.\\"
									Call {
										name: String \\"SetDestructableAnimation\\"
										args: Args [
											Name \\"d\\"
											String \\"stand\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"newHeight\\"
							operator: String \\"==\\"
							right: Number 2
						}
						statements: Statements [
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"oldHeight\\"
									operator: String \\"==\\"
									right: Number 1
								}
								then: Statements [
									Call {
										name: String \\"SetDestructableAnimation\\"
										args: Args [
											Name \\"d\\"
											String \\"death\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"QueueDestructableAnimation\\"
										args: Args [
											Name \\"d\\"
											String \\"stand second\\"
										]
										statement: Boolean true
									}
								]
								elses: Array [
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"oldHeight\\"
											operator: String \\"==\\"
											right: Number 3
										}
										statements: Statements [
											Call {
												name: String \\"SetDestructableAnimation\\"
												args: Args [
													Name \\"d\\"
													String \\"birth second\\"
												]
												statement: Boolean true
											}
											Call {
												name: String \\"QueueDestructableAnimation\\"
												args: Args [
													Name \\"d\\"
													String \\"stand second\\"
												]
												statement: Boolean true
											}
										]
									}
									Else {
										statements: Statements [
											Comment \\" Unrecognized old height - snap to new height.\\"
											Call {
												name: String \\"SetDestructableAnimation\\"
												args: Args [
													Name \\"d\\"
													String \\"stand second\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"newHeight\\"
							operator: String \\"==\\"
							right: Number 3
						}
						statements: Statements [
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"oldHeight\\"
									operator: String \\"==\\"
									right: Number 1
								}
								then: Statements [
									Call {
										name: String \\"SetDestructableAnimation\\"
										args: Args [
											Name \\"d\\"
											String \\"death third\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"QueueDestructableAnimation\\"
										args: Args [
											Name \\"d\\"
											String \\"stand third\\"
										]
										statement: Boolean true
									}
								]
								elses: Array [
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"oldHeight\\"
											operator: String \\"==\\"
											right: Number 2
										}
										statements: Statements [
											Call {
												name: String \\"SetDestructableAnimation\\"
												args: Args [
													Name \\"d\\"
													String \\"death second\\"
												]
												statement: Boolean true
											}
											Call {
												name: String \\"QueueDestructableAnimation\\"
												args: Args [
													Name \\"d\\"
													String \\"stand third\\"
												]
												statement: Boolean true
											}
										]
									}
									Else {
										statements: Statements [
											Comment \\" Unrecognized old height - snap to new height.\\"
											Call {
												name: String \\"SetDestructableAnimation\\"
												args: Args [
													Name \\"d\\"
													String \\"stand third\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized new height - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Grab the unit and throw his own coords in his face, forcing him to push\\"
	Comment \\" and shove until he finds a spot where noone will bother him.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"NudgeUnitsInRectEnum\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"nudgee\\"
				value: Call {
					name: String \\"GetEnumUnit\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetUnitPosition\\"
				args: Args [
					Name \\"nudgee\\"
					Call {
						name: String \\"GetUnitX\\"
						args: Args [
							Name \\"nudgee\\"
						]
					}
					Call {
						name: String \\"GetUnitY\\"
						args: Args [
							Name \\"nudgee\\"
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"NudgeItemsInRectEnum\\"
		statements: Statements [
			Variable {
				type: String \\"item\\"
				name: String \\"nudgee\\"
				value: Call {
					name: String \\"GetEnumItem\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetItemPosition\\"
				args: Args [
					Name \\"nudgee\\"
					Call {
						name: String \\"GetItemX\\"
						args: Args [
							Name \\"nudgee\\"
						]
					}
					Call {
						name: String \\"GetItemY\\"
						args: Args [
							Name \\"nudgee\\"
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Nudge the items and units within a given rect ever so gently, so as to\\"
	Comment \\" encourage them to find locations where they can peacefully coexist with\\"
	Comment \\" pathing restrictions and live happy, fruitful lives.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"NudgeObjectsInRect\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"nudgeArea\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsInRect\\"
				args: Args [
					Name \\"g\\"
					Name \\"nudgeArea\\"
					Null
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					FuncRef String \\"N\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"g\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"EnumItemsInRect\\"
				args: Args [
					Name \\"nudgeArea\\"
					Null
					FuncRef String \\"N\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"NearbyElevatorExistsEnum\\"
		statements: Statements [
			Variable {
				type: String \\"destructable\\"
				name: String \\"d\\"
				value: Call {
					name: String \\"GetEnumDestructable\\"
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"dType\\"
				value: Call {
					name: String \\"GetDestructableTypeId\\"
					args: Args [
						Name \\"d\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"dType\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_CODE01\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"dType\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_CODE02\\"
					}
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_elevatorNeighbor\\"
						value: Name \\"d\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"NearbyElevatorExists\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"findThreshold\\"
				value: Number 32
			}
			Variable {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			EmptyLine {}
			Comment \\" If another elevator is overlapping this one, ignore the wall.\\"
			JASSSet {
				name: String \\"r\\"
				value: Call {
					name: String \\"Rect\\"
					args: Args [
						BinaryOp {
							left: Name \\"x\\"
							operator: String \\"-\\"
							right: Name \\"findThreshold\\"
						}
						BinaryOp {
							left: Name \\"y\\"
							operator: String \\"-\\"
							right: Name \\"findThreshold\\"
						}
						BinaryOp {
							left: Name \\"x\\"
							operator: String \\"+\\"
							right: Name \\"findThreshold\\"
						}
						BinaryOp {
							left: Name \\"y\\"
							operator: String \\"+\\"
							right: Name \\"findThreshold\\"
						}
					]
				}
			}
			JASSSet {
				name: String \\"bj_elevatorNeighbor\\"
			}
			Call {
				name: String \\"EnumDestructablesInRect\\"
				args: Args [
					Name \\"r\\"
					Null
					FuncRef String \\"N\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"RemoveRect\\"
				args: Args [
					Name \\"r\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Return BinaryOp {
				left: Name \\"bj_elevatorNeighbor\\"
				operator: String \\"!=\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FindElevatorWallBlockerEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_elevatorWallBlocker\\"
				value: Call {
					name: String \\"GetEnumDestructable\\"
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" This toggles pathing on or off for one wall of an elevator by killing\\"
	Comment \\" or reviving a pathing blocker at the appropriate location (and creating\\"
	Comment \\" the pathing blocker in the first place, if it does not yet exist).\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ChangeElevatorWallBlocker\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"facing\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"open\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"destructable\\"
				name: String \\"blocker\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"findThreshold\\"
				value: Number 32
			}
			Variable {
				type: String \\"real\\"
				name: String \\"nudgeLength\\"
				value: BinaryOp {
					left: Number 4.25
					operator: String \\"*\\"
					right: Name \\"bj_CELLWIDTH\\"
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"nudgeWidth\\"
				value: BinaryOp {
					left: Number 1.25
					operator: String \\"*\\"
					right: Name \\"bj_CELLWIDTH\\"
				}
			}
			Variable {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			EmptyLine {}
			Comment \\" Search for the pathing blocker within the general area.\\"
			JASSSet {
				name: String \\"r\\"
				value: Call {
					name: String \\"Rect\\"
					args: Args [
						BinaryOp {
							left: Name \\"x\\"
							operator: String \\"-\\"
							right: Name \\"findThreshold\\"
						}
						BinaryOp {
							left: Name \\"y\\"
							operator: String \\"-\\"
							right: Name \\"findThreshold\\"
						}
						BinaryOp {
							left: Name \\"x\\"
							operator: String \\"+\\"
							right: Name \\"findThreshold\\"
						}
						BinaryOp {
							left: Name \\"y\\"
							operator: String \\"+\\"
							right: Name \\"findThreshold\\"
						}
					]
				}
			}
			JASSSet {
				name: String \\"bj_elevatorWallBlocker\\"
			}
			Call {
				name: String \\"EnumDestructablesInRect\\"
				args: Args [
					Name \\"r\\"
					Null
					FuncRef String \\"F\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"RemoveRect\\"
				args: Args [
					Name \\"r\\"
				]
				statement: Boolean true
			}
			JASSSet {
				name: String \\"blocker\\"
				value: Name \\"bj_elevatorWallBlocker\\"
			}
			EmptyLine {}
			Comment \\" Ensure that the blocker exists.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"blocker\\"
					operator: String \\"==\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"blocker\\"
						value: Call {
							name: String \\"CreateDeadDestructable\\"
							args: Args [
								Name \\"bj_ELEVATOR_BLOCKER_CODE\\"
								Name \\"x\\"
								Name \\"y\\"
								Name \\"facing\\"
								Number 1
								Number 0
							]
						}
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetDestructableTypeId\\"
								args: Args [
									Name \\"blocker\\"
								]
							}
							operator: String \\"!=\\"
							right: Name \\"bj_ELEVATOR_BLOCKER_CODE\\"
						}
						statements: Statements [
							Comment \\" If a different destructible exists in the blocker's spot, ignore\\"
							Comment \\" the request.  (Two destructibles cannot occupy the same location\\"
							Comment \\" on the map, so we cannot create an elevator blocker here.)\\"
							Return __undefined__
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"open\\"
				then: Statements [
					Comment \\" Ensure that the blocker is dead.\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetDestructableLife\\"
								args: Args [
									Name \\"blocker\\"
								]
							}
							operator: String \\">\\"
							right: Number 0
						}
						then: Statements [
							Call {
								name: String \\"KillDestructable\\"
								args: Args [
									Name \\"blocker\\"
								]
								statement: Boolean true
							}
						]
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Comment \\" Ensure that the blocker is alive.\\"
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetDestructableLife\\"
										args: Args [
											Name \\"blocker\\"
										]
									}
									operator: String \\"<=\\"
									right: Number 0
								}
								then: Statements [
									Call {
										name: String \\"DestructableRestoreLife\\"
										args: Args [
											Name \\"blocker\\"
											Call {
												name: String \\"GetDestructableMaxLife\\"
												args: Args [
													Name \\"blocker\\"
												]
											}
											Boolean false
										]
										statement: Boolean true
									}
								]
							}
							EmptyLine {}
							Comment \\" Nudge any objects standing in the blocker's way.\\"
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"facing\\"
									operator: String \\"==\\"
									right: Number 0
								}
								then: Statements [
									JASSSet {
										name: String \\"r\\"
										value: Call {
											name: String \\"Rect\\"
											args: Args [
												BinaryOp {
													left: Name \\"x\\"
													operator: String \\"-\\"
													right: BinaryOp {
														left: Name \\"nudgeWidth\\"
														operator: String \\"/\\"
														right: Number 2
													}
												}
												BinaryOp {
													left: Name \\"y\\"
													operator: String \\"-\\"
													right: BinaryOp {
														left: Name \\"nudgeLength\\"
														operator: String \\"/\\"
														right: Number 2
													}
												}
												BinaryOp {
													left: Name \\"x\\"
													operator: String \\"+\\"
													right: BinaryOp {
														left: Name \\"nudgeWidth\\"
														operator: String \\"/\\"
														right: Number 2
													}
												}
												BinaryOp {
													left: Name \\"y\\"
													operator: String \\"+\\"
													right: BinaryOp {
														left: Name \\"nudgeLength\\"
														operator: String \\"/\\"
														right: Number 2
													}
												}
											]
										}
									}
									Call {
										name: String \\"NudgeObjectsInRect\\"
										args: Args [
											Name \\"r\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"RemoveRect\\"
										args: Args [
											Name \\"r\\"
										]
										statement: Boolean true
									}
								]
								elses: Array [
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"facing\\"
											operator: String \\"==\\"
											right: Number 90
										}
										statements: Statements [
											JASSSet {
												name: String \\"r\\"
												value: Call {
													name: String \\"Rect\\"
													args: Args [
														BinaryOp {
															left: Name \\"x\\"
															operator: String \\"-\\"
															right: BinaryOp {
																left: Name \\"nudgeLength\\"
																operator: String \\"/\\"
																right: Number 2
															}
														}
														BinaryOp {
															left: Name \\"y\\"
															operator: String \\"-\\"
															right: BinaryOp {
																left: Name \\"nudgeWidth\\"
																operator: String \\"/\\"
																right: Number 2
															}
														}
														BinaryOp {
															left: Name \\"x\\"
															operator: String \\"+\\"
															right: BinaryOp {
																left: Name \\"nudgeLength\\"
																operator: String \\"/\\"
																right: Number 2
															}
														}
														BinaryOp {
															left: Name \\"y\\"
															operator: String \\"+\\"
															right: BinaryOp {
																left: Name \\"nudgeWidth\\"
																operator: String \\"/\\"
																right: Number 2
															}
														}
													]
												}
											}
											Call {
												name: String \\"NudgeObjectsInRect\\"
												args: Args [
													Name \\"r\\"
												]
												statement: Boolean true
											}
											Call {
												name: String \\"RemoveRect\\"
												args: Args [
													Name \\"r\\"
												]
												statement: Boolean true
											}
										]
									}
									Else {
										statements: Statements [
											Comment \\" Unrecognized blocker angle - don't nudge anything.\\"
										]
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ChangeElevatorWalls\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"open\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"walls\\"
			}
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"x\\"
				value: Call {
					name: String \\"GetDestructableX\\"
					args: Args [
						Name \\"d\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"y\\"
				value: Call {
					name: String \\"GetDestructableY\\"
					args: Args [
						Name \\"d\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"distToBlocker\\"
				value: Number 192
			}
			Variable {
				type: String \\"real\\"
				name: String \\"distToNeighbor\\"
				value: Number 256
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"walls\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_WALL_TYPE_ALL\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"walls\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_WALL_TYPE_EAST\\"
					}
				}
				then: Statements [
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"NearbyElevatorExists\\"
								args: Args [
									BinaryOp {
										left: Name \\"x\\"
										operator: String \\"+\\"
										right: Name \\"distToNeighbor\\"
									}
									Name \\"y\\"
								]
							}
						}
						then: Statements [
							Call {
								name: String \\"ChangeElevatorWallBlocker\\"
								args: Args [
									BinaryOp {
										left: Name \\"x\\"
										operator: String \\"+\\"
										right: Name \\"distToBlocker\\"
									}
									Name \\"y\\"
									Number 0
									Name \\"open\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"walls\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_WALL_TYPE_ALL\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"walls\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_WALL_TYPE_NORTH\\"
					}
				}
				then: Statements [
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"NearbyElevatorExists\\"
								args: Args [
									Name \\"x\\"
									BinaryOp {
										left: Name \\"y\\"
										operator: String \\"+\\"
										right: Name \\"distToNeighbor\\"
									}
								]
							}
						}
						then: Statements [
							Call {
								name: String \\"ChangeElevatorWallBlocker\\"
								args: Args [
									Name \\"x\\"
									BinaryOp {
										left: Name \\"y\\"
										operator: String \\"+\\"
										right: Name \\"distToBlocker\\"
									}
									Number 90
									Name \\"open\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"walls\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_WALL_TYPE_ALL\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"walls\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_WALL_TYPE_SOUTH\\"
					}
				}
				then: Statements [
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"NearbyElevatorExists\\"
								args: Args [
									Name \\"x\\"
									BinaryOp {
										left: Name \\"y\\"
										operator: String \\"-\\"
										right: Name \\"distToNeighbor\\"
									}
								]
							}
						}
						then: Statements [
							Call {
								name: String \\"ChangeElevatorWallBlocker\\"
								args: Args [
									Name \\"x\\"
									BinaryOp {
										left: Name \\"y\\"
										operator: String \\"-\\"
										right: Name \\"distToBlocker\\"
									}
									Number 90
									Name \\"open\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"walls\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_WALL_TYPE_ALL\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"walls\\"
						operator: String \\"==\\"
						right: Name \\"bj_ELEVATOR_WALL_TYPE_WEST\\"
					}
				}
				then: Statements [
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"NearbyElevatorExists\\"
								args: Args [
									BinaryOp {
										left: Name \\"x\\"
										operator: String \\"-\\"
										right: Name \\"distToNeighbor\\"
									}
									Name \\"y\\"
								]
							}
						}
						then: Statements [
							Call {
								name: String \\"ChangeElevatorWallBlocker\\"
								args: Args [
									BinaryOp {
										left: Name \\"x\\"
										operator: String \\"-\\"
										right: Name \\"distToBlocker\\"
									}
									Name \\"y\\"
									Number 0
									Name \\"open\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Neutral Building Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WaygateActivateBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"activate\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"waygate\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"WaygateActivate\\"
				args: Args [
					Name \\"waygate\\"
					Name \\"activate\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WaygateIsActiveBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"waygate\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"WaygateIsActive\\"
				args: Args [
					Name \\"waygate\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WaygateSetDestinationLocBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"waygate\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"WaygateSetDestination\\"
				args: Args [
					Name \\"waygate\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WaygateGetDestinationLocBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"waygate\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Return Call {
				name: String \\"Location\\"
				args: Args [
					Call {
						name: String \\"WaygateGetDestinationX\\"
						args: Args [
							Name \\"waygate\\"
						]
					}
					Call {
						name: String \\"WaygateGetDestinationY\\"
						args: Args [
							Name \\"waygate\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnitSetUsesAltIconBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"UnitSetUsesAltIcon\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  UI Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ForceUIKeyBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ForceUIKey\\"
						args: Args [
							Name \\"key\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ForceUICancelBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ForceUICancel\\"
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Group and Force Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ForGroupBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
			Param {
				type: String \\"code\\"
				name: String \\"callback\\"
			}
		]
		statements: Statements [
			Comment \\" If the user wants the group destroyed, remember that fact and clear\\"
			Comment \\" the flag, in case it is used again in the callback.\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"wantDestroy\\"
				value: Name \\"bj_wantDestroyGroup\\"
			}
			JASSSet {
				name: String \\"bj_wantDestroyGroup\\"
				value: Boolean false
			}
			EmptyLine {}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"whichGroup\\"
					Name \\"callback\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If the user wants the group destroyed, do so now.\\"
			IfThenElse {
				condition: Parens Name \\"wantDestroy\\"
				then: Statements [
					Call {
						name: String \\"DestroyGroup\\"
						args: Args [
							Name \\"whichGroup\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupAddUnitSimple\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"GroupAddUnit\\"
				args: Args [
					Name \\"whichGroup\\"
					Name \\"whichUnit\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupRemoveUnitSimple\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"GroupRemoveUnit\\"
				args: Args [
					Name \\"whichGroup\\"
					Name \\"whichUnit\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupAddGroupEnum\\"
		statements: Statements [
			Call {
				name: String \\"GroupAddUnit\\"
				args: Args [
					Name \\"bj_groupAddGroupDest\\"
					Call {
						name: String \\"GetEnumUnit\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupAddGroup\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"sourceGroup\\"
			}
			Param {
				type: String \\"group\\"
				name: String \\"destGroup\\"
			}
		]
		statements: Statements [
			Comment \\" If the user wants the group destroyed, remember that fact and clear\\"
			Comment \\" the flag, in case it is used again in the callback.\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"wantDestroy\\"
				value: Name \\"bj_wantDestroyGroup\\"
			}
			JASSSet {
				name: String \\"bj_wantDestroyGroup\\"
				value: Boolean false
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_groupAddGroupDest\\"
				value: Name \\"destGroup\\"
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"sourceGroup\\"
					FuncRef String \\"G\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If the user wants the group destroyed, do so now.\\"
			IfThenElse {
				condition: Parens Name \\"wantDestroy\\"
				then: Statements [
					Call {
						name: String \\"DestroyGroup\\"
						args: Args [
							Name \\"sourceGroup\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupRemoveGroupEnum\\"
		statements: Statements [
			Call {
				name: String \\"GroupRemoveUnit\\"
				args: Args [
					Name \\"bj_groupRemoveGroupDest\\"
					Call {
						name: String \\"GetEnumUnit\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupRemoveGroup\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"sourceGroup\\"
			}
			Param {
				type: String \\"group\\"
				name: String \\"destGroup\\"
			}
		]
		statements: Statements [
			Comment \\" If the user wants the group destroyed, remember that fact and clear\\"
			Comment \\" the flag, in case it is used again in the callback.\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"wantDestroy\\"
				value: Name \\"bj_wantDestroyGroup\\"
			}
			JASSSet {
				name: String \\"bj_wantDestroyGroup\\"
				value: Boolean false
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_groupRemoveGroupDest\\"
				value: Name \\"destGroup\\"
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"sourceGroup\\"
					FuncRef String \\"G\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If the user wants the group destroyed, do so now.\\"
			IfThenElse {
				condition: Parens Name \\"wantDestroy\\"
				then: Statements [
					Call {
						name: String \\"DestroyGroup\\"
						args: Args [
							Name \\"sourceGroup\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ForceAddPlayerSimple\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ForceAddPlayer\\"
				args: Args [
					Name \\"whichForce\\"
					Name \\"whichPlayer\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ForceRemovePlayerSimple\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ForceRemovePlayer\\"
				args: Args [
					Name \\"whichForce\\"
					Name \\"whichPlayer\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Consider each unit, one at a time, keeping a \\\\\\"current pick\\\\\\".   Once all units\\"
	Comment \\" are considered, this \\\\\\"current pick\\\\\\" will be the resulting random unit.\\"
	Comment \\"\\"
	Comment \\" The chance of picking a given unit over the \\\\\\"current pick\\\\\\" is 1/N, where N is\\"
	Comment \\" the number of units considered thusfar (including the current consideration).\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GroupPickRandomUnitEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_groupRandomConsidered\\"
				value: BinaryOp {
					left: Name \\"bj_groupRandomConsidered\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetRandomInt\\"
						args: Args [
							Number 1
							Name \\"bj_groupRandomConsidered\\"
						]
					}
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_groupRandomCurrentPick\\"
						value: Call {
							name: String \\"GetEnumUnit\\"
						}
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Picks a random unit from a group.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GroupPickRandomUnit\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			Comment \\" If the user wants the group destroyed, remember that fact and clear\\"
			Comment \\" the flag, in case it is used again in the callback.\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"wantDestroy\\"
				value: Name \\"bj_wantDestroyGroup\\"
			}
			JASSSet {
				name: String \\"bj_wantDestroyGroup\\"
				value: Boolean false
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_groupRandomConsidered\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"bj_groupRandomCurrentPick\\"
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"whichGroup\\"
					FuncRef String \\"G\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If the user wants the group destroyed, do so now.\\"
			IfThenElse {
				condition: Parens Name \\"wantDestroy\\"
				then: Statements [
					Call {
						name: String \\"DestroyGroup\\"
						args: Args [
							Name \\"whichGroup\\"
						]
						statement: Boolean true
					}
				]
			}
			Return Name \\"bj_groupRandomCurrentPick\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" See GroupPickRandomUnitEnum for the details of this algorithm.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ForcePickRandomPlayerEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_forceRandomConsidered\\"
				value: BinaryOp {
					left: Name \\"bj_forceRandomConsidered\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetRandomInt\\"
						args: Args [
							Number 1
							Name \\"bj_forceRandomConsidered\\"
						]
					}
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_forceRandomCurrentPick\\"
						value: Call {
							name: String \\"GetEnumPlayer\\"
						}
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Picks a random player from a force.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ForcePickRandomPlayer\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
		]
		returns: String \\"player\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_forceRandomConsidered\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"bj_forceRandomCurrentPick\\"
			}
			Call {
				name: String \\"ForForce\\"
				args: Args [
					Name \\"whichForce\\"
					FuncRef String \\"F\\"
				]
				statement: Boolean true
			}
			Return Name \\"bj_forceRandomCurrentPick\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EnumUnitsSelected\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolexpr\\"
				name: String \\"enumFilter\\"
			}
			Param {
				type: String \\"code\\"
				name: String \\"enumAction\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"SyncSelections\\"
				statement: Boolean true
			}
			Call {
				name: String \\"GroupEnumUnitsSelected\\"
				args: Args [
					Name \\"g\\"
					Name \\"whichPlayer\\"
					Name \\"enumFilter\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyBoolExpr\\"
				args: Args [
					Name \\"enumFilter\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					Name \\"enumAction\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"g\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsInRectMatching\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"boolexpr\\"
				name: String \\"filter\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsInRect\\"
				args: Args [
					Name \\"g\\"
					Name \\"r\\"
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyBoolExpr\\"
				args: Args [
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Return Name \\"g\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsInRectAll\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Return Call {
				name: String \\"GetUnitsInRectMatching\\"
				args: Args [
					Name \\"r\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsInRectOfPlayerFilter\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetOwningPlayer\\"
					args: Args [
						Call {
							name: String \\"GetFilterUnit\\"
						}
					]
				}
				operator: String \\"==\\"
				right: Name \\"bj_groupEnumOwningPlayer\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsInRectOfPlayer\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			JASSSet {
				name: String \\"bj_groupEnumOwningPlayer\\"
				value: Name \\"whichPlayer\\"
			}
			Call {
				name: String \\"GroupEnumUnitsInRect\\"
				args: Args [
					Name \\"g\\"
					Name \\"r\\"
					Name \\"filterGetUnitsInRectOfPlayer\\"
				]
				statement: Boolean true
			}
			Return Name \\"g\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsInRangeOfLocMatching\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"whichLocation\\"
			}
			Param {
				type: String \\"boolexpr\\"
				name: String \\"filter\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsInRangeOfLoc\\"
				args: Args [
					Name \\"g\\"
					Name \\"whichLocation\\"
					Name \\"radius\\"
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyBoolExpr\\"
				args: Args [
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Return Name \\"g\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsInRangeOfLocAll\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"whichLocation\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Return Call {
				name: String \\"GetUnitsInRangeOfLocMatching\\"
				args: Args [
					Name \\"radius\\"
					Name \\"whichLocation\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsOfTypeIdAllFilter\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetUnitTypeId\\"
					args: Args [
						Call {
							name: String \\"GetFilterUnit\\"
						}
					]
				}
				operator: String \\"==\\"
				right: Name \\"bj_groupEnumTypeId\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsOfTypeIdAll\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitid\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"result\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"bj_groupEnumTypeId\\"
						value: Name \\"unitid\\"
					}
					Call {
						name: String \\"GroupClear\\"
						args: Args [
							Name \\"g\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"GroupEnumUnitsOfPlayer\\"
						args: Args [
							Name \\"g\\"
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							Name \\"filterGetUnitsOfTypeIdAll\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"GroupAddGroup\\"
						args: Args [
							Name \\"g\\"
							Name \\"result\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYER_SLOTS\\"
					}
				]
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"g\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Return Name \\"result\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsOfPlayerMatching\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolexpr\\"
				name: String \\"filter\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsOfPlayer\\"
				args: Args [
					Name \\"g\\"
					Name \\"whichPlayer\\"
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyBoolExpr\\"
				args: Args [
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Return Name \\"g\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsOfPlayerAll\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Return Call {
				name: String \\"GetUnitsOfPlayerMatching\\"
				args: Args [
					Name \\"whichPlayer\\"
					Null
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsOfPlayerAndTypeIdFilter\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetUnitTypeId\\"
					args: Args [
						Call {
							name: String \\"GetFilterUnit\\"
						}
					]
				}
				operator: String \\"==\\"
				right: Name \\"bj_groupEnumTypeId\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsOfPlayerAndTypeId\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitid\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			JASSSet {
				name: String \\"bj_groupEnumTypeId\\"
				value: Name \\"unitid\\"
			}
			Call {
				name: String \\"GroupEnumUnitsOfPlayer\\"
				args: Args [
					Name \\"g\\"
					Name \\"whichPlayer\\"
					Name \\"filterGetUnitsOfPlayerAndTypeId\\"
				]
				statement: Boolean true
			}
			Return Name \\"g\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetUnitsSelectedAll\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"SyncSelections\\"
				statement: Boolean true
			}
			Call {
				name: String \\"GroupEnumUnitsSelected\\"
				args: Args [
					Name \\"g\\"
					Name \\"whichPlayer\\"
					Null
				]
				statement: Boolean true
			}
			Return Name \\"g\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetForceOfPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"force\\"
		statements: Statements [
			Variable {
				type: String \\"force\\"
				name: String \\"f\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Call {
				name: String \\"ForceAddPlayer\\"
				args: Args [
					Name \\"f\\"
					Name \\"whichPlayer\\"
				]
				statement: Boolean true
			}
			Return Name \\"f\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayersAll\\"
		returns: String \\"force\\"
		statements: Statements [
			Return Name \\"bj_FORCE_ALL_PLAYERS\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayersByMapControl\\"
		params: Params [
			Param {
				type: String \\"mapcontrol\\"
				name: String \\"whichControl\\"
			}
		]
		returns: String \\"force\\"
		statements: Statements [
			Variable {
				type: String \\"force\\"
				name: String \\"f\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					IfThenElse {
						condition: BinaryOp {
							left: Call {
								name: String \\"GetPlayerController\\"
								args: Args [
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"whichControl\\"
						}
						then: Statements [
							Call {
								name: String \\"ForceAddPlayer\\"
								args: Args [
									Name \\"f\\"
									Name \\"indexPlayer\\"
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYER_SLOTS\\"
					}
				]
			}
			EmptyLine {}
			Return Name \\"f\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayersAllies\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"force\\"
		statements: Statements [
			Variable {
				type: String \\"force\\"
				name: String \\"f\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Call {
				name: String \\"ForceEnumAllies\\"
				args: Args [
					Name \\"f\\"
					Name \\"whichPlayer\\"
					Null
				]
				statement: Boolean true
			}
			Return Name \\"f\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayersEnemies\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"force\\"
		statements: Statements [
			Variable {
				type: String \\"force\\"
				name: String \\"f\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Call {
				name: String \\"ForceEnumEnemies\\"
				args: Args [
					Name \\"f\\"
					Name \\"whichPlayer\\"
					Null
				]
				statement: Boolean true
			}
			Return Name \\"f\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayersMatching\\"
		params: Params [
			Param {
				type: String \\"boolexpr\\"
				name: String \\"filter\\"
			}
		]
		returns: String \\"force\\"
		statements: Statements [
			Variable {
				type: String \\"force\\"
				name: String \\"f\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Call {
				name: String \\"ForceEnumPlayers\\"
				args: Args [
					Name \\"f\\"
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyBoolExpr\\"
				args: Args [
					Name \\"filter\\"
				]
				statement: Boolean true
			}
			Return Name \\"f\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CountUnitsInGroupEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_groupCountUnits\\"
				value: BinaryOp {
					left: Name \\"bj_groupCountUnits\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CountUnitsInGroup\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"g\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Comment \\" If the user wants the group destroyed, remember that fact and clear\\"
			Comment \\" the flag, in case it is used again in the callback.\\"
			Variable {
				type: String \\"boolean\\"
				name: String \\"wantDestroy\\"
				value: Name \\"bj_wantDestroyGroup\\"
			}
			JASSSet {
				name: String \\"bj_wantDestroyGroup\\"
				value: Boolean false
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_groupCountUnits\\"
				value: Number 0
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					FuncRef String \\"C\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If the user wants the group destroyed, do so now.\\"
			IfThenElse {
				condition: Parens Name \\"wantDestroy\\"
				then: Statements [
					Call {
						name: String \\"DestroyGroup\\"
						args: Args [
							Name \\"g\\"
						]
						statement: Boolean true
					}
				]
			}
			Return Name \\"bj_groupCountUnits\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CountPlayersInForceEnum\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_forceCountPlayers\\"
				value: BinaryOp {
					left: Name \\"bj_forceCountPlayers\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CountPlayersInForceBJ\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"f\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_forceCountPlayers\\"
				value: Number 0
			}
			Call {
				name: String \\"ForForce\\"
				args: Args [
					Name \\"f\\"
					FuncRef String \\"C\\"
				]
				statement: Boolean true
			}
			Return Name \\"bj_forceCountPlayers\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\"*\\\\n@bug Not an even distribution. See <http://www.hiveworkshop.com/forums/l-715/g-275344/>.\\\\n\\"
	EmptyLine {}
	JASSFunction {
		name: String \\"GetRandomSubGroupEnum\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_randomSubGroupWant\\"
					operator: String \\">\\"
					right: Number 0
				}
				then: Statements [
					IfThenElse {
						condition: BinaryOp {
							left: Parens BinaryOp {
								left: Name \\"bj_randomSubGroupWant\\"
								operator: String \\">=\\"
								right: Name \\"bj_randomSubGroupTotal\\"
							}
							operator: String \\"or\\"
							right: Parens BinaryOp {
								left: Call {
									name: String \\"GetRandomReal\\"
									args: Args [
										Number 0
										Number 1
									]
								}
								operator: String \\"<\\"
								right: Name \\"bj_randomSubGroupChance\\"
							}
						}
						then: Statements [
							Comment \\" We either need every remaining unit, or the unit passed its chance check.\\"
							Call {
								name: String \\"GroupAddUnit\\"
								args: Args [
									Name \\"bj_randomSubGroupGroup\\"
									Call {
										name: String \\"GetEnumUnit\\"
									}
								]
								statement: Boolean true
							}
							JASSSet {
								name: String \\"bj_randomSubGroupWant\\"
								value: BinaryOp {
									left: Name \\"bj_randomSubGroupWant\\"
									operator: String \\"-\\"
									right: Number 1
								}
							}
						]
					}
				]
			}
			JASSSet {
				name: String \\"bj_randomSubGroupTotal\\"
				value: BinaryOp {
					left: Name \\"bj_randomSubGroupTotal\\"
					operator: String \\"-\\"
					right: Number 1
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\"*\\\\n@bug Not an even distribution. See <http://www.hiveworkshop.com/forums/l-715/g-275344/>.\\\\n\\"
	EmptyLine {}
	JASSFunction {
		name: String \\"GetRandomSubGroup\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"count\\"
			}
			Param {
				type: String \\"group\\"
				name: String \\"sourceGroup\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_randomSubGroupGroup\\"
				value: Name \\"g\\"
			}
			JASSSet {
				name: String \\"bj_randomSubGroupWant\\"
				value: Name \\"count\\"
			}
			JASSSet {
				name: String \\"bj_randomSubGroupTotal\\"
				value: Call {
					name: String \\"CountUnitsInGroup\\"
					args: Args [
						Name \\"sourceGroup\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: BinaryOp {
						left: Name \\"bj_randomSubGroupWant\\"
						operator: String \\"<=\\"
						right: Number 0
					}
					operator: String \\"or\\"
					right: BinaryOp {
						left: Name \\"bj_randomSubGroupTotal\\"
						operator: String \\"<=\\"
						right: Number 0
					}
				}
				then: Statements [
					Return Name \\"g\\"
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_randomSubGroupChance\\"
				value: BinaryOp {
					left: Call {
						name: String \\"I2R\\"
						args: Args [
							Name \\"bj_randomSubGroupWant\\"
						]
					}
					operator: String \\"/\\"
					right: Call {
						name: String \\"I2R\\"
						args: Args [
							Name \\"bj_randomSubGroupTotal\\"
						]
					}
				}
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"sourceGroup\\"
					FuncRef String \\"G\\"
				]
				statement: Boolean true
			}
			Return Name \\"g\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LivingPlayerUnitsOfTypeIdFilter\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"filterUnit\\"
				value: Call {
					name: String \\"GetFilterUnit\\"
				}
			}
			Return BinaryOp {
				left: Call {
					name: String \\"IsUnitAliveBJ\\"
					args: Args [
						Name \\"filterUnit\\"
					]
				}
				operator: String \\"and\\"
				right: BinaryOp {
					left: Call {
						name: String \\"GetUnitTypeId\\"
						args: Args [
							Name \\"filterUnit\\"
						]
					}
					operator: String \\"==\\"
					right: Name \\"bj_livingPlayerUnitsTypeId\\"
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CountLivingPlayerUnitsOfTypeId\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"matchedCount\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			JASSSet {
				name: String \\"bj_livingPlayerUnitsTypeId\\"
				value: Name \\"unitId\\"
			}
			Call {
				name: String \\"GroupEnumUnitsOfPlayer\\"
				args: Args [
					Name \\"g\\"
					Name \\"whichPlayer\\"
					Name \\"filterLivingPlayerUnitsOfTypeId\\"
				]
				statement: Boolean true
			}
			JASSSet {
				name: String \\"matchedCount\\"
				value: Call {
					name: String \\"CountUnitsInGroup\\"
					args: Args [
						Name \\"g\\"
					]
				}
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"g\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Return Name \\"matchedCount\\"
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Animation Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ResetUnitAnimation\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitAnimation\\"
				args: Args [
					Name \\"whichUnit\\"
					String \\"stand\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitTimeScalePercent\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percentScale\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitTimeScale\\"
				args: Args [
					Name \\"whichUnit\\"
					BinaryOp {
						left: Name \\"percentScale\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitScalePercent\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percentScaleX\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percentScaleY\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percentScaleZ\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitScale\\"
				args: Args [
					Name \\"whichUnit\\"
					BinaryOp {
						left: Name \\"percentScaleX\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
					BinaryOp {
						left: Name \\"percentScaleY\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
					BinaryOp {
						left: Name \\"percentScaleZ\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" This version differs from the common.j interface in that the alpha value\\"
	Comment \\" is reversed so as to be displayed as transparency, and all four parameters\\"
	Comment \\" are treated as percentages rather than bytes.\\"
	Comment \\"\\"
	Comment \\"*\\\\nSets the unit's color to the color defined by (red,green,blue,alpha).\\\\n\\\\n@param whichUnit The unit which will be colored.\\\\n@param red An integer from 0-100 determining the amount of red color.\\\\n@param green An integer from 0-100 determining the amount of green color.\\\\n@param blue An integer from 0-100 determining the amount of blue color.\\\\n@param alpha An integer from 0-100 determining the transparency. A value of 100 is complete transparency while a value of 0 is complete opacity.\\\\n\\"
	EmptyLine {}
	JASSFunction {
		name: String \\"SetUnitVertexColorBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitVertexColor\\"
				args: Args [
					Name \\"whichUnit\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\"*\\\\nAdds a blinking circle around the unit with the color (red,green,blue,alpha).\\\\nThe circle blinks twice. This function is commonly used for cinematic modes\\\\nand is seen in \`TransmissionFromUnitWithNameBJ\`.\\\\n\\\\n@note The size of the indicator depends on a unit's selection size. To modify\\\\nthis, you must edit the object editor field of the unit listed as \\\\\\"Art - Selection Size\\\\\\".\\\\n\\\\n@param whichUnit The unit the indicator will be applied to.\\\\n@param red An integer from 0-100 determining the amount of red color in the indicator.\\\\n@param green An integer from 0-100 determining the amount of green color in the indicator.\\\\n@param blue An integer from 0-100 determining the amount of blue color in the indicator.\\\\n@param alpha An integer from 0-100 determining the transparency of the indicator. A value of 100 is complete transparency while a value of 0 is complete opacity.\\\\n\\"
	EmptyLine {}
	JASSFunction {
		name: String \\"UnitAddIndicatorBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AddIndicator\\"
				args: Args [
					Name \\"whichUnit\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\"*\\\\nAdds a blinking circle around the destructable with the color (red,green,blue,alpha).\\\\nThe circle blinks twice. This function is commonly used for cinematic modes\\\\nand is seen in \`TransmissionFromUnitWithNameBJ\`.\\\\n\\\\n@note The size of the indicator depends on a destructable's selection size. To modify\\\\nthis, you must edit the object editor field of the destructable listed as \\\\\\"Art - Selection Size\\\\\\".\\\\n\\\\n@param whichUnit The destructable the indicator will be applied to.\\\\n@param red An integer from 0-100 determining the amount of red color in the indicator.\\\\n@param green An integer from 0-100 determining the amount of green color in the indicator.\\\\n@param blue An integer from 0-100 determining the amount of blue color in the indicator.\\\\n@param alpha An integer from 0-100 determining the transparency of the indicator. A value of 100 is complete transparency while a value of 0 is complete opacity.\\\\n\\"
	EmptyLine {}
	JASSFunction {
		name: String \\"DestructableAddIndicatorBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"whichDestructable\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AddIndicator\\"
				args: Args [
					Name \\"whichDestructable\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\"*\\\\nAdds a blinking circle around the item with the color (red,green,blue,alpha).\\\\nThe circle blinks twice. This function is commonly used for cinematic modes\\\\nand is seen in \`TransmissionFromUnitWithNameBJ\`.\\\\n\\\\n@note The size of the indicator depends on a item's selection size. To modify\\\\nthis, you must edit the object editor field of the item listed as \\\\\\"Art - Selection Size\\\\\\".\\\\n\\\\n@param whichUnit The item the indicator will be applied to.\\\\n@param red An integer from 0-100 determining the amount of red color in the indicator.\\\\n@param green An integer from 0-100 determining the amount of green color in the indicator.\\\\n@param blue An integer from 0-100 determining the amount of blue color in the indicator.\\\\n@param alpha An integer from 0-100 determining the transparency of the indicator. A value of 100 is complete transparency while a value of 0 is complete opacity.\\\\n\\"
	EmptyLine {}
	JASSFunction {
		name: String \\"ItemAddIndicatorBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AddIndicator\\"
				args: Args [
					Name \\"whichItem\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Sets a unit's facing to point directly at a location.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetUnitFacingToFaceLocTimed\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"target\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"location\\"
				name: String \\"unitLoc\\"
				value: Call {
					name: String \\"GetUnitLoc\\"
					args: Args [
						Name \\"whichUnit\\"
					]
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetUnitFacingTimed\\"
				args: Args [
					Name \\"whichUnit\\"
					Call {
						name: String \\"AngleBetweenPoints\\"
						args: Args [
							Name \\"unitLoc\\"
							Name \\"target\\"
						]
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"RemoveLocation\\"
				args: Args [
					Name \\"unitLoc\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Sets a unit's facing to point directly at another unit.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetUnitFacingToFaceUnitTimed\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"target\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"location\\"
				name: String \\"unitLoc\\"
				value: Call {
					name: String \\"GetUnitLoc\\"
					args: Args [
						Name \\"target\\"
					]
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetUnitFacingToFaceLocTimed\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"unitLoc\\"
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"RemoveLocation\\"
				args: Args [
					Name \\"unitLoc\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QueueUnitAnimationBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"whichAnimation\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QueueUnitAnimation\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"whichAnimation\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDestructableAnimationBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"whichAnimation\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetDestructableAnimation\\"
				args: Args [
					Name \\"d\\"
					Name \\"whichAnimation\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QueueDestructableAnimationBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"whichAnimation\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QueueDestructableAnimation\\"
				args: Args [
					Name \\"d\\"
					Name \\"whichAnimation\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDestAnimationSpeedPercent\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"d\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"percentScale\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetDestructableAnimationSpeed\\"
				args: Args [
					Name \\"d\\"
					BinaryOp {
						left: Name \\"percentScale\\"
						operator: String \\"*\\"
						right: Number 0.01
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Dialog Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DialogDisplayBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"dialog\\"
				name: String \\"whichDialog\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DialogDisplay\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"whichDialog\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DialogSetMessageBJ\\"
		params: Params [
			Param {
				type: String \\"dialog\\"
				name: String \\"whichDialog\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DialogSetMessage\\"
				args: Args [
					Name \\"whichDialog\\"
					Name \\"message\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DialogAddButtonBJ\\"
		params: Params [
			Param {
				type: String \\"dialog\\"
				name: String \\"whichDialog\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"buttonText\\"
			}
		]
		returns: String \\"button\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedButton\\"
				value: Call {
					name: String \\"DialogAddButton\\"
					args: Args [
						Name \\"whichDialog\\"
						Name \\"buttonText\\"
						Number 0
					]
				}
			}
			Return Name \\"bj_lastCreatedButton\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DialogAddButtonWithHotkeyBJ\\"
		params: Params [
			Param {
				type: String \\"dialog\\"
				name: String \\"whichDialog\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"buttonText\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"hotkey\\"
			}
		]
		returns: String \\"button\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedButton\\"
				value: Call {
					name: String \\"DialogAddButton\\"
					args: Args [
						Name \\"whichDialog\\"
						Name \\"buttonText\\"
						Name \\"hotkey\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedButton\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DialogClearBJ\\"
		params: Params [
			Param {
				type: String \\"dialog\\"
				name: String \\"whichDialog\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DialogClear\\"
				args: Args [
					Name \\"whichDialog\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedButtonBJ\\"
		returns: String \\"button\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedButton\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetClickedButtonBJ\\"
		returns: String \\"button\\"
		statements: Statements [
			Return Call {
				name: String \\"GetClickedButton\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetClickedDialogBJ\\"
		returns: String \\"dialog\\"
		statements: Statements [
			Return Call {
				name: String \\"GetClickedDialog\\"
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Alliance Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerAllianceBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"sourcePlayer\\"
			}
			Param {
				type: String \\"alliancetype\\"
				name: String \\"whichAllianceSetting\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"otherPlayer\\"
			}
		]
		statements: Statements [
			Comment \\" Prevent players from attempting to ally with themselves.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"sourcePlayer\\"
					operator: String \\"==\\"
					right: Name \\"otherPlayer\\"
				}
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"whichAllianceSetting\\"
					Name \\"value\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Set all flags used by the in-game \\\\\\"Ally\\\\\\" checkbox.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetPlayerAllianceStateAllyBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"sourcePlayer\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"otherPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"ALLIANCE_PASSIVE\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"ALLIANCE_HELP_REQUEST\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"ALLIANCE_HELP_RESPONSE\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"ALLIANCE_SHARED_XP\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"ALLIANCE_SHARED_SPELLS\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Set all flags used by the in-game \\\\\\"Shared Vision\\\\\\" checkbox.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetPlayerAllianceStateVisionBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"sourcePlayer\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"otherPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"ALLIANCE_SHARED_VISION\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Set all flags used by the in-game \\\\\\"Shared Units\\\\\\" checkbox.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetPlayerAllianceStateControlBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"sourcePlayer\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"otherPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"ALLIANCE_SHARED_CONTROL\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Set all flags used by the in-game \\\\\\"Shared Units\\\\\\" checkbox with the Full\\"
	Comment \\" Shared Unit Control feature enabled.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetPlayerAllianceStateFullControlBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"sourcePlayer\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"otherPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"ALLIANCE_SHARED_ADVANCED_CONTROL\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerAllianceStateBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"sourcePlayer\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"otherPlayer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"allianceState\\"
			}
		]
		statements: Statements [
			Comment \\" Prevent players from attempting to ally with themselves.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"sourcePlayer\\"
					operator: String \\"==\\"
					right: Name \\"otherPlayer\\"
				}
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"allianceState\\"
					operator: String \\"==\\"
					right: Name \\"bj_ALLIANCE_UNALLIED\\"
				}
				then: Statements [
					Call {
						name: String \\"SetPlayerAllianceStateAllyBJ\\"
						args: Args [
							Name \\"sourcePlayer\\"
							Name \\"otherPlayer\\"
							Boolean false
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetPlayerAllianceStateVisionBJ\\"
						args: Args [
							Name \\"sourcePlayer\\"
							Name \\"otherPlayer\\"
							Boolean false
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetPlayerAllianceStateControlBJ\\"
						args: Args [
							Name \\"sourcePlayer\\"
							Name \\"otherPlayer\\"
							Boolean false
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetPlayerAllianceStateFullControlBJ\\"
						args: Args [
							Name \\"sourcePlayer\\"
							Name \\"otherPlayer\\"
							Boolean false
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: BinaryOp {
							left: Name \\"allianceState\\"
							operator: String \\"==\\"
							right: Name \\"bj_ALLIANCE_UNALLIED_VISION\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetPlayerAllianceStateAllyBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateVisionBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateFullControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: BinaryOp {
							left: Name \\"allianceState\\"
							operator: String \\"==\\"
							right: Name \\"bj_ALLIANCE_ALLIED\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetPlayerAllianceStateAllyBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateVisionBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateFullControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: BinaryOp {
							left: Name \\"allianceState\\"
							operator: String \\"==\\"
							right: Name \\"bj_ALLIANCE_ALLIED_VISION\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetPlayerAllianceStateAllyBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateVisionBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateFullControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: BinaryOp {
							left: Name \\"allianceState\\"
							operator: String \\"==\\"
							right: Name \\"bj_ALLIANCE_ALLIED_UNITS\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetPlayerAllianceStateAllyBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateVisionBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateFullControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: BinaryOp {
							left: Name \\"allianceState\\"
							operator: String \\"==\\"
							right: Name \\"bj_ALLIANCE_ALLIED_ADVUNITS\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetPlayerAllianceStateAllyBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateVisionBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateFullControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: BinaryOp {
							left: Name \\"allianceState\\"
							operator: String \\"==\\"
							right: Name \\"bj_ALLIANCE_NEUTRAL\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetPlayerAllianceStateAllyBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateVisionBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateFullControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAlliance\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Name \\"ALLIANCE_PASSIVE\\"
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: BinaryOp {
							left: Name \\"allianceState\\"
							operator: String \\"==\\"
							right: Name \\"bj_ALLIANCE_NEUTRAL_VISION\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetPlayerAllianceStateAllyBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateVisionBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAllianceStateFullControlBJ\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAlliance\\"
								args: Args [
									Name \\"sourcePlayer\\"
									Name \\"otherPlayer\\"
									Name \\"ALLIANCE_PASSIVE\\"
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized alliance state - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Set the alliance states for an entire force towards another force.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetForceAllianceStateBJ\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"sourceForce\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"targetForce\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"allianceState\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"sourceIndex\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"targetIndex\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"sourceIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: BinaryOp {
								left: Name \\"sourceForce\\"
								operator: String \\"==\\"
								right: Name \\"bj_FORCE_ALL_PLAYERS\\"
							}
							operator: String \\"or\\"
							right: Call {
								name: String \\"IsPlayerInForce\\"
								args: Args [
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"sourceIndex\\"
										]
									}
									Name \\"sourceForce\\"
								]
							}
						}
						then: Statements [
							JASSSet {
								name: String \\"targetIndex\\"
								value: Number 0
							}
							Loop {
								statements: Statements [
									IfThenElse {
										condition: Parens BinaryOp {
											left: BinaryOp {
												left: Name \\"targetForce\\"
												operator: String \\"==\\"
												right: Name \\"bj_FORCE_ALL_PLAYERS\\"
											}
											operator: String \\"or\\"
											right: Call {
												name: String \\"IsPlayerInForce\\"
												args: Args [
													Call {
														name: String \\"Player\\"
														args: Args [
															Name \\"targetIndex\\"
														]
													}
													Name \\"targetForce\\"
												]
											}
										}
										then: Statements [
											Call {
												name: String \\"SetPlayerAllianceStateBJ\\"
												args: Args [
													Call {
														name: String \\"Player\\"
														args: Args [
															Name \\"sourceIndex\\"
														]
													}
													Call {
														name: String \\"Player\\"
														args: Args [
															Name \\"targetIndex\\"
														]
													}
													Name \\"allianceState\\"
												]
												statement: Boolean true
											}
										]
									}
									EmptyLine {}
									JASSSet {
										name: String \\"targetIndex\\"
										value: BinaryOp {
											left: Name \\"targetIndex\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"targetIndex\\"
										operator: String \\"==\\"
										right: Name \\"bj_MAX_PLAYER_SLOTS\\"
									}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"sourceIndex\\"
						value: BinaryOp {
							left: Name \\"sourceIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"sourceIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYER_SLOTS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Test to see if two players are co-allied (allied with each other).\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"PlayersAreCoAllied\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"playerA\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"playerB\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Comment \\" Players are considered to be allied with themselves.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"playerA\\"
					operator: String \\"==\\"
					right: Name \\"playerB\\"
				}
				then: Statements [
					Return Boolean true
				]
			}
			EmptyLine {}
			Comment \\" Co-allies are both allied with each other.\\"
			IfThenElse {
				condition: Call {
					name: String \\"GetPlayerAlliance\\"
					args: Args [
						Name \\"playerA\\"
						Name \\"playerB\\"
						Name \\"ALLIANCE_PASSIVE\\"
					]
				}
				then: Statements [
					IfThenElse {
						condition: Call {
							name: String \\"GetPlayerAlliance\\"
							args: Args [
								Name \\"playerB\\"
								Name \\"playerA\\"
								Name \\"ALLIANCE_PASSIVE\\"
							]
						}
						then: Statements [
							Return Boolean true
						]
					}
				]
			}
			Return Boolean false
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Force (whichPlayer) AI player to share vision and advanced unit control \\"
	Comment \\" with all AI players of its allies.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ShareEverythingWithTeamAI\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"PlayersAreCoAllied\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"and\\"
							right: BinaryOp {
								left: Name \\"whichPlayer\\"
								operator: String \\"!=\\"
								right: Name \\"indexPlayer\\"
							}
						}
						then: Statements [
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetPlayerController\\"
										args: Args [
											Name \\"indexPlayer\\"
										]
									}
									operator: String \\"==\\"
									right: Name \\"MAP_CONTROL_COMPUTER\\"
								}
								then: Statements [
									Call {
										name: String \\"SetPlayerAlliance\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"indexPlayer\\"
											Name \\"ALLIANCE_SHARED_VISION\\"
											Boolean true
										]
										statement: Boolean true
									}
									Call {
										name: String \\"SetPlayerAlliance\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"indexPlayer\\"
											Name \\"ALLIANCE_SHARED_CONTROL\\"
											Boolean true
										]
										statement: Boolean true
									}
									Call {
										name: String \\"SetPlayerAlliance\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"indexPlayer\\"
											Name \\"ALLIANCE_SHARED_ADVANCED_CONTROL\\"
											Boolean true
										]
										statement: Boolean true
									}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Force (whichPlayer) to share vision and advanced unit control with all of his/her allies.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"ShareEverythingWithTeam\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"PlayersAreCoAllied\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"and\\"
							right: BinaryOp {
								left: Name \\"whichPlayer\\"
								operator: String \\"!=\\"
								right: Name \\"indexPlayer\\"
							}
						}
						then: Statements [
							Call {
								name: String \\"SetPlayerAlliance\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"indexPlayer\\"
									Name \\"ALLIANCE_SHARED_VISION\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAlliance\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"indexPlayer\\"
									Name \\"ALLIANCE_SHARED_CONTROL\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAlliance\\"
								args: Args [
									Name \\"indexPlayer\\"
									Name \\"whichPlayer\\"
									Name \\"ALLIANCE_SHARED_CONTROL\\"
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerAlliance\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"indexPlayer\\"
									Name \\"ALLIANCE_SHARED_ADVANCED_CONTROL\\"
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Creates a 'Neutral Victim' player slot.  This slot is passive towards all\\"
	Comment \\" other players, but all other players are aggressive towards him/her.\\"
	Comment \\" \\"
	JASSFunction {
		name: String \\"ConfigureNeutralVictim\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"neutralVictim\\"
				value: Call {
					name: String \\"Player\\"
					args: Args [
						Name \\"bj_PLAYER_NEUTRAL_VICTIM\\"
					]
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					EmptyLine {}
					Call {
						name: String \\"SetPlayerAlliance\\"
						args: Args [
							Name \\"neutralVictim\\"
							Name \\"indexPlayer\\"
							Name \\"ALLIANCE_PASSIVE\\"
							Boolean true
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetPlayerAlliance\\"
						args: Args [
							Name \\"indexPlayer\\"
							Name \\"neutralVictim\\"
							Name \\"ALLIANCE_PASSIVE\\"
							Boolean false
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Neutral Victim and Neutral Aggressive should not fight each other.\\"
			JASSSet {
				name: String \\"indexPlayer\\"
				value: Call {
					name: String \\"Player\\"
					args: Args [
						Name \\"PLAYER_NEUTRAL_AGGRESSIVE\\"
					]
				}
			}
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"neutralVictim\\"
					Name \\"indexPlayer\\"
					Name \\"ALLIANCE_PASSIVE\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetPlayerAlliance\\"
				args: Args [
					Name \\"indexPlayer\\"
					Name \\"neutralVictim\\"
					Name \\"ALLIANCE_PASSIVE\\"
					Boolean true
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Neutral Victim does not give bounties.\\"
			Call {
				name: String \\"SetPlayerState\\"
				args: Args [
					Name \\"neutralVictim\\"
					Name \\"PLAYER_STATE_GIVES_BOUNTY\\"
					Number 0
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MakeUnitsPassiveForPlayerEnum\\"
		statements: Statements [
			Call {
				name: String \\"SetUnitOwner\\"
				args: Args [
					Call {
						name: String \\"GetEnumUnit\\"
					}
					Call {
						name: String \\"Player\\"
						args: Args [
							Name \\"bj_PLAYER_NEUTRAL_VICTIM\\"
						]
					}
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Change ownership for every unit of (whichPlayer)'s team to neutral passive.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MakeUnitsPassiveForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"playerUnits\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"CachePlayerHeroData\\"
				args: Args [
					Name \\"whichPlayer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"GroupEnumUnitsOfPlayer\\"
				args: Args [
					Name \\"playerUnits\\"
					Name \\"whichPlayer\\"
					Null
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"playerUnits\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"playerUnits\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Change ownership for every unit of (whichPlayer)'s team to neutral passive.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MakeUnitsPassiveForTeam\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					IfThenElse {
						condition: Call {
							name: String \\"PlayersAreCoAllied\\"
							args: Args [
								Name \\"whichPlayer\\"
								Name \\"indexPlayer\\"
							]
						}
						then: Statements [
							Call {
								name: String \\"MakeUnitsPassiveForPlayer\\"
								args: Args [
									Name \\"indexPlayer\\"
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Determine whether or not victory/defeat is disabled via cheat codes.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"AllowVictoryDefeat\\"
		params: Params [
			Param {
				type: String \\"playergameresult\\"
				name: String \\"gameResult\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"gameResult\\"
					operator: String \\"==\\"
					right: Name \\"PLAYER_GAME_RESULT_VICTORY\\"
				}
				then: Statements [
					Return UnaryOp {
						operator: String \\"not\\"
						expr: Call {
							name: String \\"IsNoVictoryCheat\\"
						}
					}
				]
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"gameResult\\"
					operator: String \\"==\\"
					right: Name \\"PLAYER_GAME_RESULT_DEFEAT\\"
				}
				then: Statements [
					Return UnaryOp {
						operator: String \\"not\\"
						expr: Call {
							name: String \\"IsNoDefeatCheat\\"
						}
					}
				]
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"gameResult\\"
					operator: String \\"==\\"
					right: Name \\"PLAYER_GAME_RESULT_NEUTRAL\\"
				}
				then: Statements [
					Return BinaryOp {
						left: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"IsNoVictoryCheat\\"
							}
						}
						operator: String \\"and\\"
						right: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"IsNoDefeatCheat\\"
							}
						}
					}
				]
			}
			Return Boolean true
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EndGameBJ\\"
		statements: Statements [
			Call {
				name: String \\"EndGame\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeVictoryDialogBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"leftGame\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"trigger\\"
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Variable {
				type: String \\"dialog\\"
				name: String \\"d\\"
				value: Call {
					name: String \\"DialogCreate\\"
				}
			}
			Variable {
				type: String \\"string\\"
				name: String \\"formatString\\"
			}
			EmptyLine {}
			Comment \\" Display \\\\\\"player was victorious\\\\\\" or \\\\\\"player has left the game\\\\\\" message\\"
			IfThenElse {
				condition: Parens Name \\"leftGame\\"
				then: Statements [
					JASSSet {
						name: String \\"formatString\\"
						value: Call {
							name: String \\"GetLocalizedString\\"
							args: Args [
								String \\"PLAYER_LEFT_GAME\\"
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"formatString\\"
								value: Call {
									name: String \\"GetLocalizedString\\"
									args: Args [
										String \\"PLAYER_VICTORIOUS\\"
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"DisplayTimedTextFromPlayer\\"
				args: Args [
					Name \\"whichPlayer\\"
					Number 0
					Number 0
					Number 60
					Name \\"formatString\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"DialogSetMessage\\"
				args: Args [
					Name \\"d\\"
					Call {
						name: String \\"GetLocalizedString\\"
						args: Args [
							String \\"GAMEOVER_VICTORY_MSG\\"
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DialogAddButton\\"
				args: Args [
					Name \\"d\\"
					Call {
						name: String \\"GetLocalizedString\\"
						args: Args [
							String \\"GAMEOVER_CONTINUE_GAME\\"
						]
					}
					Call {
						name: String \\"GetLocalizedHotkey\\"
						args: Args [
							String \\"GAMEOVER_CONTINUE_GAME\\"
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			JASSSet {
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterDialogButtonEvent\\"
				args: Args [
					Name \\"t\\"
					Call {
						name: String \\"DialogAddQuitButton\\"
						args: Args [
							Name \\"d\\"
							Boolean true
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"GAMEOVER_QUIT_GAME\\"
								]
							}
							Call {
								name: String \\"GetLocalizedHotkey\\"
								args: Args [
									String \\"GAMEOVER_QUIT_GAME\\"
								]
							}
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"DialogDisplay\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"d\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"StartSoundForPlayerBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"bj_victoryDialogSound\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeDefeatDialogBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"leftGame\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"trigger\\"
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Variable {
				type: String \\"dialog\\"
				name: String \\"d\\"
				value: Call {
					name: String \\"DialogCreate\\"
				}
			}
			Variable {
				type: String \\"string\\"
				name: String \\"formatString\\"
			}
			EmptyLine {}
			Comment \\" Display \\\\\\"player was defeated\\\\\\" or \\\\\\"player has left the game\\\\\\" message\\"
			IfThenElse {
				condition: Parens Name \\"leftGame\\"
				then: Statements [
					JASSSet {
						name: String \\"formatString\\"
						value: Call {
							name: String \\"GetLocalizedString\\"
							args: Args [
								String \\"PLAYER_LEFT_GAME\\"
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"formatString\\"
								value: Call {
									name: String \\"GetLocalizedString\\"
									args: Args [
										String \\"PLAYER_DEFEATED\\"
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"DisplayTimedTextFromPlayer\\"
				args: Args [
					Name \\"whichPlayer\\"
					Number 0
					Number 0
					Number 60
					Name \\"formatString\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"DialogSetMessage\\"
				args: Args [
					Name \\"d\\"
					Call {
						name: String \\"GetLocalizedString\\"
						args: Args [
							String \\"GAMEOVER_DEFEAT_MSG\\"
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Only show the continue button if the game is not over and observers on death are allowed\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: UnaryOp {
						operator: String \\"not\\"
						expr: Name \\"bj_meleeGameOver\\"
					}
					operator: String \\"and\\"
					right: Call {
						name: String \\"IsMapFlagSet\\"
						args: Args [
							Name \\"MAP_OBSERVERS_ON_DEATH\\"
						]
					}
				}
				then: Statements [
					Call {
						name: String \\"DialogAddButton\\"
						args: Args [
							Name \\"d\\"
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"GAMEOVER_CONTINUE_OBSERVING\\"
								]
							}
							Call {
								name: String \\"GetLocalizedHotkey\\"
								args: Args [
									String \\"GAMEOVER_CONTINUE_OBSERVING\\"
								]
							}
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterDialogButtonEvent\\"
				args: Args [
					Name \\"t\\"
					Call {
						name: String \\"DialogAddQuitButton\\"
						args: Args [
							Name \\"d\\"
							Boolean true
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"GAMEOVER_QUIT_GAME\\"
								]
							}
							Call {
								name: String \\"GetLocalizedHotkey\\"
								args: Args [
									String \\"GAMEOVER_QUIT_GAME\\"
								]
							}
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"DialogDisplay\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"d\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"StartSoundForPlayerBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"bj_defeatDialogSound\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GameOverDialogBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"leftGame\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"trigger\\"
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Variable {
				type: String \\"dialog\\"
				name: String \\"d\\"
				value: Call {
					name: String \\"DialogCreate\\"
				}
			}
			Variable {
				type: String \\"string\\"
				name: String \\"s\\"
			}
			EmptyLine {}
			Comment \\" Display \\\\\\"player left the game\\\\\\" message\\"
			Call {
				name: String \\"DisplayTimedTextFromPlayer\\"
				args: Args [
					Name \\"whichPlayer\\"
					Number 0
					Number 0
					Number 60
					Call {
						name: String \\"GetLocalizedString\\"
						args: Args [
							String \\"PLAYER_LEFT_GAME\\"
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetIntegerGameState\\"
						args: Args [
							Name \\"GAME_STATE_DISCONNECTED\\"
						]
					}
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"s\\"
						value: Call {
							name: String \\"GetLocalizedString\\"
							args: Args [
								String \\"GAMEOVER_DISCONNECTED\\"
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"s\\"
								value: Call {
									name: String \\"GetLocalizedString\\"
									args: Args [
										String \\"GAMEOVER_GAME_OVER\\"
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"DialogSetMessage\\"
				args: Args [
					Name \\"d\\"
					Name \\"s\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			JASSSet {
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterDialogButtonEvent\\"
				args: Args [
					Name \\"t\\"
					Call {
						name: String \\"DialogAddQuitButton\\"
						args: Args [
							Name \\"d\\"
							Boolean true
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"GAMEOVER_OK\\"
								]
							}
							Call {
								name: String \\"GetLocalizedHotkey\\"
								args: Args [
									String \\"GAMEOVER_OK\\"
								]
							}
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"DialogDisplay\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"d\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"StartSoundForPlayerBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"bj_defeatDialogSound\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RemovePlayerPreserveUnitsBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"playergameresult\\"
				name: String \\"gameResult\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"leftGame\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Call {
					name: String \\"AllowVictoryDefeat\\"
					args: Args [
						Name \\"gameResult\\"
					]
				}
				then: Statements [
					EmptyLine {}
					Call {
						name: String \\"RemovePlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"gameResult\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"gameResult\\"
							operator: String \\"==\\"
							right: Name \\"PLAYER_GAME_RESULT_VICTORY\\"
						}
						then: Statements [
							Call {
								name: String \\"MeleeVictoryDialogBJ\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"leftGame\\"
								]
								statement: Boolean true
							}
							Return __undefined__
						]
						elses: Array [
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"gameResult\\"
									operator: String \\"==\\"
									right: Name \\"PLAYER_GAME_RESULT_DEFEAT\\"
								}
								statements: Statements [
									Call {
										name: String \\"MeleeDefeatDialogBJ\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"leftGame\\"
										]
										statement: Boolean true
									}
								]
							}
							Else {
								statements: Statements [
									Call {
										name: String \\"GameOverDialogBJ\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"leftGame\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
					EmptyLine {}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomVictoryOkBJ\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"bj_isSinglePlayer\\"
				then: Statements [
					Call {
						name: String \\"PauseGame\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
					Comment \\" Bump the difficulty back up to the default.\\"
					Call {
						name: String \\"SetGameDifficulty\\"
						args: Args [
							Call {
								name: String \\"GetDefaultDifficulty\\"
							}
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_changeLevelMapName\\"
					operator: String \\"==\\"
				}
				then: Statements [
					Call {
						name: String \\"EndGame\\"
						args: Args [
							Name \\"bj_changeLevelShowScores\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"ChangeLevel\\"
								args: Args [
									Name \\"bj_changeLevelMapName\\"
									Name \\"bj_changeLevelShowScores\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomVictoryQuitBJ\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"bj_isSinglePlayer\\"
				then: Statements [
					Call {
						name: String \\"PauseGame\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
					Comment \\" Bump the difficulty back up to the default.\\"
					Call {
						name: String \\"SetGameDifficulty\\"
						args: Args [
							Call {
								name: String \\"GetDefaultDifficulty\\"
							}
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"EndGame\\"
				args: Args [
					Name \\"bj_changeLevelShowScores\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomVictoryDialogBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"trigger\\"
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Variable {
				type: String \\"dialog\\"
				name: String \\"d\\"
				value: Call {
					name: String \\"DialogCreate\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"DialogSetMessage\\"
				args: Args [
					Name \\"d\\"
					Call {
						name: String \\"GetLocalizedString\\"
						args: Args [
							String \\"GAMEOVER_VICTORY_MSG\\"
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			JASSSet {
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterDialogButtonEvent\\"
				args: Args [
					Name \\"t\\"
					Call {
						name: String \\"DialogAddButton\\"
						args: Args [
							Name \\"d\\"
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"GAMEOVER_CONTINUE\\"
								]
							}
							Call {
								name: String \\"GetLocalizedHotkey\\"
								args: Args [
									String \\"GAMEOVER_CONTINUE\\"
								]
							}
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"t\\"
					FuncRef String \\"C\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			JASSSet {
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterDialogButtonEvent\\"
				args: Args [
					Name \\"t\\"
					Call {
						name: String \\"DialogAddButton\\"
						args: Args [
							Name \\"d\\"
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"GAMEOVER_QUIT_MISSION\\"
								]
							}
							Call {
								name: String \\"GetLocalizedHotkey\\"
								args: Args [
									String \\"GAMEOVER_QUIT_MISSION\\"
								]
							}
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"t\\"
					FuncRef String \\"C\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Call {
						name: String \\"EnableUserControl\\"
						args: Args [
							Boolean true
						]
						statement: Boolean true
					}
					IfThenElse {
						condition: Name \\"bj_isSinglePlayer\\"
						then: Statements [
							Call {
								name: String \\"PauseGame\\"
								args: Args [
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					Call {
						name: String \\"EnableUserUI\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"DialogDisplay\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"d\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolumeForPlayerBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"SOUND_VOLUMEGROUP_UI\\"
					Number 1
				]
				statement: Boolean true
			}
			Call {
				name: String \\"StartSoundForPlayerBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"bj_victoryDialogSound\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomVictorySkipBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					IfThenElse {
						condition: Name \\"bj_isSinglePlayer\\"
						then: Statements [
							Comment \\" Bump the difficulty back up to the default.\\"
							Call {
								name: String \\"SetGameDifficulty\\"
								args: Args [
									Call {
										name: String \\"GetDefaultDifficulty\\"
									}
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"bj_changeLevelMapName\\"
							operator: String \\"==\\"
						}
						then: Statements [
							Call {
								name: String \\"EndGame\\"
								args: Args [
									Name \\"bj_changeLevelShowScores\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									Call {
										name: String \\"ChangeLevel\\"
										args: Args [
											Name \\"bj_changeLevelMapName\\"
											Name \\"bj_changeLevelShowScores\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomVictoryBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showDialog\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showScores\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Call {
					name: String \\"AllowVictoryDefeat\\"
					args: Args [
						Name \\"PLAYER_GAME_RESULT_VICTORY\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"RemovePlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"PLAYER_GAME_RESULT_VICTORY\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					IfThenElse {
						condition: UnaryOp {
							operator: String \\"not\\"
							expr: Name \\"bj_isSinglePlayer\\"
						}
						then: Statements [
							Call {
								name: String \\"DisplayTimedTextFromPlayer\\"
								args: Args [
									Name \\"whichPlayer\\"
									Number 0
									Number 0
									Number 60
									Call {
										name: String \\"GetLocalizedString\\"
										args: Args [
											String \\"PLAYER_VICTORIOUS\\"
										]
									}
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					Comment \\" UI only needs to be displayed to users.\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerController\\"
								args: Args [
									Name \\"whichPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"MAP_CONTROL_USER\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"bj_changeLevelShowScores\\"
								value: Name \\"showScores\\"
							}
							IfThenElse {
								condition: Name \\"showDialog\\"
								then: Statements [
									Call {
										name: String \\"CustomVictoryDialogBJ\\"
										args: Args [
											Name \\"whichPlayer\\"
										]
										statement: Boolean true
									}
								]
								elses: Array [
									Else {
										statements: Statements [
											Call {
												name: String \\"CustomVictorySkipBJ\\"
												args: Args [
													Name \\"whichPlayer\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomDefeatRestartBJ\\"
		statements: Statements [
			Call {
				name: String \\"PauseGame\\"
				args: Args [
					Boolean false
				]
				statement: Boolean true
			}
			Call {
				name: String \\"RestartGame\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomDefeatReduceDifficultyBJ\\"
		statements: Statements [
			Variable {
				type: String \\"gamedifficulty\\"
				name: String \\"diff\\"
				value: Call {
					name: String \\"GetGameDifficulty\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"PauseGame\\"
				args: Args [
					Boolean false
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Knock the difficulty down, if possible.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"diff\\"
					operator: String \\"==\\"
					right: Name \\"MAP_DIFFICULTY_EASY\\"
				}
				then: Statements [
					Comment \\" Sorry, but it doesn't get any easier than this.\\"
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"diff\\"
							operator: String \\"==\\"
							right: Name \\"MAP_DIFFICULTY_NORMAL\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetGameDifficulty\\"
								args: Args [
									Name \\"MAP_DIFFICULTY_EASY\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"diff\\"
							operator: String \\"==\\"
							right: Name \\"MAP_DIFFICULTY_HARD\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetGameDifficulty\\"
								args: Args [
									Name \\"MAP_DIFFICULTY_NORMAL\\"
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized difficulty\\"
						]
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"RestartGame\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomDefeatLoadBJ\\"
		statements: Statements [
			Call {
				name: String \\"PauseGame\\"
				args: Args [
					Boolean false
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DisplayLoadDialog\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomDefeatQuitBJ\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"bj_isSinglePlayer\\"
				then: Statements [
					Call {
						name: String \\"PauseGame\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Comment \\" Bump the difficulty back up to the default.\\"
			Call {
				name: String \\"SetGameDifficulty\\"
				args: Args [
					Call {
						name: String \\"GetDefaultDifficulty\\"
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"EndGame\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomDefeatDialogBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"trigger\\"
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Variable {
				type: String \\"dialog\\"
				name: String \\"d\\"
				value: Call {
					name: String \\"DialogCreate\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"DialogSetMessage\\"
				args: Args [
					Name \\"d\\"
					Name \\"message\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			IfThenElse {
				condition: Name \\"bj_isSinglePlayer\\"
				then: Statements [
					JASSSet {
						name: String \\"t\\"
						value: Call {
							name: String \\"CreateTrigger\\"
						}
					}
					Call {
						name: String \\"TriggerRegisterDialogButtonEvent\\"
						args: Args [
							Name \\"t\\"
							Call {
								name: String \\"DialogAddButton\\"
								args: Args [
									Name \\"d\\"
									Call {
										name: String \\"GetLocalizedString\\"
										args: Args [
											String \\"GAMEOVER_RESTART\\"
										]
									}
									Call {
										name: String \\"GetLocalizedHotkey\\"
										args: Args [
											String \\"GAMEOVER_RESTART\\"
										]
									}
								]
							}
						]
						statement: Boolean true
					}
					Call {
						name: String \\"TriggerAddAction\\"
						args: Args [
							Name \\"t\\"
							FuncRef String \\"C\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetGameDifficulty\\"
							}
							operator: String \\"!=\\"
							right: Name \\"MAP_DIFFICULTY_EASY\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"t\\"
								value: Call {
									name: String \\"CreateTrigger\\"
								}
							}
							Call {
								name: String \\"TriggerRegisterDialogButtonEvent\\"
								args: Args [
									Name \\"t\\"
									Call {
										name: String \\"DialogAddButton\\"
										args: Args [
											Name \\"d\\"
											Call {
												name: String \\"GetLocalizedString\\"
												args: Args [
													String \\"GAMEOVER_REDUCE_DIFFICULTY\\"
												]
											}
											Call {
												name: String \\"GetLocalizedHotkey\\"
												args: Args [
													String \\"GAMEOVER_REDUCE_DIFFICULTY\\"
												]
											}
										]
									}
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerAddAction\\"
								args: Args [
									Name \\"t\\"
									FuncRef String \\"C\\"
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"t\\"
						value: Call {
							name: String \\"CreateTrigger\\"
						}
					}
					Call {
						name: String \\"TriggerRegisterDialogButtonEvent\\"
						args: Args [
							Name \\"t\\"
							Call {
								name: String \\"DialogAddButton\\"
								args: Args [
									Name \\"d\\"
									Call {
										name: String \\"GetLocalizedString\\"
										args: Args [
											String \\"GAMEOVER_LOAD\\"
										]
									}
									Call {
										name: String \\"GetLocalizedHotkey\\"
										args: Args [
											String \\"GAMEOVER_LOAD\\"
										]
									}
								]
							}
						]
						statement: Boolean true
					}
					Call {
						name: String \\"TriggerAddAction\\"
						args: Args [
							Name \\"t\\"
							FuncRef String \\"C\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"t\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterDialogButtonEvent\\"
				args: Args [
					Name \\"t\\"
					Call {
						name: String \\"DialogAddButton\\"
						args: Args [
							Name \\"d\\"
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"GAMEOVER_QUIT_MISSION\\"
								]
							}
							Call {
								name: String \\"GetLocalizedHotkey\\"
								args: Args [
									String \\"GAMEOVER_QUIT_MISSION\\"
								]
							}
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"t\\"
					FuncRef String \\"C\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Call {
						name: String \\"EnableUserControl\\"
						args: Args [
							Boolean true
						]
						statement: Boolean true
					}
					IfThenElse {
						condition: Name \\"bj_isSinglePlayer\\"
						then: Statements [
							Call {
								name: String \\"PauseGame\\"
								args: Args [
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
					Call {
						name: String \\"EnableUserUI\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"DialogDisplay\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"d\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"VolumeGroupSetVolumeForPlayerBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"SOUND_VOLUMEGROUP_UI\\"
					Number 1
				]
				statement: Boolean true
			}
			Call {
				name: String \\"StartSoundForPlayerBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"bj_defeatDialogSound\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CustomDefeatBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Call {
					name: String \\"AllowVictoryDefeat\\"
					args: Args [
						Name \\"PLAYER_GAME_RESULT_DEFEAT\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"RemovePlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"PLAYER_GAME_RESULT_DEFEAT\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					IfThenElse {
						condition: UnaryOp {
							operator: String \\"not\\"
							expr: Name \\"bj_isSinglePlayer\\"
						}
						then: Statements [
							Call {
								name: String \\"DisplayTimedTextFromPlayer\\"
								args: Args [
									Name \\"whichPlayer\\"
									Number 0
									Number 0
									Number 60
									Call {
										name: String \\"GetLocalizedString\\"
										args: Args [
											String \\"PLAYER_DEFEATED\\"
										]
									}
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					Comment \\" UI only needs to be displayed to users.\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerController\\"
								args: Args [
									Name \\"whichPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"MAP_CONTROL_USER\\"
						}
						then: Statements [
							Call {
								name: String \\"CustomDefeatDialogBJ\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"message\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetNextLevelBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"nextLevel\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"nextLevel\\"
					operator: String \\"==\\"
					right: String \\"\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_changeLevelMapName\\"
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"bj_changeLevelMapName\\"
								value: Name \\"nextLevel\\"
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerOnScoreScreenBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerOnScoreScreen\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Quest Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateQuestBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"questType\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"title\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"description\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"iconPath\\"
			}
		]
		returns: String \\"quest\\"
		statements: Statements [
			Variable {
				type: String \\"boolean\\"
				name: String \\"required\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"questType\\"
						operator: String \\"==\\"
						right: Name \\"bj_QUESTTYPE_REQ_DISCOVERED\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"questType\\"
						operator: String \\"==\\"
						right: Name \\"bj_QUESTTYPE_REQ_UNDISCOVERED\\"
					}
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"discovered\\"
				value: BinaryOp {
					left: Parens BinaryOp {
						left: Name \\"questType\\"
						operator: String \\"==\\"
						right: Name \\"bj_QUESTTYPE_REQ_DISCOVERED\\"
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Name \\"questType\\"
						operator: String \\"==\\"
						right: Name \\"bj_QUESTTYPE_OPT_DISCOVERED\\"
					}
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_lastCreatedQuest\\"
				value: Call {
					name: String \\"CreateQuest\\"
				}
			}
			Call {
				name: String \\"QuestSetTitle\\"
				args: Args [
					Name \\"bj_lastCreatedQuest\\"
					Name \\"title\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"QuestSetDescription\\"
				args: Args [
					Name \\"bj_lastCreatedQuest\\"
					Name \\"description\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"QuestSetIconPath\\"
				args: Args [
					Name \\"bj_lastCreatedQuest\\"
					Name \\"iconPath\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"QuestSetRequired\\"
				args: Args [
					Name \\"bj_lastCreatedQuest\\"
					Name \\"required\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"QuestSetDiscovered\\"
				args: Args [
					Name \\"bj_lastCreatedQuest\\"
					Name \\"discovered\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"QuestSetCompleted\\"
				args: Args [
					Name \\"bj_lastCreatedQuest\\"
					Boolean false
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastCreatedQuest\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyQuestBJ\\"
		params: Params [
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DestroyQuest\\"
				args: Args [
					Name \\"whichQuest\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestSetEnabledBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"enabled\\"
			}
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QuestSetEnabled\\"
				args: Args [
					Name \\"whichQuest\\"
					Name \\"enabled\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestSetTitleBJ\\"
		params: Params [
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"title\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QuestSetTitle\\"
				args: Args [
					Name \\"whichQuest\\"
					Name \\"title\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestSetDescriptionBJ\\"
		params: Params [
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"description\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QuestSetDescription\\"
				args: Args [
					Name \\"whichQuest\\"
					Name \\"description\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestSetCompletedBJ\\"
		params: Params [
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"completed\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QuestSetCompleted\\"
				args: Args [
					Name \\"whichQuest\\"
					Name \\"completed\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestSetFailedBJ\\"
		params: Params [
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"failed\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QuestSetFailed\\"
				args: Args [
					Name \\"whichQuest\\"
					Name \\"failed\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestSetDiscoveredBJ\\"
		params: Params [
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"discovered\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QuestSetDiscovered\\"
				args: Args [
					Name \\"whichQuest\\"
					Name \\"discovered\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedQuestBJ\\"
		returns: String \\"quest\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedQuest\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateQuestItemBJ\\"
		params: Params [
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"description\\"
			}
		]
		returns: String \\"questitem\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedQuestItem\\"
				value: Call {
					name: String \\"QuestCreateItem\\"
					args: Args [
						Name \\"whichQuest\\"
					]
				}
			}
			Call {
				name: String \\"QuestItemSetDescription\\"
				args: Args [
					Name \\"bj_lastCreatedQuestItem\\"
					Name \\"description\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"QuestItemSetCompleted\\"
				args: Args [
					Name \\"bj_lastCreatedQuestItem\\"
					Boolean false
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastCreatedQuestItem\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestItemSetDescriptionBJ\\"
		params: Params [
			Param {
				type: String \\"questitem\\"
				name: String \\"whichQuestItem\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"description\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QuestItemSetDescription\\"
				args: Args [
					Name \\"whichQuestItem\\"
					Name \\"description\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestItemSetCompletedBJ\\"
		params: Params [
			Param {
				type: String \\"questitem\\"
				name: String \\"whichQuestItem\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"completed\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"QuestItemSetCompleted\\"
				args: Args [
					Name \\"whichQuestItem\\"
					Name \\"completed\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedQuestItemBJ\\"
		returns: String \\"questitem\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedQuestItem\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateDefeatConditionBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"description\\"
			}
		]
		returns: String \\"defeatcondition\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedDefeatCondition\\"
				value: Call {
					name: String \\"CreateDefeatCondition\\"
				}
			}
			Call {
				name: String \\"DefeatConditionSetDescription\\"
				args: Args [
					Name \\"bj_lastCreatedDefeatCondition\\"
					Name \\"description\\"
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastCreatedDefeatCondition\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyDefeatConditionBJ\\"
		params: Params [
			Param {
				type: String \\"defeatcondition\\"
				name: String \\"whichCondition\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DestroyDefeatCondition\\"
				args: Args [
					Name \\"whichCondition\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DefeatConditionSetDescriptionBJ\\"
		params: Params [
			Param {
				type: String \\"defeatcondition\\"
				name: String \\"whichCondition\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"description\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DefeatConditionSetDescription\\"
				args: Args [
					Name \\"whichCondition\\"
					Name \\"description\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedDefeatConditionBJ\\"
		returns: String \\"defeatcondition\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedDefeatCondition\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FlashQuestDialogButtonBJ\\"
		statements: Statements [
			Call {
				name: String \\"FlashQuestDialogButton\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"QuestMessageBJ\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"f\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"messageType\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"f\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"messageType\\"
							operator: String \\"==\\"
							right: Name \\"bj_QUESTMESSAGE_DISCOVERED\\"
						}
						then: Statements [
							Call {
								name: String \\"DisplayTimedTextToPlayer\\"
								args: Args [
									Call {
										name: String \\"GetLocalPlayer\\"
									}
									Number 0
									Number 0
									Name \\"bj_TEXT_DELAY_QUEST\\"
									String \\" \\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"DisplayTimedTextToPlayer\\"
								args: Args [
									Call {
										name: String \\"GetLocalPlayer\\"
									}
									Number 0
									Number 0
									Name \\"bj_TEXT_DELAY_QUEST\\"
									Name \\"message\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"StartSound\\"
								args: Args [
									Name \\"bj_questDiscoveredSound\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"FlashQuestDialogButton\\"
								statement: Boolean true
							}
							EmptyLine {}
						]
						elses: Array [
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_UPDATED\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_QUESTUPDATE\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_QUESTUPDATE\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questUpdatedSound\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"FlashQuestDialogButton\\"
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_COMPLETED\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_QUESTDONE\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_QUESTDONE\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questCompletedSound\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"FlashQuestDialogButton\\"
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_FAILED\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_QUESTFAILED\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_QUESTFAILED\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questFailedSound\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"FlashQuestDialogButton\\"
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_REQUIREMENT\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_QUESTREQUIREMENT\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_MISSIONFAILED\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_MISSIONFAILED\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_MISSIONFAILED\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questFailedSound\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_HINT\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_HINT\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_HINT\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questHintSound\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_ALWAYSHINT\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_ALWAYSHINT\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_ALWAYSHINT\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questHintSound\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_SECRET\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_SECRET\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_SECRET\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questSecretSound\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_UNITACQUIRED\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_UNITACQUIRED\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_UNITACQUIRED\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questHintSound\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_UNITAVAILABLE\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_UNITAVAILABLE\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_UNITAVAILABLE\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questHintSound\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_ITEMACQUIRED\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_ITEMACQUIRED\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_ITEMACQUIRED\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questItemAcquiredSound\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"messageType\\"
									operator: String \\"==\\"
									right: Name \\"bj_QUESTMESSAGE_WARNING\\"
								}
								statements: Statements [
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_WARNING\\"
											String \\" \\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Call {
												name: String \\"GetLocalPlayer\\"
											}
											Number 0
											Number 0
											Name \\"bj_TEXT_DELAY_WARNING\\"
											Name \\"message\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"StartSound\\"
										args: Args [
											Name \\"bj_questWarningSound\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
							Else {
								statements: Statements [
									Comment \\" Unrecognized message type - ignore the request.\\"
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Timer Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StartTimerBJ\\"
		params: Params [
			Param {
				type: String \\"timer\\"
				name: String \\"t\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"periodic\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeout\\"
			}
		]
		returns: String \\"timer\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastStartedTimer\\"
				value: Name \\"t\\"
			}
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Name \\"t\\"
					Name \\"timeout\\"
					Name \\"periodic\\"
					Null
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastStartedTimer\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateTimerBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"periodic\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeout\\"
			}
		]
		returns: String \\"timer\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastStartedTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Name \\"bj_lastStartedTimer\\"
					Name \\"timeout\\"
					Name \\"periodic\\"
					Null
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastStartedTimer\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyTimerBJ\\"
		params: Params [
			Param {
				type: String \\"timer\\"
				name: String \\"whichTimer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DestroyTimer\\"
				args: Args [
					Name \\"whichTimer\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PauseTimerBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"pause\\"
			}
			Param {
				type: String \\"timer\\"
				name: String \\"whichTimer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Name \\"pause\\"
				then: Statements [
					Call {
						name: String \\"PauseTimer\\"
						args: Args [
							Name \\"whichTimer\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"ResumeTimer\\"
								args: Args [
									Name \\"whichTimer\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedTimerBJ\\"
		returns: String \\"timer\\"
		statements: Statements [
			Return Name \\"bj_lastStartedTimer\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateTimerDialogBJ\\"
		params: Params [
			Param {
				type: String \\"timer\\"
				name: String \\"t\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"title\\"
			}
		]
		returns: String \\"timerdialog\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedTimerDialog\\"
				value: Call {
					name: String \\"CreateTimerDialog\\"
					args: Args [
						Name \\"t\\"
					]
				}
			}
			Call {
				name: String \\"TimerDialogSetTitle\\"
				args: Args [
					Name \\"bj_lastCreatedTimerDialog\\"
					Name \\"title\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TimerDialogDisplay\\"
				args: Args [
					Name \\"bj_lastCreatedTimerDialog\\"
					Boolean true
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastCreatedTimerDialog\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyTimerDialogBJ\\"
		params: Params [
			Param {
				type: String \\"timerdialog\\"
				name: String \\"td\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DestroyTimerDialog\\"
				args: Args [
					Name \\"td\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TimerDialogSetTitleBJ\\"
		params: Params [
			Param {
				type: String \\"timerdialog\\"
				name: String \\"td\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"title\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TimerDialogSetTitle\\"
				args: Args [
					Name \\"td\\"
					Name \\"title\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TimerDialogSetTitleColorBJ\\"
		params: Params [
			Param {
				type: String \\"timerdialog\\"
				name: String \\"td\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TimerDialogSetTitleColor\\"
				args: Args [
					Name \\"td\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TimerDialogSetTimeColorBJ\\"
		params: Params [
			Param {
				type: String \\"timerdialog\\"
				name: String \\"td\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TimerDialogSetTimeColor\\"
				args: Args [
					Name \\"td\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TimerDialogSetSpeedBJ\\"
		params: Params [
			Param {
				type: String \\"timerdialog\\"
				name: String \\"td\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"speedMultFactor\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TimerDialogSetSpeed\\"
				args: Args [
					Name \\"td\\"
					Name \\"speedMultFactor\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TimerDialogDisplayForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"show\\"
			}
			Param {
				type: String \\"timerdialog\\"
				name: String \\"td\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"TimerDialogDisplay\\"
						args: Args [
							Name \\"td\\"
							Name \\"show\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TimerDialogDisplayBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"show\\"
			}
			Param {
				type: String \\"timerdialog\\"
				name: String \\"td\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TimerDialogDisplay\\"
				args: Args [
					Name \\"td\\"
					Name \\"show\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedTimerDialogBJ\\"
		returns: String \\"timerdialog\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedTimerDialog\\"
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Leaderboard Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardResizeBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"size\\"
				value: Call {
					name: String \\"LeaderboardGetItemCount\\"
					args: Args [
						Name \\"lb\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"LeaderboardGetLabelText\\"
						args: Args [
							Name \\"lb\\"
						]
					}
					operator: String \\"==\\"
					right: String \\"\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"size\\"
						value: BinaryOp {
							left: Name \\"size\\"
							operator: String \\"-\\"
							right: Number 1
						}
					}
				]
			}
			Call {
				name: String \\"LeaderboardSetSizeByItemCount\\"
				args: Args [
					Name \\"lb\\"
					Name \\"size\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetPlayerItemValueBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"val\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetItemValue\\"
				args: Args [
					Name \\"lb\\"
					Call {
						name: String \\"LeaderboardGetPlayerIndex\\"
						args: Args [
							Name \\"lb\\"
							Name \\"whichPlayer\\"
						]
					}
					Name \\"val\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetPlayerItemLabelBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"val\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetItemLabel\\"
				args: Args [
					Name \\"lb\\"
					Call {
						name: String \\"LeaderboardGetPlayerIndex\\"
						args: Args [
							Name \\"lb\\"
							Name \\"whichPlayer\\"
						]
					}
					Name \\"val\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetPlayerItemStyleBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showLabel\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showValue\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showIcon\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetItemStyle\\"
				args: Args [
					Name \\"lb\\"
					Call {
						name: String \\"LeaderboardGetPlayerIndex\\"
						args: Args [
							Name \\"lb\\"
							Name \\"whichPlayer\\"
						]
					}
					Name \\"showLabel\\"
					Name \\"showValue\\"
					Name \\"showIcon\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetPlayerItemLabelColorBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetItemLabelColor\\"
				args: Args [
					Name \\"lb\\"
					Call {
						name: String \\"LeaderboardGetPlayerIndex\\"
						args: Args [
							Name \\"lb\\"
							Name \\"whichPlayer\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetPlayerItemValueColorBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetItemValueColor\\"
				args: Args [
					Name \\"lb\\"
					Call {
						name: String \\"LeaderboardGetPlayerIndex\\"
						args: Args [
							Name \\"lb\\"
							Name \\"whichPlayer\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetLabelColorBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetLabelColor\\"
				args: Args [
					Name \\"lb\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetValueColorBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetValueColor\\"
				args: Args [
					Name \\"lb\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetLabelBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"label\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetLabel\\"
				args: Args [
					Name \\"lb\\"
					Name \\"label\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"LeaderboardResizeBJ\\"
				args: Args [
					Name \\"lb\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSetStyleBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showLabel\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showNames\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showValues\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showIcons\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSetStyle\\"
				args: Args [
					Name \\"lb\\"
					Name \\"showLabel\\"
					Name \\"showNames\\"
					Name \\"showValues\\"
					Name \\"showIcons\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardGetItemCountBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"LeaderboardGetItemCount\\"
				args: Args [
					Name \\"lb\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardHasPlayerItemBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"LeaderboardHasPlayerItem\\"
				args: Args [
					Name \\"lb\\"
					Name \\"whichPlayer\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ForceSetLeaderboardBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					IfThenElse {
						condition: Call {
							name: String \\"IsPlayerInForce\\"
							args: Args [
								Name \\"indexPlayer\\"
								Name \\"toForce\\"
							]
						}
						then: Statements [
							Call {
								name: String \\"PlayerSetLeaderboard\\"
								args: Args [
									Name \\"indexPlayer\\"
									Name \\"lb\\"
								]
								statement: Boolean true
							}
						]
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateLeaderboardBJ\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"label\\"
			}
		]
		returns: String \\"leaderboard\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedLeaderboard\\"
				value: Call {
					name: String \\"CreateLeaderboard\\"
				}
			}
			Call {
				name: String \\"LeaderboardSetLabel\\"
				args: Args [
					Name \\"bj_lastCreatedLeaderboard\\"
					Name \\"label\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForceSetLeaderboardBJ\\"
				args: Args [
					Name \\"bj_lastCreatedLeaderboard\\"
					Name \\"toForce\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"LeaderboardDisplay\\"
				args: Args [
					Name \\"bj_lastCreatedLeaderboard\\"
					Boolean true
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastCreatedLeaderboard\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyLeaderboardBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DestroyLeaderboard\\"
				args: Args [
					Name \\"lb\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardDisplayBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"show\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardDisplay\\"
				args: Args [
					Name \\"lb\\"
					Name \\"show\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardAddItemBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"label\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"LeaderboardHasPlayerItem\\"
					args: Args [
						Name \\"lb\\"
						Name \\"whichPlayer\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"LeaderboardRemovePlayerItem\\"
						args: Args [
							Name \\"lb\\"
							Name \\"whichPlayer\\"
						]
						statement: Boolean true
					}
				]
			}
			Call {
				name: String \\"LeaderboardAddItem\\"
				args: Args [
					Name \\"lb\\"
					Name \\"label\\"
					Name \\"value\\"
					Name \\"whichPlayer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"LeaderboardResizeBJ\\"
				args: Args [
					Name \\"lb\\"
				]
				statement: Boolean true
			}
			Comment \\"call LeaderboardSetSizeByItemCount(lb, LeaderboardGetItemCount(lb))\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardRemovePlayerItemBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardRemovePlayerItem\\"
				args: Args [
					Name \\"lb\\"
					Name \\"whichPlayer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"LeaderboardResizeBJ\\"
				args: Args [
					Name \\"lb\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSortItemsBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"sortType\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"ascending\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"sortType\\"
					operator: String \\"==\\"
					right: Name \\"bj_SORTTYPE_SORTBYVALUE\\"
				}
				then: Statements [
					Call {
						name: String \\"LeaderboardSortItemsByValue\\"
						args: Args [
							Name \\"lb\\"
							Name \\"ascending\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"sortType\\"
							operator: String \\"==\\"
							right: Name \\"bj_SORTTYPE_SORTBYPLAYER\\"
						}
						statements: Statements [
							Call {
								name: String \\"LeaderboardSortItemsByPlayer\\"
								args: Args [
									Name \\"lb\\"
									Name \\"ascending\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"sortType\\"
							operator: String \\"==\\"
							right: Name \\"bj_SORTTYPE_SORTBYLABEL\\"
						}
						statements: Statements [
							Call {
								name: String \\"LeaderboardSortItemsByLabel\\"
								args: Args [
									Name \\"lb\\"
									Name \\"ascending\\"
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized sort type - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSortItemsByPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"ascending\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSortItemsByPlayer\\"
				args: Args [
					Name \\"lb\\"
					Name \\"ascending\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardSortItemsByLabelBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"ascending\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LeaderboardSortItemsByLabel\\"
				args: Args [
					Name \\"lb\\"
					Name \\"ascending\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LeaderboardGetPlayerIndexBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"LeaderboardGetPlayerIndex\\"
					args: Args [
						Name \\"lb\\"
						Name \\"whichPlayer\\"
					]
				}
				operator: String \\"+\\"
				right: Number 1
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns the player who is occupying a specified position in a leaderboard.\\"
	Comment \\" The position parameter is expected in the range of 1..16.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"LeaderboardGetIndexedPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"position\\"
			}
			Param {
				type: String \\"leaderboard\\"
				name: String \\"lb\\"
			}
		]
		returns: String \\"player\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"LeaderboardGetPlayerIndex\\"
								args: Args [
									Name \\"lb\\"
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: BinaryOp {
								left: Name \\"position\\"
								operator: String \\"-\\"
								right: Number 1
							}
						}
						then: Statements [
							Return Name \\"indexPlayer\\"
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Return Call {
				name: String \\"Player\\"
				args: Args [
					Name \\"PLAYER_NEUTRAL_PASSIVE\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlayerGetLeaderboardBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"leaderboard\\"
		statements: Statements [
			Return Call {
				name: String \\"PlayerGetLeaderboard\\"
				args: Args [
					Name \\"whichPlayer\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedLeaderboard\\"
		returns: String \\"leaderboard\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedLeaderboard\\"
		]
	}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Multiboard Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateMultiboardBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"cols\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"rows\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"title\\"
			}
		]
		returns: String \\"multiboard\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedMultiboard\\"
				value: Call {
					name: String \\"CreateMultiboard\\"
				}
			}
			Call {
				name: String \\"MultiboardSetRowCount\\"
				args: Args [
					Name \\"bj_lastCreatedMultiboard\\"
					Name \\"rows\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"MultiboardSetColumnCount\\"
				args: Args [
					Name \\"bj_lastCreatedMultiboard\\"
					Name \\"cols\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"MultiboardSetTitleText\\"
				args: Args [
					Name \\"bj_lastCreatedMultiboard\\"
					Name \\"title\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"MultiboardDisplay\\"
				args: Args [
					Name \\"bj_lastCreatedMultiboard\\"
					Boolean true
				]
				statement: Boolean true
			}
			Return Name \\"bj_lastCreatedMultiboard\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyMultiboardBJ\\"
		params: Params [
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DestroyMultiboard\\"
				args: Args [
					Name \\"mb\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedMultiboard\\"
		returns: String \\"multiboard\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedMultiboard\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardDisplayBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"show\\"
			}
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"MultiboardDisplay\\"
				args: Args [
					Name \\"mb\\"
					Name \\"show\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardMinimizeBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"minimize\\"
			}
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"MultiboardMinimize\\"
				args: Args [
					Name \\"mb\\"
					Name \\"minimize\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardSetTitleTextColorBJ\\"
		params: Params [
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"MultiboardSetTitleTextColor\\"
				args: Args [
					Name \\"mb\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardAllowDisplayBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"MultiboardSuppressDisplay\\"
				args: Args [
					UnaryOp {
						operator: String \\"not\\"
						expr: Name \\"flag\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardSetItemStyleBJ\\"
		params: Params [
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"col\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"row\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showValue\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"showIcon\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"curRow\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"curCol\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numRows\\"
				value: Call {
					name: String \\"MultiboardGetRowCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numCols\\"
				value: Call {
					name: String \\"MultiboardGetColumnCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"multiboarditem\\"
				name: String \\"mbitem\\"
			}
			EmptyLine {}
			Comment \\" Loop over rows, using 1-based index\\"
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"curRow\\"
						value: BinaryOp {
							left: Name \\"curRow\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"curRow\\"
						operator: String \\">\\"
						right: Name \\"numRows\\"
					}
					EmptyLine {}
					Comment \\" Apply setting to the requested row, or all rows (if row is 0)\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Number 0
							}
							operator: String \\"or\\"
							right: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Name \\"curRow\\"
							}
						}
						then: Statements [
							Comment \\" Loop over columns, using 1-based index\\"
							JASSSet {
								name: String \\"curCol\\"
								value: Number 0
							}
							Loop {
								statements: Statements [
									JASSSet {
										name: String \\"curCol\\"
										value: BinaryOp {
											left: Name \\"curCol\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"curCol\\"
										operator: String \\">\\"
										right: Name \\"numCols\\"
									}
									EmptyLine {}
									Comment \\" Apply setting to the requested column, or all columns (if col is 0)\\"
									IfThenElse {
										condition: Parens BinaryOp {
											left: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Number 0
											}
											operator: String \\"or\\"
											right: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Name \\"curCol\\"
											}
										}
										then: Statements [
											JASSSet {
												name: String \\"mbitem\\"
												value: Call {
													name: String \\"MultiboardGetItem\\"
													args: Args [
														Name \\"mb\\"
														BinaryOp {
															left: Name \\"curRow\\"
															operator: String \\"-\\"
															right: Number 1
														}
														BinaryOp {
															left: Name \\"curCol\\"
															operator: String \\"-\\"
															right: Number 1
														}
													]
												}
											}
											Call {
												name: String \\"MultiboardSetItemStyle\\"
												args: Args [
													Name \\"mbitem\\"
													Name \\"showValue\\"
													Name \\"showIcon\\"
												]
												statement: Boolean true
											}
											Call {
												name: String \\"MultiboardReleaseItem\\"
												args: Args [
													Name \\"mbitem\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardSetItemValueBJ\\"
		params: Params [
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"col\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"row\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"val\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"curRow\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"curCol\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numRows\\"
				value: Call {
					name: String \\"MultiboardGetRowCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numCols\\"
				value: Call {
					name: String \\"MultiboardGetColumnCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"multiboarditem\\"
				name: String \\"mbitem\\"
			}
			EmptyLine {}
			Comment \\" Loop over rows, using 1-based index\\"
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"curRow\\"
						value: BinaryOp {
							left: Name \\"curRow\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"curRow\\"
						operator: String \\">\\"
						right: Name \\"numRows\\"
					}
					EmptyLine {}
					Comment \\" Apply setting to the requested row, or all rows (if row is 0)\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Number 0
							}
							operator: String \\"or\\"
							right: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Name \\"curRow\\"
							}
						}
						then: Statements [
							Comment \\" Loop over columns, using 1-based index\\"
							JASSSet {
								name: String \\"curCol\\"
								value: Number 0
							}
							Loop {
								statements: Statements [
									JASSSet {
										name: String \\"curCol\\"
										value: BinaryOp {
											left: Name \\"curCol\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"curCol\\"
										operator: String \\">\\"
										right: Name \\"numCols\\"
									}
									EmptyLine {}
									Comment \\" Apply setting to the requested column, or all columns (if col is 0)\\"
									IfThenElse {
										condition: Parens BinaryOp {
											left: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Number 0
											}
											operator: String \\"or\\"
											right: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Name \\"curCol\\"
											}
										}
										then: Statements [
											JASSSet {
												name: String \\"mbitem\\"
												value: Call {
													name: String \\"MultiboardGetItem\\"
													args: Args [
														Name \\"mb\\"
														BinaryOp {
															left: Name \\"curRow\\"
															operator: String \\"-\\"
															right: Number 1
														}
														BinaryOp {
															left: Name \\"curCol\\"
															operator: String \\"-\\"
															right: Number 1
														}
													]
												}
											}
											Call {
												name: String \\"MultiboardSetItemValue\\"
												args: Args [
													Name \\"mbitem\\"
													Name \\"val\\"
												]
												statement: Boolean true
											}
											Call {
												name: String \\"MultiboardReleaseItem\\"
												args: Args [
													Name \\"mbitem\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardSetItemColorBJ\\"
		params: Params [
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"col\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"row\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"curRow\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"curCol\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numRows\\"
				value: Call {
					name: String \\"MultiboardGetRowCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numCols\\"
				value: Call {
					name: String \\"MultiboardGetColumnCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"multiboarditem\\"
				name: String \\"mbitem\\"
			}
			EmptyLine {}
			Comment \\" Loop over rows, using 1-based index\\"
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"curRow\\"
						value: BinaryOp {
							left: Name \\"curRow\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"curRow\\"
						operator: String \\">\\"
						right: Name \\"numRows\\"
					}
					EmptyLine {}
					Comment \\" Apply setting to the requested row, or all rows (if row is 0)\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Number 0
							}
							operator: String \\"or\\"
							right: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Name \\"curRow\\"
							}
						}
						then: Statements [
							Comment \\" Loop over columns, using 1-based index\\"
							JASSSet {
								name: String \\"curCol\\"
								value: Number 0
							}
							Loop {
								statements: Statements [
									JASSSet {
										name: String \\"curCol\\"
										value: BinaryOp {
											left: Name \\"curCol\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"curCol\\"
										operator: String \\">\\"
										right: Name \\"numCols\\"
									}
									EmptyLine {}
									Comment \\" Apply setting to the requested column, or all columns (if col is 0)\\"
									IfThenElse {
										condition: Parens BinaryOp {
											left: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Number 0
											}
											operator: String \\"or\\"
											right: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Name \\"curCol\\"
											}
										}
										then: Statements [
											JASSSet {
												name: String \\"mbitem\\"
												value: Call {
													name: String \\"MultiboardGetItem\\"
													args: Args [
														Name \\"mb\\"
														BinaryOp {
															left: Name \\"curRow\\"
															operator: String \\"-\\"
															right: Number 1
														}
														BinaryOp {
															left: Name \\"curCol\\"
															operator: String \\"-\\"
															right: Number 1
														}
													]
												}
											}
											Call {
												name: String \\"MultiboardSetItemValueColor\\"
												args: Args [
													Name \\"mbitem\\"
													Call {
														name: String \\"PercentTo255\\"
														args: Args [
															Name \\"red\\"
														]
													}
													Call {
														name: String \\"PercentTo255\\"
														args: Args [
															Name \\"green\\"
														]
													}
													Call {
														name: String \\"PercentTo255\\"
														args: Args [
															Name \\"blue\\"
														]
													}
													Call {
														name: String \\"PercentTo255\\"
														args: Args [
															BinaryOp {
																left: Number 100
																operator: String \\"-\\"
																right: Name \\"transparency\\"
															}
														]
													}
												]
												statement: Boolean true
											}
											Call {
												name: String \\"MultiboardReleaseItem\\"
												args: Args [
													Name \\"mbitem\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardSetItemWidthBJ\\"
		params: Params [
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"col\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"row\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"width\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"curRow\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"curCol\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numRows\\"
				value: Call {
					name: String \\"MultiboardGetRowCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numCols\\"
				value: Call {
					name: String \\"MultiboardGetColumnCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"multiboarditem\\"
				name: String \\"mbitem\\"
			}
			EmptyLine {}
			Comment \\" Loop over rows, using 1-based index\\"
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"curRow\\"
						value: BinaryOp {
							left: Name \\"curRow\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"curRow\\"
						operator: String \\">\\"
						right: Name \\"numRows\\"
					}
					EmptyLine {}
					Comment \\" Apply setting to the requested row, or all rows (if row is 0)\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Number 0
							}
							operator: String \\"or\\"
							right: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Name \\"curRow\\"
							}
						}
						then: Statements [
							Comment \\" Loop over columns, using 1-based index\\"
							JASSSet {
								name: String \\"curCol\\"
								value: Number 0
							}
							Loop {
								statements: Statements [
									JASSSet {
										name: String \\"curCol\\"
										value: BinaryOp {
											left: Name \\"curCol\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"curCol\\"
										operator: String \\">\\"
										right: Name \\"numCols\\"
									}
									EmptyLine {}
									Comment \\" Apply setting to the requested column, or all columns (if col is 0)\\"
									IfThenElse {
										condition: Parens BinaryOp {
											left: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Number 0
											}
											operator: String \\"or\\"
											right: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Name \\"curCol\\"
											}
										}
										then: Statements [
											JASSSet {
												name: String \\"mbitem\\"
												value: Call {
													name: String \\"MultiboardGetItem\\"
													args: Args [
														Name \\"mb\\"
														BinaryOp {
															left: Name \\"curRow\\"
															operator: String \\"-\\"
															right: Number 1
														}
														BinaryOp {
															left: Name \\"curCol\\"
															operator: String \\"-\\"
															right: Number 1
														}
													]
												}
											}
											Call {
												name: String \\"MultiboardSetItemWidth\\"
												args: Args [
													Name \\"mbitem\\"
													BinaryOp {
														left: Name \\"width\\"
														operator: String \\"/\\"
														right: Number 100
													}
												]
												statement: Boolean true
											}
											Call {
												name: String \\"MultiboardReleaseItem\\"
												args: Args [
													Name \\"mbitem\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MultiboardSetItemIconBJ\\"
		params: Params [
			Param {
				type: String \\"multiboard\\"
				name: String \\"mb\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"col\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"row\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"iconFileName\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"curRow\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"curCol\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numRows\\"
				value: Call {
					name: String \\"MultiboardGetRowCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"numCols\\"
				value: Call {
					name: String \\"MultiboardGetColumnCount\\"
					args: Args [
						Name \\"mb\\"
					]
				}
			}
			Variable {
				type: String \\"multiboarditem\\"
				name: String \\"mbitem\\"
			}
			EmptyLine {}
			Comment \\" Loop over rows, using 1-based index\\"
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"curRow\\"
						value: BinaryOp {
							left: Name \\"curRow\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"curRow\\"
						operator: String \\">\\"
						right: Name \\"numRows\\"
					}
					EmptyLine {}
					Comment \\" Apply setting to the requested row, or all rows (if row is 0)\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Number 0
							}
							operator: String \\"or\\"
							right: BinaryOp {
								left: Name \\"row\\"
								operator: String \\"==\\"
								right: Name \\"curRow\\"
							}
						}
						then: Statements [
							Comment \\" Loop over columns, using 1-based index\\"
							JASSSet {
								name: String \\"curCol\\"
								value: Number 0
							}
							Loop {
								statements: Statements [
									JASSSet {
										name: String \\"curCol\\"
										value: BinaryOp {
											left: Name \\"curCol\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"curCol\\"
										operator: String \\">\\"
										right: Name \\"numCols\\"
									}
									EmptyLine {}
									Comment \\" Apply setting to the requested column, or all columns (if col is 0)\\"
									IfThenElse {
										condition: Parens BinaryOp {
											left: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Number 0
											}
											operator: String \\"or\\"
											right: BinaryOp {
												left: Name \\"col\\"
												operator: String \\"==\\"
												right: Name \\"curCol\\"
											}
										}
										then: Statements [
											JASSSet {
												name: String \\"mbitem\\"
												value: Call {
													name: String \\"MultiboardGetItem\\"
													args: Args [
														Name \\"mb\\"
														BinaryOp {
															left: Name \\"curRow\\"
															operator: String \\"-\\"
															right: Number 1
														}
														BinaryOp {
															left: Name \\"curCol\\"
															operator: String \\"-\\"
															right: Number 1
														}
													]
												}
											}
											Call {
												name: String \\"MultiboardSetItemIcon\\"
												args: Args [
													Name \\"mbitem\\"
													Name \\"iconFileName\\"
												]
												statement: Boolean true
											}
											Call {
												name: String \\"MultiboardReleaseItem\\"
												args: Args [
													Name \\"mbitem\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Text Tag Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Scale the font size linearly such that size 10 equates to height 0.023.\\"
	Comment \\" Screen-relative font heights are harder to grasp and than font sizes.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"TextTagSize2Height\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"size\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: BinaryOp {
					left: Name \\"size\\"
					operator: String \\"*\\"
					right: Number 0.023
				}
				operator: String \\"/\\"
				right: Number 10
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Scale the speed linearly such that speed 128 equates to 0.071.\\"
	Comment \\" Screen-relative speeds are hard to grasp.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"TextTagSpeed2Velocity\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"speed\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: BinaryOp {
					left: Name \\"speed\\"
					operator: String \\"*\\"
					right: Number 0.071
				}
				operator: String \\"/\\"
				right: Number 128
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagColorBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTextTagColor\\"
				args: Args [
					Name \\"tt\\"
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"transparency\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagVelocityBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"speed\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"angle\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"vel\\"
				value: Call {
					name: String \\"TextTagSpeed2Velocity\\"
					args: Args [
						Name \\"speed\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"xvel\\"
				value: BinaryOp {
					left: Name \\"vel\\"
					operator: String \\"*\\"
					right: Call {
						name: String \\"Cos\\"
						args: Args [
							BinaryOp {
								left: Name \\"angle\\"
								operator: String \\"*\\"
								right: Name \\"bj_DEGTORAD\\"
							}
						]
					}
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"yvel\\"
				value: BinaryOp {
					left: Name \\"vel\\"
					operator: String \\"*\\"
					right: Call {
						name: String \\"Sin\\"
						args: Args [
							BinaryOp {
								left: Name \\"angle\\"
								operator: String \\"*\\"
								right: Name \\"bj_DEGTORAD\\"
							}
						]
					}
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetTextTagVelocity\\"
				args: Args [
					Name \\"tt\\"
					Name \\"xvel\\"
					Name \\"yvel\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagTextBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"s\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"size\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"textHeight\\"
				value: Call {
					name: String \\"TextTagSize2Height\\"
					args: Args [
						Name \\"size\\"
					]
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetTextTagText\\"
				args: Args [
					Name \\"tt\\"
					Name \\"s\\"
					Name \\"textHeight\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagPosBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zOffset\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTextTagPos\\"
				args: Args [
					Name \\"tt\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Name \\"zOffset\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagPosUnitBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zOffset\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTextTagPosUnit\\"
				args: Args [
					Name \\"tt\\"
					Name \\"whichUnit\\"
					Name \\"zOffset\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagSuspendedBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTextTagSuspended\\"
				args: Args [
					Name \\"tt\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagPermanentBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTextTagPermanent\\"
				args: Args [
					Name \\"tt\\"
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagAgeBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"age\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTextTagAge\\"
				args: Args [
					Name \\"tt\\"
					Name \\"age\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagLifespanBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"lifespan\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTextTagLifespan\\"
				args: Args [
					Name \\"tt\\"
					Name \\"lifespan\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetTextTagFadepointBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"fadepoint\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetTextTagFadepoint\\"
				args: Args [
					Name \\"tt\\"
					Name \\"fadepoint\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateTextTagLocBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"s\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zOffset\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"size\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		returns: String \\"texttag\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedTextTag\\"
				value: Call {
					name: String \\"CreateTextTag\\"
				}
			}
			Call {
				name: String \\"SetTextTagTextBJ\\"
				args: Args [
					Name \\"bj_lastCreatedTextTag\\"
					Name \\"s\\"
					Name \\"size\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetTextTagPosBJ\\"
				args: Args [
					Name \\"bj_lastCreatedTextTag\\"
					Name \\"loc\\"
					Name \\"zOffset\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetTextTagColorBJ\\"
				args: Args [
					Name \\"bj_lastCreatedTextTag\\"
					Name \\"red\\"
					Name \\"green\\"
					Name \\"blue\\"
					Name \\"transparency\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Return Name \\"bj_lastCreatedTextTag\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CreateTextTagUnitBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"s\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"zOffset\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"size\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"transparency\\"
			}
		]
		returns: String \\"texttag\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedTextTag\\"
				value: Call {
					name: String \\"CreateTextTag\\"
				}
			}
			Call {
				name: String \\"SetTextTagTextBJ\\"
				args: Args [
					Name \\"bj_lastCreatedTextTag\\"
					Name \\"s\\"
					Name \\"size\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetTextTagPosUnitBJ\\"
				args: Args [
					Name \\"bj_lastCreatedTextTag\\"
					Name \\"whichUnit\\"
					Name \\"zOffset\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetTextTagColorBJ\\"
				args: Args [
					Name \\"bj_lastCreatedTextTag\\"
					Name \\"red\\"
					Name \\"green\\"
					Name \\"blue\\"
					Name \\"transparency\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Return Name \\"bj_lastCreatedTextTag\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DestroyTextTagBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DestroyTextTag\\"
				args: Args [
					Name \\"tt\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ShowTextTagForceBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"show\\"
			}
			Param {
				type: String \\"texttag\\"
				name: String \\"tt\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"whichForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"SetTextTagVisibility\\"
						args: Args [
							Name \\"tt\\"
							Name \\"show\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedTextTag\\"
		returns: String \\"texttag\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedTextTag\\"
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Cinematic Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PauseGameOn\\"
		statements: Statements [
			Call {
				name: String \\"PauseGame\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PauseGameOff\\"
		statements: Statements [
			Call {
				name: String \\"PauseGame\\"
				args: Args [
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUserControlForceOn\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"whichForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"EnableUserControl\\"
						args: Args [
							Boolean true
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUserControlForceOff\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"whichForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"EnableUserControl\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ShowInterfaceForceOn\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"fadeDuration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"whichForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ShowInterface\\"
						args: Args [
							Boolean true
							Name \\"fadeDuration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ShowInterfaceForceOff\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"fadeDuration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"whichForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"ShowInterface\\"
						args: Args [
							Boolean false
							Name \\"fadeDuration\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PingMinimapForForce\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"whichForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"PingMinimap\\"
						args: Args [
							Name \\"x\\"
							Name \\"y\\"
							Name \\"duration\\"
						]
						statement: Boolean true
					}
					Comment \\"call StartSound(bj_pingMinimapSound)\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PingMinimapLocForForce\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"PingMinimapForForce\\"
				args: Args [
					Name \\"whichForce\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PingMinimapForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"whichPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"PingMinimap\\"
						args: Args [
							Name \\"x\\"
							Name \\"y\\"
							Name \\"duration\\"
						]
						statement: Boolean true
					}
					Comment \\"call StartSound(bj_pingMinimapSound)\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PingMinimapLocForPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"PingMinimapForPlayer\\"
				args: Args [
					Name \\"whichPlayer\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PingMinimapForForceEx\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"style\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"red255\\"
				value: Call {
					name: String \\"PercentTo255\\"
					args: Args [
						Name \\"red\\"
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"green255\\"
				value: Call {
					name: String \\"PercentTo255\\"
					args: Args [
						Name \\"green\\"
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"blue255\\"
				value: Call {
					name: String \\"PercentTo255\\"
					args: Args [
						Name \\"blue\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"whichForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					EmptyLine {}
					Comment \\" Prevent 100% red simple and flashy pings, as they become \\\\\\"attack\\\\\\" pings.\\"
					IfThenElse {
						condition: BinaryOp {
							left: BinaryOp {
								left: Parens BinaryOp {
									left: Name \\"red255\\"
									operator: String \\"==\\"
									right: Number 255
								}
								operator: String \\"and\\"
								right: Parens BinaryOp {
									left: Name \\"green255\\"
									operator: String \\"==\\"
									right: Number 0
								}
							}
							operator: String \\"and\\"
							right: Parens BinaryOp {
								left: Name \\"blue255\\"
								operator: String \\"==\\"
								right: Number 0
							}
						}
						then: Statements [
							JASSSet {
								name: String \\"red255\\"
								value: Number 254
							}
						]
					}
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"style\\"
							operator: String \\"==\\"
							right: Name \\"bj_MINIMAPPINGSTYLE_SIMPLE\\"
						}
						then: Statements [
							Call {
								name: String \\"PingMinimapEx\\"
								args: Args [
									Name \\"x\\"
									Name \\"y\\"
									Name \\"duration\\"
									Name \\"red255\\"
									Name \\"green255\\"
									Name \\"blue255\\"
									Boolean false
								]
								statement: Boolean true
							}
						]
						elses: Array [
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"style\\"
									operator: String \\"==\\"
									right: Name \\"bj_MINIMAPPINGSTYLE_FLASHY\\"
								}
								statements: Statements [
									Call {
										name: String \\"PingMinimapEx\\"
										args: Args [
											Name \\"x\\"
											Name \\"y\\"
											Name \\"duration\\"
											Name \\"red255\\"
											Name \\"green255\\"
											Name \\"blue255\\"
											Boolean true
										]
										statement: Boolean true
									}
								]
							}
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"style\\"
									operator: String \\"==\\"
									right: Name \\"bj_MINIMAPPINGSTYLE_ATTACK\\"
								}
								statements: Statements [
									Call {
										name: String \\"PingMinimapEx\\"
										args: Args [
											Name \\"x\\"
											Name \\"y\\"
											Name \\"duration\\"
											Number 255
											Number 0
											Number 0
											Boolean false
										]
										statement: Boolean true
									}
								]
							}
							Else {
								statements: Statements [
									Comment \\" Unrecognized ping style - ignore the request.\\"
								]
							}
						]
					}
					EmptyLine {}
					Comment \\"call StartSound(bj_pingMinimapSound)\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PingMinimapLocForForceEx\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"style\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"PingMinimapForForceEx\\"
				args: Args [
					Name \\"whichForce\\"
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"loc\\"
						]
					}
					Name \\"duration\\"
					Name \\"style\\"
					Name \\"red\\"
					Name \\"green\\"
					Name \\"blue\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EnableWorldFogBoundaryBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"enable\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"f\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"f\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"EnableWorldFogBoundary\\"
						args: Args [
							Name \\"enable\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"EnableOcclusionBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"enable\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"f\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"f\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					Call {
						name: String \\"EnableOcclusion\\"
						args: Args [
							Name \\"enable\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Cinematic Transmission Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" If cancelled, stop the sound and end the cinematic scene.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"CancelCineSceneBJ\\"
		statements: Statements [
			Call {
				name: String \\"StopSoundBJ\\"
				args: Args [
					Name \\"bj_cineSceneLastSound\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"EndCinematicScene\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Init a trigger to listen for END_CINEMATIC events and respond to them if\\"
	Comment \\" a cinematic scene is in progress.  For performance reasons, this should\\"
	Comment \\" only be called once a cinematic scene has been started, so that maps\\"
	Comment \\" lacking such scenes do not bother to register for these events.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"TryInitCinematicBehaviorBJ\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_cineSceneBeingSkipped\\"
					operator: String \\"==\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_cineSceneBeingSkipped\\"
						value: Call {
							name: String \\"CreateTrigger\\"
						}
					}
					JASSSet {
						name: String \\"index\\"
						value: Number 0
					}
					Loop {
						statements: Statements [
							Call {
								name: String \\"TriggerRegisterPlayerEvent\\"
								args: Args [
									Name \\"bj_cineSceneBeingSkipped\\"
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"index\\"
										]
									}
									Name \\"EVENT_PLAYER_END_CINEMATIC\\"
								]
								statement: Boolean true
							}
							JASSSet {
								name: String \\"index\\"
								value: BinaryOp {
									left: Name \\"index\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"index\\"
								operator: String \\"==\\"
								right: Name \\"bj_MAX_PLAYERS\\"
							}
						]
					}
					Call {
						name: String \\"TriggerAddAction\\"
						args: Args [
							Name \\"bj_cineSceneBeingSkipped\\"
							FuncRef String \\"C\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCinematicSceneBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"portraitUnitId\\"
			}
			Param {
				type: String \\"playercolor\\"
				name: String \\"color\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"speakerTitle\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"text\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"sceneDuration\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"voiceoverDuration\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_cineSceneLastSound\\"
				value: Name \\"soundHandle\\"
			}
			Call {
				name: String \\"SetCinematicScene\\"
				args: Args [
					Name \\"portraitUnitId\\"
					Name \\"color\\"
					Name \\"speakerTitle\\"
					Name \\"text\\"
					Name \\"sceneDuration\\"
					Name \\"voiceoverDuration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"PlaySoundBJ\\"
				args: Args [
					Name \\"soundHandle\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetTransmissionDuration\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"timeType\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeVal\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"timeType\\"
					operator: String \\"==\\"
					right: Name \\"bj_TIMETYPE_ADD\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"duration\\"
						value: BinaryOp {
							left: Call {
								name: String \\"GetSoundDurationBJ\\"
								args: Args [
									Name \\"soundHandle\\"
								]
							}
							operator: String \\"+\\"
							right: Name \\"timeVal\\"
						}
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"timeType\\"
							operator: String \\"==\\"
							right: Name \\"bj_TIMETYPE_SET\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"duration\\"
								value: Name \\"timeVal\\"
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"timeType\\"
							operator: String \\"==\\"
							right: Name \\"bj_TIMETYPE_SUB\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"duration\\"
								value: BinaryOp {
									left: Call {
										name: String \\"GetSoundDurationBJ\\"
										args: Args [
											Name \\"soundHandle\\"
										]
									}
									operator: String \\"-\\"
									right: Name \\"timeVal\\"
								}
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized timeType - ignore timeVal.\\"
							JASSSet {
								name: String \\"duration\\"
								value: Call {
									name: String \\"GetSoundDurationBJ\\"
									args: Args [
										Name \\"soundHandle\\"
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Make sure we have a non-negative duration.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"duration\\"
					operator: String \\"<\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"duration\\"
						value: Number 0
					}
				]
			}
			Return Name \\"duration\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WaitTransmissionDuration\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"timeType\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeVal\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"timeType\\"
					operator: String \\"==\\"
					right: Name \\"bj_TIMETYPE_SET\\"
				}
				then: Statements [
					Comment \\" If we have a static duration wait, just perform the wait.\\"
					Call {
						name: String \\"TriggerSleepAction\\"
						args: Args [
							Name \\"timeVal\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"soundHandle\\"
							operator: String \\"==\\"
						}
						statements: Statements [
							Comment \\" If the sound does not exist, perform a default length wait.\\"
							Call {
								name: String \\"TriggerSleepAction\\"
								args: Args [
									Name \\"bj_NOTHING_SOUND_DURATION\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"timeType\\"
							operator: String \\"==\\"
							right: Name \\"bj_TIMETYPE_SUB\\"
						}
						statements: Statements [
							Comment \\" If the transmission is cutting off the sound, wait for the sound\\"
							Comment \\" to be mostly finished.\\"
							Call {
								name: String \\"WaitForSoundBJ\\"
								args: Args [
									Name \\"soundHandle\\"
									Name \\"timeVal\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"timeType\\"
							operator: String \\"==\\"
							right: Name \\"bj_TIMETYPE_ADD\\"
						}
						statements: Statements [
							Comment \\" If the transmission is extending beyond the sound's length, wait\\"
							Comment \\" for it to finish, and then wait the additional time.\\"
							Call {
								name: String \\"WaitForSoundBJ\\"
								args: Args [
									Name \\"soundHandle\\"
									Number 0
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerSleepAction\\"
								args: Args [
									Name \\"timeVal\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized timeType - ignore.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DoTransmissionBasicsXYBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"playercolor\\"
				name: String \\"color\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"unitName\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetCinematicSceneBJ\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"unitId\\"
					Name \\"color\\"
					Name \\"unitName\\"
					Name \\"message\\"
					BinaryOp {
						left: Name \\"duration\\"
						operator: String \\"+\\"
						right: Name \\"bj_TRANSMISSION_PORT_HANGTIME\\"
					}
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"unitId\\"
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					Call {
						name: String \\"PingMinimap\\"
						args: Args [
							Name \\"x\\"
							Name \\"y\\"
							Name \\"bj_TRANSMISSION_PING_TIME\\"
						]
						statement: Boolean true
					}
					Comment \\"call SetCameraQuickPosition(x, y)\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Display a text message to a Player Group with an accompanying sound,\\"
	Comment \\" portrait, speech indicator, and all that good stuff.\\"
	Comment \\"   - Query duration of sound\\"
	Comment \\"   - Play sound\\"
	Comment \\"   - Display text message for duration\\"
	Comment \\"   - Display animating portrait for duration\\"
	Comment \\"   - Display a speech indicator for the unit\\"
	Comment \\"   - Ping the minimap\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"TransmissionFromUnitWithNameBJ\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"unitName\\"
			}
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"timeType\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeVal\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"wait\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TryInitCinematicBehaviorBJ\\"
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"AttachSoundToUnit\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"whichUnit\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Ensure that the time value is non-negative.\\"
			JASSSet {
				name: String \\"timeVal\\"
				value: Call {
					name: String \\"RMaxBJ\\"
					args: Args [
						Name \\"timeVal\\"
						Number 0
					]
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_lastTransmissionDuration\\"
				value: Call {
					name: String \\"GetTransmissionDuration\\"
					args: Args [
						Name \\"soundHandle\\"
						Name \\"timeType\\"
						Name \\"timeVal\\"
					]
				}
			}
			JASSSet {
				name: String \\"bj_lastPlayedSound\\"
				value: Name \\"soundHandle\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"toForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"whichUnit\\"
							operator: String \\"==\\"
						}
						then: Statements [
							Comment \\" If the unit reference is invalid, send the transmission from the center of the map with no portrait.\\"
							Call {
								name: String \\"DoTransmissionBasicsXYBJ\\"
								args: Args [
									Number 0
									Name \\"PLAYER_COLOR_RED\\"
									Number 0
									Number 0
									Name \\"soundHandle\\"
									Name \\"unitName\\"
									Name \\"message\\"
									Name \\"bj_lastTransmissionDuration\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									Call {
										name: String \\"DoTransmissionBasicsXYBJ\\"
										args: Args [
											Call {
												name: String \\"GetUnitTypeId\\"
												args: Args [
													Name \\"whichUnit\\"
												]
											}
											Call {
												name: String \\"GetPlayerColor\\"
												args: Args [
													Call {
														name: String \\"GetOwningPlayer\\"
														args: Args [
															Name \\"whichUnit\\"
														]
													}
												]
											}
											Call {
												name: String \\"GetUnitX\\"
												args: Args [
													Name \\"whichUnit\\"
												]
											}
											Call {
												name: String \\"GetUnitY\\"
												args: Args [
													Name \\"whichUnit\\"
												]
											}
											Name \\"soundHandle\\"
											Name \\"unitName\\"
											Name \\"message\\"
											Name \\"bj_lastTransmissionDuration\\"
										]
										statement: Boolean true
									}
									IfThenElse {
										condition: Parens UnaryOp {
											operator: String \\"not\\"
											expr: Call {
												name: String \\"IsUnitHidden\\"
												args: Args [
													Name \\"whichUnit\\"
												]
											}
										}
										then: Statements [
											Call {
												name: String \\"UnitAddIndicator\\"
												args: Args [
													Name \\"whichUnit\\"
													Name \\"bj_TRANSMISSION_IND_RED\\"
													Name \\"bj_TRANSMISSION_IND_BLUE\\"
													Name \\"bj_TRANSMISSION_IND_GREEN\\"
													Name \\"bj_TRANSMISSION_IND_ALPHA\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"wait\\"
					operator: String \\"and\\"
					right: Parens BinaryOp {
						left: Name \\"bj_lastTransmissionDuration\\"
						operator: String \\">\\"
						right: Number 0
					}
				}
				then: Statements [
					Comment \\" call TriggerSleepAction(bj_lastTransmissionDuration)\\"
					Call {
						name: String \\"WaitTransmissionDuration\\"
						args: Args [
							Name \\"soundHandle\\"
							Name \\"timeType\\"
							Name \\"timeVal\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlayDialogueFromSpeakerEx\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"speaker\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"speakerType\\"
			}
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"timeType\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeVal\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"wait\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Comment \\"Make sure that the runtime unit type and the parameter are the same,\\"
			Comment \\"otherwise the offline animations will not match and will fail\\"
			IfThenElse {
				condition: BinaryOp {
					left: Call {
						name: String \\"GetUnitTypeId\\"
						args: Args [
							Name \\"speaker\\"
						]
					}
					operator: String \\"!=\\"
					right: Name \\"speakerType\\"
				}
				then: Statements [
					Debug {
						statement: Call {
							name: String \\"BJDebugMsg\\"
							args: Args [
								Parens BinaryOp {
									left: BinaryOp {
										left: BinaryOp {
											left: String \\"Attempted to play FacialAnimation with the wrong speaker UnitType - Param: \\"
											operator: String \\"+\\"
											right: Call {
												name: String \\"I2S\\"
												args: Args [
													Name \\"speakerType\\"
												]
											}
										}
										operator: String \\"+\\"
										right: String \\" Runtime: \\"
									}
									operator: String \\"+\\"
									right: Call {
										name: String \\"I2S\\"
										args: Args [
											Call {
												name: String \\"GetUnitTypeId\\"
												args: Args [
													Name \\"speaker\\"
												]
											}
										]
									}
								}
							]
							statement: Boolean true
						}
					}
					Comment \\"return false\\"
				]
			}
			EmptyLine {}
			Call {
				name: String \\"TryInitCinematicBehaviorBJ\\"
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"AttachSoundToUnit\\"
				args: Args [
					Name \\"soundHandle\\"
					Name \\"speaker\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Ensure that the time value is non-negative.\\"
			JASSSet {
				name: String \\"timeVal\\"
				value: Call {
					name: String \\"RMaxBJ\\"
					args: Args [
						Name \\"timeVal\\"
						Number 0
					]
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_lastTransmissionDuration\\"
				value: Call {
					name: String \\"GetTransmissionDuration\\"
					args: Args [
						Name \\"soundHandle\\"
						Name \\"timeType\\"
						Name \\"timeVal\\"
					]
				}
			}
			JASSSet {
				name: String \\"bj_lastPlayedSound\\"
				value: Name \\"soundHandle\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"toForce\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"SetCinematicSceneBJ\\"
						args: Args [
							Name \\"soundHandle\\"
							Name \\"speakerType\\"
							Call {
								name: String \\"GetPlayerColor\\"
								args: Args [
									Call {
										name: String \\"GetOwningPlayer\\"
										args: Args [
											Name \\"speaker\\"
										]
									}
								]
							}
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									Call {
										name: String \\"GetDialogueSpeakerNameKey\\"
										args: Args [
											Name \\"soundHandle\\"
										]
									}
								]
							}
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									Call {
										name: String \\"GetDialogueTextKey\\"
										args: Args [
											Name \\"soundHandle\\"
										]
									}
								]
							}
							BinaryOp {
								left: Name \\"bj_lastTransmissionDuration\\"
								operator: String \\"+\\"
								right: Name \\"bj_TRANSMISSION_PORT_HANGTIME\\"
							}
							Name \\"bj_lastTransmissionDuration\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"wait\\"
					operator: String \\"and\\"
					right: Parens BinaryOp {
						left: Name \\"bj_lastTransmissionDuration\\"
						operator: String \\">\\"
						right: Number 0
					}
				}
				then: Statements [
					Comment \\" call TriggerSleepAction(bj_lastTransmissionDuration)\\"
					Call {
						name: String \\"WaitTransmissionDuration\\"
						args: Args [
							Name \\"soundHandle\\"
							Name \\"timeType\\"
							Name \\"timeVal\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Return Boolean true
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PlayDialogueFromSpeakerTypeEx\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"fromPlayer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"speakerType\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"timeType\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeVal\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"wait\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Call {
				name: String \\"TryInitCinematicBehaviorBJ\\"
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Ensure that the time value is non-negative.\\"
			JASSSet {
				name: String \\"timeVal\\"
				value: Call {
					name: String \\"RMaxBJ\\"
					args: Args [
						Name \\"timeVal\\"
						Number 0
					]
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_lastTransmissionDuration\\"
				value: Call {
					name: String \\"GetTransmissionDuration\\"
					args: Args [
						Name \\"soundHandle\\"
						Name \\"timeType\\"
						Name \\"timeVal\\"
					]
				}
			}
			JASSSet {
				name: String \\"bj_lastPlayedSound\\"
				value: Name \\"soundHandle\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"toForce\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"SetCinematicSceneBJ\\"
						args: Args [
							Name \\"soundHandle\\"
							Name \\"speakerType\\"
							Call {
								name: String \\"GetPlayerColor\\"
								args: Args [
									Name \\"fromPlayer\\"
								]
							}
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									Call {
										name: String \\"GetDialogueSpeakerNameKey\\"
										args: Args [
											Name \\"soundHandle\\"
										]
									}
								]
							}
							Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									Call {
										name: String \\"GetDialogueTextKey\\"
										args: Args [
											Name \\"soundHandle\\"
										]
									}
								]
							}
							BinaryOp {
								left: Name \\"bj_lastTransmissionDuration\\"
								operator: String \\"+\\"
								right: Name \\"bj_TRANSMISSION_PORT_HANGTIME\\"
							}
							Name \\"bj_lastTransmissionDuration\\"
						]
						statement: Boolean true
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"speakerType\\"
							operator: String \\"!=\\"
							right: Number 0
						}
						then: Statements [
							Call {
								name: String \\"PingMinimap\\"
								args: Args [
									Call {
										name: String \\"GetLocationX\\"
										args: Args [
											Name \\"loc\\"
										]
									}
									Call {
										name: String \\"GetLocationY\\"
										args: Args [
											Name \\"loc\\"
										]
									}
									Name \\"bj_TRANSMISSION_PING_TIME\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"wait\\"
					operator: String \\"and\\"
					right: Parens BinaryOp {
						left: Name \\"bj_lastTransmissionDuration\\"
						operator: String \\">\\"
						right: Number 0
					}
				}
				then: Statements [
					Comment \\" call TriggerSleepAction(bj_lastTransmissionDuration)\\"
					Call {
						name: String \\"WaitTransmissionDuration\\"
						args: Args [
							Name \\"soundHandle\\"
							Name \\"timeType\\"
							Name \\"timeVal\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Return Boolean true
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" This operates like TransmissionFromUnitWithNameBJ, but for a unit type\\"
	Comment \\" rather than a unit instance.  As such, no speech indicator is employed.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"TransmissionFromUnitTypeWithNameBJ\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"toForce\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"fromPlayer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"unitName\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"sound\\"
				name: String \\"soundHandle\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"message\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"timeType\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"timeVal\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"wait\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"TryInitCinematicBehaviorBJ\\"
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Ensure that the time value is non-negative.\\"
			JASSSet {
				name: String \\"timeVal\\"
				value: Call {
					name: String \\"RMaxBJ\\"
					args: Args [
						Name \\"timeVal\\"
						Number 0
					]
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_lastTransmissionDuration\\"
				value: Call {
					name: String \\"GetTransmissionDuration\\"
					args: Args [
						Name \\"soundHandle\\"
						Name \\"timeType\\"
						Name \\"timeVal\\"
					]
				}
			}
			JASSSet {
				name: String \\"bj_lastPlayedSound\\"
				value: Name \\"soundHandle\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerInForce\\"
					args: Args [
						Call {
							name: String \\"GetLocalPlayer\\"
						}
						Name \\"toForce\\"
					]
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					EmptyLine {}
					Call {
						name: String \\"DoTransmissionBasicsXYBJ\\"
						args: Args [
							Name \\"unitId\\"
							Call {
								name: String \\"GetPlayerColor\\"
								args: Args [
									Name \\"fromPlayer\\"
								]
							}
							Call {
								name: String \\"GetLocationX\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Call {
								name: String \\"GetLocationY\\"
								args: Args [
									Name \\"loc\\"
								]
							}
							Name \\"soundHandle\\"
							Name \\"unitName\\"
							Name \\"message\\"
							Name \\"bj_lastTransmissionDuration\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"wait\\"
					operator: String \\"and\\"
					right: Parens BinaryOp {
						left: Name \\"bj_lastTransmissionDuration\\"
						operator: String \\">\\"
						right: Number 0
					}
				}
				then: Statements [
					Comment \\" call TriggerSleepAction(bj_lastTransmissionDuration)\\"
					Call {
						name: String \\"WaitTransmissionDuration\\"
						args: Args [
							Name \\"soundHandle\\"
							Name \\"timeType\\"
							Name \\"timeVal\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastTransmissionDurationBJ\\"
		returns: String \\"real\\"
		statements: Statements [
			Return Name \\"bj_lastTransmissionDuration\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ForceCinematicSubtitlesBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"ForceCinematicSubtitles\\"
				args: Args [
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Cinematic Mode Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Makes many common UI settings changes at once, for use when beginning and\\"
	Comment \\" ending cinematic sequences.  Note that some affects apply to all players,\\"
	Comment \\" such as game speed.  This is unavoidable.\\"
	Comment \\"   - Clear the screen of text messages\\"
	Comment \\"   - Hide interface UI (letterbox mode)\\"
	Comment \\"   - Hide game messages (ally under attack, etc.)\\"
	Comment \\"   - Disable user control\\"
	Comment \\"   - Disable occlusion\\"
	Comment \\"   - Set game speed (for all players)\\"
	Comment \\"   - Lock game speed (for all players)\\"
	Comment \\"   - Disable black mask (for all players)\\"
	Comment \\"   - Disable fog of war (for all players)\\"
	Comment \\"   - Disable world boundary fog (for all players)\\"
	Comment \\"   - Dim non-speech sound channels\\"
	Comment \\"   - End any outstanding music themes\\"
	Comment \\"   - Fix the random seed to a set value\\"
	Comment \\"   - Reset the camera smoothing factor\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"CinematicModeExBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"cineMode\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"forForce\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"interfaceFadeTime\\"
			}
		]
		statements: Statements [
			Comment \\" If the game hasn't started yet, perform interface fades immediately\\"
			IfThenElse {
				condition: Parens UnaryOp {
					operator: String \\"not\\"
					expr: Name \\"bj_gameStarted\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"interfaceFadeTime\\"
						value: Number 0
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"cineMode\\"
				then: Statements [
					Comment \\" Save the UI state so that we can restore it later.\\"
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Name \\"bj_cineModeAlreadyIn\\"
						}
						then: Statements [
							Call {
								name: String \\"SetCinematicAudio\\"
								args: Args [
									Boolean true
								]
								statement: Boolean true
							}
							JASSSet {
								name: String \\"bj_cineModeAlreadyIn\\"
								value: Boolean true
							}
							JASSSet {
								name: String \\"bj_cineModePriorSpeed\\"
								value: Call {
									name: String \\"GetGameSpeed\\"
								}
							}
							JASSSet {
								name: String \\"bj_cineModePriorFogSetting\\"
								value: Call {
									name: String \\"IsFogEnabled\\"
								}
							}
							JASSSet {
								name: String \\"bj_cineModePriorMaskSetting\\"
								value: Call {
									name: String \\"IsFogMaskEnabled\\"
								}
							}
							JASSSet {
								name: String \\"bj_cineModePriorDawnDusk\\"
								value: Call {
									name: String \\"IsDawnDuskEnabled\\"
								}
							}
							JASSSet {
								name: String \\"bj_cineModeSavedSeed\\"
								value: Call {
									name: String \\"GetRandomInt\\"
									args: Args [
										Number 0
										Number 1000000
									]
								}
							}
						]
					}
					EmptyLine {}
					Comment \\" Perform local changes\\"
					IfThenElse {
						condition: Parens Call {
							name: String \\"IsPlayerInForce\\"
							args: Args [
								Call {
									name: String \\"GetLocalPlayer\\"
								}
								Name \\"forForce\\"
							]
						}
						then: Statements [
							Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
							Call {
								name: String \\"ClearTextMessages\\"
								statement: Boolean true
							}
							Call {
								name: String \\"ShowInterface\\"
								args: Args [
									Boolean false
									Name \\"interfaceFadeTime\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"EnableUserControl\\"
								args: Args [
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"EnableOcclusion\\"
								args: Args [
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetCineModeVolumeGroupsBJ\\"
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					Comment \\" Perform global changes\\"
					Call {
						name: String \\"SetGameSpeed\\"
						args: Args [
							Name \\"bj_CINEMODE_GAMESPEED\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetMapFlag\\"
						args: Args [
							Name \\"MAP_LOCK_SPEED\\"
							Boolean true
						]
						statement: Boolean true
					}
					Call {
						name: String \\"FogMaskEnable\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
					Call {
						name: String \\"FogEnable\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
					Call {
						name: String \\"EnableWorldFogBoundary\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
					Call {
						name: String \\"EnableDawnDusk\\"
						args: Args [
							Boolean false
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Use a fixed random seed, so that cinematics play consistently.\\"
					Call {
						name: String \\"SetRandomSeed\\"
						args: Args [
							Number 0
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"bj_cineModeAlreadyIn\\"
								value: Boolean false
							}
							Call {
								name: String \\"SetCinematicAudio\\"
								args: Args [
									Boolean false
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Perform local changes\\"
							IfThenElse {
								condition: Parens Call {
									name: String \\"IsPlayerInForce\\"
									args: Args [
										Call {
											name: String \\"GetLocalPlayer\\"
										}
										Name \\"forForce\\"
									]
								}
								then: Statements [
									Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
									Call {
										name: String \\"ShowInterface\\"
										args: Args [
											Boolean true
											Name \\"interfaceFadeTime\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"EnableUserControl\\"
										args: Args [
											Boolean true
										]
										statement: Boolean true
									}
									Call {
										name: String \\"EnableOcclusion\\"
										args: Args [
											Boolean true
										]
										statement: Boolean true
									}
									Call {
										name: String \\"VolumeGroupReset\\"
										statement: Boolean true
									}
									Call {
										name: String \\"EndThematicMusic\\"
										statement: Boolean true
									}
									Call {
										name: String \\"CameraResetSmoothingFactorBJ\\"
										statement: Boolean true
									}
								]
							}
							EmptyLine {}
							Comment \\" Perform global changes\\"
							Call {
								name: String \\"SetMapFlag\\"
								args: Args [
									Name \\"MAP_LOCK_SPEED\\"
									Boolean false
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetGameSpeed\\"
								args: Args [
									Name \\"bj_cineModePriorSpeed\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"FogMaskEnable\\"
								args: Args [
									Name \\"bj_cineModePriorMaskSetting\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"FogEnable\\"
								args: Args [
									Name \\"bj_cineModePriorFogSetting\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"EnableWorldFogBoundary\\"
								args: Args [
									Boolean true
								]
								statement: Boolean true
							}
							Call {
								name: String \\"EnableDawnDusk\\"
								args: Args [
									Name \\"bj_cineModePriorDawnDusk\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetRandomSeed\\"
								args: Args [
									Name \\"bj_cineModeSavedSeed\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CinematicModeBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"cineMode\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"forForce\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"CinematicModeExBJ\\"
				args: Args [
					Name \\"cineMode\\"
					Name \\"forForce\\"
					Name \\"bj_CINEMODE_INTERFACEFADE\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Cinematic Filter Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DisplayCineFilterBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"DisplayCineFilter\\"
				args: Args [
					Name \\"flag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CinematicFadeCommonBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"tex\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"startTrans\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"endTrans\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"duration\\"
					operator: String \\"==\\"
					right: Number 0
				}
				then: Statements [
					Comment \\" If the fade is instant, use the same starting and ending values,\\"
					Comment \\" so that we effectively do a set rather than a fade.\\"
					JASSSet {
						name: String \\"startTrans\\"
						value: Name \\"endTrans\\"
					}
				]
			}
			Call {
				name: String \\"EnableUserUI\\"
				args: Args [
					Boolean false
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterTexture\\"
				args: Args [
					Name \\"tex\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterBlendMode\\"
				args: Args [
					Name \\"BLEND_MODE_BLEND\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterTexMapFlags\\"
				args: Args [
					Name \\"TEXMAP_FLAG_NONE\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterStartUV\\"
				args: Args [
					Number 0
					Number 0
					Number 1
					Number 1
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterEndUV\\"
				args: Args [
					Number 0
					Number 0
					Number 1
					Number 1
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterStartColor\\"
				args: Args [
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"startTrans\\"
							}
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterEndColor\\"
				args: Args [
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"endTrans\\"
							}
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterDuration\\"
				args: Args [
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DisplayCineFilter\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FinishCinematicFadeBJ\\"
		statements: Statements [
			Call {
				name: String \\"DestroyTimer\\"
				args: Args [
					Name \\"bj_cineFadeFinishTimer\\"
				]
				statement: Boolean true
			}
			JASSSet {
				name: String \\"bj_cineFadeFinishTimer\\"
			}
			Call {
				name: String \\"DisplayCineFilter\\"
				args: Args [
					Boolean false
				]
				statement: Boolean true
			}
			Call {
				name: String \\"EnableUserUI\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FinishCinematicFadeAfterBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
		]
		statements: Statements [
			Comment \\" Create a timer to end the cinematic fade.\\"
			JASSSet {
				name: String \\"bj_cineFadeFinishTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Name \\"bj_cineFadeFinishTimer\\"
					Name \\"duration\\"
					Boolean false
					FuncRef String \\"F\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ContinueCinematicFadeBJ\\"
		statements: Statements [
			Call {
				name: String \\"DestroyTimer\\"
				args: Args [
					Name \\"bj_cineFadeContinueTimer\\"
				]
				statement: Boolean true
			}
			JASSSet {
				name: String \\"bj_cineFadeContinueTimer\\"
			}
			Call {
				name: String \\"CinematicFadeCommonBJ\\"
				args: Args [
					Name \\"bj_cineFadeContinueRed\\"
					Name \\"bj_cineFadeContinueGreen\\"
					Name \\"bj_cineFadeContinueBlue\\"
					Name \\"bj_cineFadeContinueDuration\\"
					Name \\"bj_cineFadeContinueTex\\"
					Name \\"bj_cineFadeContinueTrans\\"
					Number 100
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ContinueCinematicFadeAfterBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"trans\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"tex\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_cineFadeContinueRed\\"
				value: Name \\"red\\"
			}
			JASSSet {
				name: String \\"bj_cineFadeContinueGreen\\"
				value: Name \\"green\\"
			}
			JASSSet {
				name: String \\"bj_cineFadeContinueBlue\\"
				value: Name \\"blue\\"
			}
			JASSSet {
				name: String \\"bj_cineFadeContinueTrans\\"
				value: Name \\"trans\\"
			}
			JASSSet {
				name: String \\"bj_cineFadeContinueDuration\\"
				value: Name \\"duration\\"
			}
			JASSSet {
				name: String \\"bj_cineFadeContinueTex\\"
				value: Name \\"tex\\"
			}
			EmptyLine {}
			Comment \\" Create a timer to continue the cinematic fade.\\"
			JASSSet {
				name: String \\"bj_cineFadeContinueTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Name \\"bj_cineFadeContinueTimer\\"
					Name \\"duration\\"
					Boolean false
					FuncRef String \\"C\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AbortCinematicFadeBJ\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_cineFadeContinueTimer\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Call {
						name: String \\"DestroyTimer\\"
						args: Args [
							Name \\"bj_cineFadeContinueTimer\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_cineFadeFinishTimer\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Call {
						name: String \\"DestroyTimer\\"
						args: Args [
							Name \\"bj_cineFadeFinishTimer\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CinematicFadeBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"fadetype\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"tex\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"trans\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"fadetype\\"
					operator: String \\"==\\"
					right: Name \\"bj_CINEFADETYPE_FADEOUT\\"
				}
				then: Statements [
					Comment \\" Fade out to the requested color.\\"
					Call {
						name: String \\"AbortCinematicFadeBJ\\"
						statement: Boolean true
					}
					Call {
						name: String \\"CinematicFadeCommonBJ\\"
						args: Args [
							Name \\"red\\"
							Name \\"green\\"
							Name \\"blue\\"
							Name \\"duration\\"
							Name \\"tex\\"
							Number 100
							Name \\"trans\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"fadetype\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEFADETYPE_FADEIN\\"
						}
						statements: Statements [
							Comment \\" Fade in from the requested color.\\"
							Call {
								name: String \\"AbortCinematicFadeBJ\\"
								statement: Boolean true
							}
							Call {
								name: String \\"CinematicFadeCommonBJ\\"
								args: Args [
									Name \\"red\\"
									Name \\"green\\"
									Name \\"blue\\"
									Name \\"duration\\"
									Name \\"tex\\"
									Name \\"trans\\"
									Number 100
								]
								statement: Boolean true
							}
							Call {
								name: String \\"FinishCinematicFadeAfterBJ\\"
								args: Args [
									Name \\"duration\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"fadetype\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEFADETYPE_FADEOUTIN\\"
						}
						statements: Statements [
							Comment \\" Fade out to the requested color, and then fade back in from it.\\"
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"duration\\"
									operator: String \\">\\"
									right: Number 0
								}
								then: Statements [
									Call {
										name: String \\"AbortCinematicFadeBJ\\"
										statement: Boolean true
									}
									Call {
										name: String \\"CinematicFadeCommonBJ\\"
										args: Args [
											Name \\"red\\"
											Name \\"green\\"
											Name \\"blue\\"
											BinaryOp {
												left: Name \\"duration\\"
												operator: String \\"*\\"
												right: Number 0.5
											}
											Name \\"tex\\"
											Number 100
											Name \\"trans\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"ContinueCinematicFadeAfterBJ\\"
										args: Args [
											BinaryOp {
												left: Name \\"duration\\"
												operator: String \\"*\\"
												right: Number 0.5
											}
											Name \\"red\\"
											Name \\"green\\"
											Name \\"blue\\"
											Name \\"trans\\"
											Name \\"tex\\"
										]
										statement: Boolean true
									}
									Call {
										name: String \\"FinishCinematicFadeAfterBJ\\"
										args: Args [
											Name \\"duration\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized fadetype - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CinematicFilterGenericBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"duration\\"
			}
			Param {
				type: String \\"blendmode\\"
				name: String \\"bmode\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"tex\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red0\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green0\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue0\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"trans0\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"red1\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"green1\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"blue1\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"trans1\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AbortCinematicFadeBJ\\"
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterTexture\\"
				args: Args [
					Name \\"tex\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterBlendMode\\"
				args: Args [
					Name \\"bmode\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterTexMapFlags\\"
				args: Args [
					Name \\"TEXMAP_FLAG_NONE\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterStartUV\\"
				args: Args [
					Number 0
					Number 0
					Number 1
					Number 1
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterEndUV\\"
				args: Args [
					Number 0
					Number 0
					Number 1
					Number 1
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterStartColor\\"
				args: Args [
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red0\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green0\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue0\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"trans0\\"
							}
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterEndColor\\"
				args: Args [
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"red1\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"green1\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							Name \\"blue1\\"
						]
					}
					Call {
						name: String \\"PercentTo255\\"
						args: Args [
							BinaryOp {
								left: Number 100
								operator: String \\"-\\"
								right: Name \\"trans1\\"
							}
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCineFilterDuration\\"
				args: Args [
					Name \\"duration\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DisplayCineFilter\\"
				args: Args [
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Rescuable Unit Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Rescues a unit for a player.  This performs the default rescue behavior,\\"
	Comment \\" including a rescue sound, flashing selection circle, ownership change,\\"
	Comment \\" and optionally a unit color change.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"RescueUnitBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"rescuer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"changeColor\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: BinaryOp {
					left: Call {
						name: String \\"IsUnitDeadBJ\\"
						args: Args [
							Name \\"whichUnit\\"
						]
					}
					operator: String \\"or\\"
					right: Parens BinaryOp {
						left: Call {
							name: String \\"GetOwningPlayer\\"
							args: Args [
								Name \\"whichUnit\\"
							]
						}
						operator: String \\"==\\"
						right: Name \\"rescuer\\"
					}
				}
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			Call {
				name: String \\"StartSound\\"
				args: Args [
					Name \\"bj_rescueSound\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetUnitOwner\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"rescuer\\"
					Name \\"changeColor\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"UnitAddIndicator\\"
				args: Args [
					Name \\"whichUnit\\"
					Number 0
					Number 255
					Number 0
					Number 255
				]
				statement: Boolean true
			}
			Call {
				name: String \\"PingMinimapForPlayer\\"
				args: Args [
					Name \\"rescuer\\"
					Call {
						name: String \\"GetUnitX\\"
						args: Args [
							Name \\"whichUnit\\"
						]
					}
					Call {
						name: String \\"GetUnitY\\"
						args: Args [
							Name \\"whichUnit\\"
						]
					}
					Name \\"bj_RESCUE_PING_TIME\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TriggerActionUnitRescuedBJ\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"theUnit\\"
				value: Call {
					name: String \\"GetTriggerUnit\\"
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Call {
					name: String \\"IsUnitType\\"
					args: Args [
						Name \\"theUnit\\"
						Name \\"UNIT_TYPE_STRUCTURE\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"RescueUnitBJ\\"
						args: Args [
							Name \\"theUnit\\"
							Call {
								name: String \\"GetOwningPlayer\\"
								args: Args [
									Call {
										name: String \\"GetRescuer\\"
									}
								]
							}
							Name \\"bj_rescueChangeColorBldg\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"RescueUnitBJ\\"
								args: Args [
									Name \\"theUnit\\"
									Call {
										name: String \\"GetOwningPlayer\\"
										args: Args [
											Call {
												name: String \\"GetRescuer\\"
											}
										]
									}
									Name \\"bj_rescueChangeColorUnit\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Attempt to init triggers for default rescue behavior.  For performance\\"
	Comment \\" reasons, this should only be attempted if a player is set to Rescuable,\\"
	Comment \\" or if a specific unit is thus flagged.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"TryInitRescuableTriggersBJ\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_rescueUnitBehavior\\"
					operator: String \\"==\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_rescueUnitBehavior\\"
						value: Call {
							name: String \\"CreateTrigger\\"
						}
					}
					JASSSet {
						name: String \\"index\\"
						value: Number 0
					}
					Loop {
						statements: Statements [
							Call {
								name: String \\"TriggerRegisterPlayerUnitEvent\\"
								args: Args [
									Name \\"bj_rescueUnitBehavior\\"
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"index\\"
										]
									}
									Name \\"EVENT_PLAYER_UNIT_RESCUED\\"
									Null
								]
								statement: Boolean true
							}
							JASSSet {
								name: String \\"index\\"
								value: BinaryOp {
									left: Name \\"index\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"index\\"
								operator: String \\"==\\"
								right: Name \\"bj_MAX_PLAYER_SLOTS\\"
							}
						]
					}
					Call {
						name: String \\"TriggerAddAction\\"
						args: Args [
							Name \\"bj_rescueUnitBehavior\\"
							FuncRef String \\"T\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Determines whether or not rescued units automatically change color upon\\"
	Comment \\" being rescued.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetRescueUnitColorChangeBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"changeColor\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_rescueChangeColorUnit\\"
				value: Name \\"changeColor\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Determines whether or not rescued buildings automatically change color\\"
	Comment \\" upon being rescued.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetRescueBuildingColorChangeBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"changeColor\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_rescueChangeColorBldg\\"
				value: Name \\"changeColor\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MakeUnitRescuableToForceBJEnum\\"
		statements: Statements [
			Call {
				name: String \\"TryInitRescuableTriggersBJ\\"
				statement: Boolean true
			}
			Call {
				name: String \\"SetUnitRescuable\\"
				args: Args [
					Name \\"bj_makeUnitRescuableUnit\\"
					Call {
						name: String \\"GetEnumPlayer\\"
					}
					Name \\"bj_makeUnitRescuableFlag\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MakeUnitRescuableToForceBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"isRescuable\\"
			}
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
		]
		statements: Statements [
			Comment \\" Flag the unit as rescuable/unrescuable for the appropriate players.\\"
			JASSSet {
				name: String \\"bj_makeUnitRescuableUnit\\"
				value: Name \\"whichUnit\\"
			}
			JASSSet {
				name: String \\"bj_makeUnitRescuableFlag\\"
				value: Name \\"isRescuable\\"
			}
			Call {
				name: String \\"ForForce\\"
				args: Args [
					Name \\"whichForce\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitRescuableBehaviorBJ\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					Comment \\" If at least one player slot is \\\\\\"Rescuable\\\\\\"-controlled, init the\\"
					Comment \\" rescue behavior triggers.\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerController\\"
								args: Args [
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"index\\"
										]
									}
								]
							}
							operator: String \\"==\\"
							right: Name \\"MAP_CONTROL_RESCUABLE\\"
						}
						then: Statements [
							Call {
								name: String \\"TryInitRescuableTriggersBJ\\"
								statement: Boolean true
							}
							Return __undefined__
						]
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Research and Upgrade Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerTechResearchedSwap\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"techid\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"levels\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerTechResearched\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"techid\\"
					Name \\"levels\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerTechMaxAllowedSwap\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"techid\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"maximum\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerTechMaxAllowed\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"techid\\"
					Name \\"maximum\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerMaxHeroesAllowed\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"maximum\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerTechMaxAllowed\\"
				args: Args [
					Name \\"whichPlayer\\"
					FourCC \\"HERO\\"
					Name \\"maximum\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerTechCountSimple\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"techid\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetPlayerTechCount\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"techid\\"
					Boolean true
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerTechMaxAllowedSwap\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"techid\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetPlayerTechMaxAllowed\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"techid\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerAbilityAvailableBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"avail\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"abilid\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerAbilityAvailable\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"abilid\\"
					Name \\"avail\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Campaign Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	JASSFunction {
		name: String \\"SetCampaignMenuRaceBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"campaignNumber\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"campaignNumber\\"
					operator: String \\"==\\"
					right: Name \\"bj_CAMPAIGN_INDEX_T\\"
				}
				then: Statements [
					Call {
						name: String \\"SetCampaignMenuRace\\"
						args: Args [
							Name \\"RACE_OTHER\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_H\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetCampaignMenuRace\\"
								args: Args [
									Name \\"RACE_HUMAN\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_U\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetCampaignMenuRace\\"
								args: Args [
									Name \\"RACE_UNDEAD\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_O\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetCampaignMenuRace\\"
								args: Args [
									Name \\"RACE_ORC\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_N\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetCampaignMenuRace\\"
								args: Args [
									Name \\"RACE_NIGHTELF\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_XN\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetCampaignMenuRaceEx\\"
								args: Args [
									Name \\"bj_CAMPAIGN_OFFSET_XN\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_XH\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetCampaignMenuRaceEx\\"
								args: Args [
									Name \\"bj_CAMPAIGN_OFFSET_XH\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_XU\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetCampaignMenuRaceEx\\"
								args: Args [
									Name \\"bj_CAMPAIGN_OFFSET_XU\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_XO\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetCampaignMenuRaceEx\\"
								args: Args [
									Name \\"bj_CAMPAIGN_OFFSET_XO\\"
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized campaign - ignore the request\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Converts a single campaign mission designation into campaign and mission\\"
	Comment \\" numbers.  The 1000's digit is considered the campaign index, and the 1's\\"
	Comment \\" digit is considered the mission index within that campaign.  This is done\\"
	Comment \\" so that the trigger for this can use a single drop-down to list all of\\"
	Comment \\" the campaign missions.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetMissionAvailableBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"available\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionIndex\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"campaignNumber\\"
				value: BinaryOp {
					left: Name \\"missionIndex\\"
					operator: String \\"/\\"
					right: Number 1000
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"missionNumber\\"
				value: BinaryOp {
					left: Name \\"missionIndex\\"
					operator: String \\"-\\"
					right: BinaryOp {
						left: Name \\"campaignNumber\\"
						operator: String \\"*\\"
						right: Number 1000
					}
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetMissionAvailable\\"
				args: Args [
					Name \\"campaignNumber\\"
					Name \\"missionNumber\\"
					Name \\"available\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCampaignAvailableBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"available\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"campaignNumber\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"campaignOffset\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"campaignNumber\\"
					operator: String \\"==\\"
					right: Name \\"bj_CAMPAIGN_INDEX_H\\"
				}
				then: Statements [
					Call {
						name: String \\"SetTutorialCleared\\"
						args: Args [
							Boolean true
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"campaignNumber\\"
					operator: String \\"==\\"
					right: Name \\"bj_CAMPAIGN_INDEX_XN\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"campaignOffset\\"
						value: Name \\"bj_CAMPAIGN_OFFSET_XN\\"
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_XH\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"campaignOffset\\"
								value: Name \\"bj_CAMPAIGN_OFFSET_XH\\"
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_XU\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"campaignOffset\\"
								value: Name \\"bj_CAMPAIGN_OFFSET_XU\\"
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"campaignNumber\\"
							operator: String \\"==\\"
							right: Name \\"bj_CAMPAIGN_INDEX_XO\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"campaignOffset\\"
								value: Name \\"bj_CAMPAIGN_OFFSET_XO\\"
							}
						]
					}
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"campaignOffset\\"
								value: Name \\"campaignNumber\\"
							}
						]
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"SetCampaignAvailable\\"
				args: Args [
					Name \\"campaignOffset\\"
					Name \\"available\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetCampaignMenuRaceBJ\\"
				args: Args [
					Name \\"campaignNumber\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForceCampaignSelectScreen\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetCinematicAvailableBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"available\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"cinematicIndex\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"cinematicIndex\\"
					operator: String \\"==\\"
					right: Name \\"bj_CINEMATICINDEX_TOP\\"
				}
				then: Statements [
					Call {
						name: String \\"SetOpCinematicAvailable\\"
						args: Args [
							Name \\"bj_CAMPAIGN_INDEX_T\\"
							Name \\"available\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"PlayCinematic\\"
						args: Args [
							String \\"TutorialOp\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_HOP\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetOpCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_INDEX_H\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"HumanOp\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_HED\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetEdCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_INDEX_H\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"HumanEd\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_OOP\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetOpCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_INDEX_O\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"OrcOp\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_OED\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetEdCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_INDEX_O\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"OrcEd\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_UOP\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetEdCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_INDEX_U\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"UndeadOp\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_UED\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetEdCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_INDEX_U\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"UndeadEd\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_NOP\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetEdCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_INDEX_N\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"NightElfOp\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_NED\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetEdCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_INDEX_N\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"NightElfEd\\"
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_XOP\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetOpCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_OFFSET_XN\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Comment \\" call PlayCinematic( \\\\\\"IntroX\\\\\\" )\\"
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"cinematicIndex\\"
							operator: String \\"==\\"
							right: Name \\"bj_CINEMATICINDEX_XED\\"
						}
						statements: Statements [
							Call {
								name: String \\"SetEdCinematicAvailable\\"
								args: Args [
									Name \\"bj_CAMPAIGN_OFFSET_XU\\"
									Name \\"available\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"PlayCinematic\\"
								args: Args [
									String \\"OutroX\\"
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized cinematic - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitGameCacheBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"campaignFile\\"
			}
		]
		returns: String \\"gamecache\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedGameCache\\"
				value: Call {
					name: String \\"InitGameCache\\"
					args: Args [
						Name \\"campaignFile\\"
					]
				}
			}
			Return Name \\"bj_lastCreatedGameCache\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveGameCacheBJ\\"
		params: Params [
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveGameCache\\"
				args: Args [
					Name \\"cache\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedGameCacheBJ\\"
		returns: String \\"gamecache\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedGameCache\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitHashtableBJ\\"
		returns: String \\"hashtable\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastCreatedHashtable\\"
				value: Call {
					name: String \\"InitHashtable\\"
				}
			}
			Return Name \\"bj_lastCreatedHashtable\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastCreatedHashtableBJ\\"
		returns: String \\"hashtable\\"
		statements: Statements [
			Return Name \\"bj_lastCreatedHashtable\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StoreRealBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"StoreReal\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"value\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StoreIntegerBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"StoreInteger\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"value\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StoreBooleanBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"StoreBoolean\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"value\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StoreStringBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"StoreString\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"value\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"StoreUnitBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"StoreUnit\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveRealBJ\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SaveReal\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"value\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveIntegerBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SaveInteger\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"value\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveBooleanBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SaveBoolean\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"value\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveStringBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveStr\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"value\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SavePlayerHandleBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SavePlayerHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichPlayer\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveWidgetHandleBJ\\"
		params: Params [
			Param {
				type: String \\"widget\\"
				name: String \\"whichWidget\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveWidgetHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichWidget\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveDestructableHandleBJ\\"
		params: Params [
			Param {
				type: String \\"destructable\\"
				name: String \\"whichDestructable\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveDestructableHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichDestructable\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveItemHandleBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveItemHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichItem\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveUnitHandleBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveUnitHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichUnit\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveAbilityHandleBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveAbilityHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichAbility\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveTimerHandleBJ\\"
		params: Params [
			Param {
				type: String \\"timer\\"
				name: String \\"whichTimer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveTimerHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichTimer\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveTriggerHandleBJ\\"
		params: Params [
			Param {
				type: String \\"trigger\\"
				name: String \\"whichTrigger\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveTriggerHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichTrigger\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveTriggerConditionHandleBJ\\"
		params: Params [
			Param {
				type: String \\"triggercondition\\"
				name: String \\"whichTriggercondition\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveTriggerConditionHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichTriggercondition\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveTriggerActionHandleBJ\\"
		params: Params [
			Param {
				type: String \\"triggeraction\\"
				name: String \\"whichTriggeraction\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveTriggerActionHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichTriggeraction\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveTriggerEventHandleBJ\\"
		params: Params [
			Param {
				type: String \\"event\\"
				name: String \\"whichEvent\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveTriggerEventHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichEvent\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveForceHandleBJ\\"
		params: Params [
			Param {
				type: String \\"force\\"
				name: String \\"whichForce\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveForceHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichForce\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveGroupHandleBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveGroupHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichGroup\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveLocationHandleBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"whichLocation\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveLocationHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichLocation\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveRectHandleBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"whichRect\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveRectHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichRect\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveBooleanExprHandleBJ\\"
		params: Params [
			Param {
				type: String \\"boolexpr\\"
				name: String \\"whichBoolexpr\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveBooleanExprHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichBoolexpr\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveSoundHandleBJ\\"
		params: Params [
			Param {
				type: String \\"sound\\"
				name: String \\"whichSound\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveSoundHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichSound\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveEffectHandleBJ\\"
		params: Params [
			Param {
				type: String \\"effect\\"
				name: String \\"whichEffect\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveEffectHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichEffect\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveUnitPoolHandleBJ\\"
		params: Params [
			Param {
				type: String \\"unitpool\\"
				name: String \\"whichUnitpool\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveUnitPoolHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichUnitpool\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveItemPoolHandleBJ\\"
		params: Params [
			Param {
				type: String \\"itempool\\"
				name: String \\"whichItempool\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveItemPoolHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichItempool\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveQuestHandleBJ\\"
		params: Params [
			Param {
				type: String \\"quest\\"
				name: String \\"whichQuest\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveQuestHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichQuest\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveQuestItemHandleBJ\\"
		params: Params [
			Param {
				type: String \\"questitem\\"
				name: String \\"whichQuestitem\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveQuestItemHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichQuestitem\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveDefeatConditionHandleBJ\\"
		params: Params [
			Param {
				type: String \\"defeatcondition\\"
				name: String \\"whichDefeatcondition\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveDefeatConditionHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichDefeatcondition\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveTimerDialogHandleBJ\\"
		params: Params [
			Param {
				type: String \\"timerdialog\\"
				name: String \\"whichTimerdialog\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveTimerDialogHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichTimerdialog\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveLeaderboardHandleBJ\\"
		params: Params [
			Param {
				type: String \\"leaderboard\\"
				name: String \\"whichLeaderboard\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveLeaderboardHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichLeaderboard\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveMultiboardHandleBJ\\"
		params: Params [
			Param {
				type: String \\"multiboard\\"
				name: String \\"whichMultiboard\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveMultiboardHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichMultiboard\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveMultiboardItemHandleBJ\\"
		params: Params [
			Param {
				type: String \\"multiboarditem\\"
				name: String \\"whichMultiboarditem\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveMultiboardItemHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichMultiboarditem\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveTrackableHandleBJ\\"
		params: Params [
			Param {
				type: String \\"trackable\\"
				name: String \\"whichTrackable\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveTrackableHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichTrackable\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveDialogHandleBJ\\"
		params: Params [
			Param {
				type: String \\"dialog\\"
				name: String \\"whichDialog\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveDialogHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichDialog\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveButtonHandleBJ\\"
		params: Params [
			Param {
				type: String \\"button\\"
				name: String \\"whichButton\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveButtonHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichButton\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveTextTagHandleBJ\\"
		params: Params [
			Param {
				type: String \\"texttag\\"
				name: String \\"whichTexttag\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveTextTagHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichTexttag\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveLightningHandleBJ\\"
		params: Params [
			Param {
				type: String \\"lightning\\"
				name: String \\"whichLightning\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveLightningHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichLightning\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveImageHandleBJ\\"
		params: Params [
			Param {
				type: String \\"image\\"
				name: String \\"whichImage\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveImageHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichImage\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveUbersplatHandleBJ\\"
		params: Params [
			Param {
				type: String \\"ubersplat\\"
				name: String \\"whichUbersplat\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveUbersplatHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichUbersplat\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveRegionHandleBJ\\"
		params: Params [
			Param {
				type: String \\"region\\"
				name: String \\"whichRegion\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveRegionHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichRegion\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveFogStateHandleBJ\\"
		params: Params [
			Param {
				type: String \\"fogstate\\"
				name: String \\"whichFogState\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveFogStateHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichFogState\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveFogModifierHandleBJ\\"
		params: Params [
			Param {
				type: String \\"fogmodifier\\"
				name: String \\"whichFogModifier\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveFogModifierHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichFogModifier\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveAgentHandleBJ\\"
		params: Params [
			Param {
				type: String \\"agent\\"
				name: String \\"whichAgent\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveAgentHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichAgent\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveHashtableHandleBJ\\"
		params: Params [
			Param {
				type: String \\"hashtable\\"
				name: String \\"whichHashtable\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"SaveHashtableHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
					Name \\"whichHashtable\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetStoredRealBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Comment \\"call SyncStoredReal(cache, missionKey, key)\\"
			Return Call {
				name: String \\"GetStoredReal\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetStoredIntegerBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Comment \\"call SyncStoredInteger(cache, missionKey, key)\\"
			Return Call {
				name: String \\"GetStoredInteger\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetStoredBooleanBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Comment \\"call SyncStoredBoolean(cache, missionKey, key)\\"
			Return Call {
				name: String \\"GetStoredBoolean\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetStoredStringBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Variable {
				type: String \\"string\\"
				name: String \\"s\\"
			}
			EmptyLine {}
			Comment \\"call SyncStoredString(cache, missionKey, key)\\"
			JASSSet {
				name: String \\"s\\"
				value: Call {
					name: String \\"GetStoredString\\"
					args: Args [
						Name \\"cache\\"
						Name \\"missionKey\\"
						Name \\"key\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"s\\"
					operator: String \\"==\\"
				}
				then: Statements [
					Return String \\"\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Name \\"s\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadRealBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Comment \\"call SyncStoredReal(table, missionKey, key)\\"
			Return Call {
				name: String \\"LoadReal\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadIntegerBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Comment \\"call SyncStoredInteger(table, missionKey, key)\\"
			Return Call {
				name: String \\"LoadInteger\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadBooleanBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Comment \\"call SyncStoredBoolean(table, missionKey, key)\\"
			Return Call {
				name: String \\"LoadBoolean\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadStringBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Variable {
				type: String \\"string\\"
				name: String \\"s\\"
			}
			EmptyLine {}
			Comment \\"call SyncStoredString(table, missionKey, key)\\"
			JASSSet {
				name: String \\"s\\"
				value: Call {
					name: String \\"LoadStr\\"
					args: Args [
						Name \\"table\\"
						Name \\"missionKey\\"
						Name \\"key\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"s\\"
					operator: String \\"==\\"
				}
				then: Statements [
					Return String \\"\\"
				]
				elses: Array [
					Else {
						statements: Statements [
							Return Name \\"s\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadPlayerHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"player\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadPlayerHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadWidgetHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"widget\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadWidgetHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadDestructableHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"destructable\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadDestructableHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadItemHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadItemHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadUnitHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadUnitHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadAbilityHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"ability\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadAbilityHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadTimerHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"timer\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadTimerHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadTriggerHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"trigger\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadTriggerHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadTriggerConditionHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"triggercondition\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadTriggerConditionHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadTriggerActionHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"triggeraction\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadTriggerActionHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadTriggerEventHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"event\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadTriggerEventHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadForceHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"force\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadForceHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadGroupHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"group\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadGroupHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadLocationHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadLocationHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadRectHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"rect\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadRectHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadBooleanExprHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolexpr\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadBooleanExprHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadSoundHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"sound\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadSoundHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadEffectHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"effect\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadEffectHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadUnitPoolHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"unitpool\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadUnitPoolHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadItemPoolHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"itempool\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadItemPoolHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadQuestHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"quest\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadQuestHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadQuestItemHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"questitem\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadQuestItemHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadDefeatConditionHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"defeatcondition\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadDefeatConditionHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadTimerDialogHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"timerdialog\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadTimerDialogHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadLeaderboardHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"leaderboard\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadLeaderboardHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadMultiboardHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"multiboard\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadMultiboardHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadMultiboardItemHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"multiboarditem\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadMultiboardItemHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadTrackableHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"trackable\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadTrackableHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadDialogHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"dialog\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadDialogHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadButtonHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"button\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadButtonHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadTextTagHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"texttag\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadTextTagHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadLightningHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"lightning\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadLightningHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadImageHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"image\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadImageHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadUbersplatHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"ubersplat\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadUbersplatHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadRegionHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"region\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadRegionHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadFogStateHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"fogstate\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadFogStateHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadFogModifierHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"fogmodifier\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadFogModifierHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadHashtableHandleBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"hashtable\\"
		statements: Statements [
			Return Call {
				name: String \\"LoadHashtableHandle\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
					Name \\"key\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RestoreUnitLocFacingAngleBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"forWhichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"facing\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			Comment \\"call SyncStoredUnit(cache, missionKey, key)\\"
			JASSSet {
				name: String \\"bj_lastLoadedUnit\\"
				value: Call {
					name: String \\"RestoreUnit\\"
					args: Args [
						Name \\"cache\\"
						Name \\"missionKey\\"
						Name \\"key\\"
						Name \\"forWhichPlayer\\"
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"loc\\"
							]
						}
						Name \\"facing\\"
					]
				}
			}
			Return Name \\"bj_lastLoadedUnit\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RestoreUnitLocFacingPointBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"forWhichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"lookAt\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			Comment \\"call SyncStoredUnit(cache, missionKey, key)\\"
			Return Call {
				name: String \\"RestoreUnitLocFacingAngleBJ\\"
				args: Args [
					Name \\"key\\"
					Name \\"missionKey\\"
					Name \\"cache\\"
					Name \\"forWhichPlayer\\"
					Name \\"loc\\"
					Call {
						name: String \\"AngleBetweenPoints\\"
						args: Args [
							Name \\"loc\\"
							Name \\"lookAt\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastRestoredUnitBJ\\"
		returns: String \\"unit\\"
		statements: Statements [
			Return Name \\"bj_lastLoadedUnit\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FlushGameCacheBJ\\"
		params: Params [
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"FlushGameCache\\"
				args: Args [
					Name \\"cache\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FlushStoredMissionBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"FlushStoredMission\\"
				args: Args [
					Name \\"cache\\"
					Name \\"missionKey\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FlushParentHashtableBJ\\"
		params: Params [
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"FlushParentHashtable\\"
				args: Args [
					Name \\"table\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FlushChildHashtableBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"FlushChildHashtable\\"
				args: Args [
					Name \\"table\\"
					Name \\"missionKey\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"HaveStoredValue\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"valueType\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"gamecache\\"
				name: String \\"cache\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"valueType\\"
					operator: String \\"==\\"
					right: Name \\"bj_GAMECACHE_BOOLEAN\\"
				}
				then: Statements [
					Return Call {
						name: String \\"HaveStoredBoolean\\"
						args: Args [
							Name \\"cache\\"
							Name \\"missionKey\\"
							Name \\"key\\"
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"valueType\\"
							operator: String \\"==\\"
							right: Name \\"bj_GAMECACHE_INTEGER\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"HaveStoredInteger\\"
								args: Args [
									Name \\"cache\\"
									Name \\"missionKey\\"
									Name \\"key\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"valueType\\"
							operator: String \\"==\\"
							right: Name \\"bj_GAMECACHE_REAL\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"HaveStoredReal\\"
								args: Args [
									Name \\"cache\\"
									Name \\"missionKey\\"
									Name \\"key\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"valueType\\"
							operator: String \\"==\\"
							right: Name \\"bj_GAMECACHE_UNIT\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"HaveStoredUnit\\"
								args: Args [
									Name \\"cache\\"
									Name \\"missionKey\\"
									Name \\"key\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"valueType\\"
							operator: String \\"==\\"
							right: Name \\"bj_GAMECACHE_STRING\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"HaveStoredString\\"
								args: Args [
									Name \\"cache\\"
									Name \\"missionKey\\"
									Name \\"key\\"
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized value type - ignore the request.\\"
							Return Boolean false
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"HaveSavedValue\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"key\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"valueType\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"missionKey\\"
			}
			Param {
				type: String \\"hashtable\\"
				name: String \\"table\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"valueType\\"
					operator: String \\"==\\"
					right: Name \\"bj_HASHTABLE_BOOLEAN\\"
				}
				then: Statements [
					Return Call {
						name: String \\"HaveSavedBoolean\\"
						args: Args [
							Name \\"table\\"
							Name \\"missionKey\\"
							Name \\"key\\"
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"valueType\\"
							operator: String \\"==\\"
							right: Name \\"bj_HASHTABLE_INTEGER\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"HaveSavedInteger\\"
								args: Args [
									Name \\"table\\"
									Name \\"missionKey\\"
									Name \\"key\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"valueType\\"
							operator: String \\"==\\"
							right: Name \\"bj_HASHTABLE_REAL\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"HaveSavedReal\\"
								args: Args [
									Name \\"table\\"
									Name \\"missionKey\\"
									Name \\"key\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"valueType\\"
							operator: String \\"==\\"
							right: Name \\"bj_HASHTABLE_STRING\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"HaveSavedString\\"
								args: Args [
									Name \\"table\\"
									Name \\"missionKey\\"
									Name \\"key\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"valueType\\"
							operator: String \\"==\\"
							right: Name \\"bj_HASHTABLE_HANDLE\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"HaveSavedHandle\\"
								args: Args [
									Name \\"table\\"
									Name \\"missionKey\\"
									Name \\"key\\"
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized value type - ignore the request.\\"
							Return Boolean false
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ShowCustomCampaignButton\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"show\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"whichButton\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetCustomCampaignButtonVisible\\"
				args: Args [
					BinaryOp {
						left: Name \\"whichButton\\"
						operator: String \\"-\\"
						right: Number 1
					}
					Name \\"show\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsCustomCampaignButtonVisibile\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"whichButton\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"GetCustomCampaignButtonVisible\\"
				args: Args [
					BinaryOp {
						left: Name \\"whichButton\\"
						operator: String \\"-\\"
						right: Number 1
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Placeholder function for auto save feature\\"
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveGameCheckPointBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"mapSaveName\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doCheckpointHint\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SaveGameCheckpoint\\"
				args: Args [
					Name \\"mapSaveName\\"
					Name \\"doCheckpointHint\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LoadGameBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"loadFileName\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doScoreScreen\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"LoadGame\\"
				args: Args [
					Name \\"loadFileName\\"
					Name \\"doScoreScreen\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveAndChangeLevelBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"saveFileName\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"newLevel\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doScoreScreen\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SaveGame\\"
				args: Args [
					Name \\"saveFileName\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ChangeLevel\\"
				args: Args [
					Name \\"newLevel\\"
					Name \\"doScoreScreen\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SaveAndLoadGameBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"saveFileName\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"loadFileName\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doScoreScreen\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SaveGame\\"
				args: Args [
					Name \\"saveFileName\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"LoadGame\\"
				args: Args [
					Name \\"loadFileName\\"
					Name \\"doScoreScreen\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RenameSaveDirectoryBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"sourceDirName\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"destDirName\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"RenameSaveDirectory\\"
				args: Args [
					Name \\"sourceDirName\\"
					Name \\"destDirName\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RemoveSaveDirectoryBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"sourceDirName\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"RemoveSaveDirectory\\"
				args: Args [
					Name \\"sourceDirName\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CopySaveGameBJ\\"
		params: Params [
			Param {
				type: String \\"string\\"
				name: String \\"sourceSaveName\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"destSaveName\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"CopySaveGame\\"
				args: Args [
					Name \\"sourceSaveName\\"
					Name \\"destSaveName\\"
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Miscellaneous Utility Functions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerStartLocationX\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetStartLocationX\\"
				args: Args [
					Call {
						name: String \\"GetPlayerStartLocation\\"
						args: Args [
							Name \\"whichPlayer\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerStartLocationY\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return Call {
				name: String \\"GetStartLocationY\\"
				args: Args [
					Call {
						name: String \\"GetPlayerStartLocation\\"
						args: Args [
							Name \\"whichPlayer\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerStartLocationLoc\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Return Call {
				name: String \\"GetStartLocationLoc\\"
				args: Args [
					Call {
						name: String \\"GetPlayerStartLocation\\"
						args: Args [
							Name \\"whichPlayer\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetRectCenter\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"whichRect\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Return Call {
				name: String \\"Location\\"
				args: Args [
					Call {
						name: String \\"GetRectCenterX\\"
						args: Args [
							Name \\"whichRect\\"
						]
					}
					Call {
						name: String \\"GetRectCenterY\\"
						args: Args [
							Name \\"whichRect\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsPlayerSlotState\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"playerslotstate\\"
				name: String \\"whichState\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetPlayerSlotState\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
				operator: String \\"==\\"
				right: Name \\"whichState\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetFadeFromSeconds\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"seconds\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"seconds\\"
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					Return BinaryOp {
						left: Number 128
						operator: String \\"/\\"
						right: Call {
							name: String \\"R2I\\"
							args: Args [
								Name \\"seconds\\"
							]
						}
					}
				]
			}
			Return Number 10000
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetFadeFromSecondsAsReal\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"seconds\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"seconds\\"
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					Return BinaryOp {
						left: Number 128
						operator: String \\"/\\"
						right: Name \\"seconds\\"
					}
				]
			}
			Return Number 10000
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AdjustPlayerStateSimpleBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"playerstate\\"
				name: String \\"whichPlayerState\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"delta\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerState\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"whichPlayerState\\"
					BinaryOp {
						left: Call {
							name: String \\"GetPlayerState\\"
							args: Args [
								Name \\"whichPlayer\\"
								Name \\"whichPlayerState\\"
							]
						}
						operator: String \\"+\\"
						right: Name \\"delta\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AdjustPlayerStateBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"delta\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"playerstate\\"
				name: String \\"whichPlayerState\\"
			}
		]
		statements: Statements [
			Comment \\" If the change was positive, apply the difference to the player's\\"
			Comment \\" gathered resources property as well.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"delta\\"
					operator: String \\">\\"
					right: Number 0
				}
				then: Statements [
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"whichPlayerState\\"
							operator: String \\"==\\"
							right: Name \\"PLAYER_STATE_RESOURCE_GOLD\\"
						}
						then: Statements [
							Call {
								name: String \\"AdjustPlayerStateSimpleBJ\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"PLAYER_STATE_GOLD_GATHERED\\"
									Name \\"delta\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							ElseIf {
								condition: Parens BinaryOp {
									left: Name \\"whichPlayerState\\"
									operator: String \\"==\\"
									right: Name \\"PLAYER_STATE_RESOURCE_LUMBER\\"
								}
								statements: Statements [
									Call {
										name: String \\"AdjustPlayerStateSimpleBJ\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"PLAYER_STATE_LUMBER_GATHERED\\"
											Name \\"delta\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"AdjustPlayerStateSimpleBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"whichPlayerState\\"
					Name \\"delta\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerStateBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"playerstate\\"
				name: String \\"whichPlayerState\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"oldValue\\"
				value: Call {
					name: String \\"GetPlayerState\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"whichPlayerState\\"
					]
				}
			}
			Call {
				name: String \\"AdjustPlayerStateBJ\\"
				args: Args [
					BinaryOp {
						left: Name \\"value\\"
						operator: String \\"-\\"
						right: Name \\"oldValue\\"
					}
					Name \\"whichPlayer\\"
					Name \\"whichPlayerState\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerFlagBJ\\"
		params: Params [
			Param {
				type: String \\"playerstate\\"
				name: String \\"whichPlayerFlag\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"flag\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerState\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"whichPlayerFlag\\"
					Call {
						name: String \\"IntegerTertiaryOp\\"
						args: Args [
							Name \\"flag\\"
							Number 1
							Number 0
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerTaxRateBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"rate\\"
			}
			Param {
				type: String \\"playerstate\\"
				name: String \\"whichResource\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"sourcePlayer\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"otherPlayer\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetPlayerTaxRate\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"whichResource\\"
					Name \\"rate\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetPlayerTaxRateBJ\\"
		params: Params [
			Param {
				type: String \\"playerstate\\"
				name: String \\"whichResource\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"sourcePlayer\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"otherPlayer\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return Call {
				name: String \\"GetPlayerTaxRate\\"
				args: Args [
					Name \\"sourcePlayer\\"
					Name \\"otherPlayer\\"
					Name \\"whichResource\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsPlayerFlagSetBJ\\"
		params: Params [
			Param {
				type: String \\"playerstate\\"
				name: String \\"whichPlayerFlag\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetPlayerState\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"whichPlayerFlag\\"
					]
				}
				operator: String \\"==\\"
				right: Number 1
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"AddResourceAmountBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"delta\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"AddResourceAmount\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"delta\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetConvertedPlayerId\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetPlayerId\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
				operator: String \\"+\\"
				right: Number 1
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ConvertedPlayer\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"convertedPlayerId\\"
			}
		]
		returns: String \\"player\\"
		statements: Statements [
			Return Call {
				name: String \\"Player\\"
				args: Args [
					BinaryOp {
						left: Name \\"convertedPlayerId\\"
						operator: String \\"-\\"
						right: Number 1
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetRectWidthBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetRectMaxX\\"
					args: Args [
						Name \\"r\\"
					]
				}
				operator: String \\"-\\"
				right: Call {
					name: String \\"GetRectMinX\\"
					args: Args [
						Name \\"r\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetRectHeightBJ\\"
		params: Params [
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			Return BinaryOp {
				left: Call {
					name: String \\"GetRectMaxY\\"
					args: Args [
						Name \\"r\\"
					]
				}
				operator: String \\"-\\"
				right: Call {
					name: String \\"GetRectMinY\\"
					args: Args [
						Name \\"r\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Replaces a gold mine with a blighted gold mine for the given player.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"BlightGoldMineForPlayerBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"goldMine\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"mineX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"mineY\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"mineGold\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"newMine\\"
			}
			EmptyLine {}
			Comment \\" Make sure we're replacing a Gold Mine and not some other type of unit.\\"
			IfThenElse {
				condition: BinaryOp {
					left: Call {
						name: String \\"GetUnitTypeId\\"
						args: Args [
							Name \\"goldMine\\"
						]
					}
					operator: String \\"!=\\"
					right: FourCC \\"ngol\\"
				}
				then: Statements [
					Return Null
				]
			}
			EmptyLine {}
			Comment \\" Save the Gold Mine's properties and remove it.\\"
			JASSSet {
				name: String \\"mineX\\"
				value: Call {
					name: String \\"GetUnitX\\"
					args: Args [
						Name \\"goldMine\\"
					]
				}
			}
			JASSSet {
				name: String \\"mineY\\"
				value: Call {
					name: String \\"GetUnitY\\"
					args: Args [
						Name \\"goldMine\\"
					]
				}
			}
			JASSSet {
				name: String \\"mineGold\\"
				value: Call {
					name: String \\"GetResourceAmount\\"
					args: Args [
						Name \\"goldMine\\"
					]
				}
			}
			Call {
				name: String \\"RemoveUnit\\"
				args: Args [
					Name \\"goldMine\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Create a Haunted Gold Mine to replace the Gold Mine.\\"
			JASSSet {
				name: String \\"newMine\\"
				value: Call {
					name: String \\"CreateBlightedGoldmine\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"mineX\\"
						Name \\"mineY\\"
						Name \\"bj_UNIT_FACING\\"
					]
				}
			}
			Call {
				name: String \\"SetResourceAmount\\"
				args: Args [
					Name \\"newMine\\"
					Name \\"mineGold\\"
				]
				statement: Boolean true
			}
			Return Name \\"newMine\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlightGoldMineForPlayer\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"goldMine\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastHauntedGoldMine\\"
				value: Call {
					name: String \\"BlightGoldMineForPlayerBJ\\"
					args: Args [
						Name \\"goldMine\\"
						Name \\"whichPlayer\\"
					]
				}
			}
			Return Name \\"bj_lastHauntedGoldMine\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetLastHauntedGoldMine\\"
		returns: String \\"unit\\"
		statements: Statements [
			Return Name \\"bj_lastHauntedGoldMine\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IsPointBlightedBJ\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"where\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsPointBlighted\\"
				args: Args [
					Call {
						name: String \\"GetLocationX\\"
						args: Args [
							Name \\"where\\"
						]
					}
					Call {
						name: String \\"GetLocationY\\"
						args: Args [
							Name \\"where\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerColorBJEnum\\"
		statements: Statements [
			Call {
				name: String \\"SetUnitColor\\"
				args: Args [
					Call {
						name: String \\"GetEnumUnit\\"
					}
					Name \\"bj_setPlayerTargetColor\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerColorBJ\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"playercolor\\"
				name: String \\"color\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"changeExisting\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			EmptyLine {}
			Call {
				name: String \\"SetPlayerColor\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"color\\"
				]
				statement: Boolean true
			}
			IfThenElse {
				condition: Name \\"changeExisting\\"
				then: Statements [
					JASSSet {
						name: String \\"bj_setPlayerTargetColor\\"
						value: Name \\"color\\"
					}
					JASSSet {
						name: String \\"g\\"
						value: Call {
							name: String \\"CreateGroup\\"
						}
					}
					Call {
						name: String \\"GroupEnumUnitsOfPlayer\\"
						args: Args [
							Name \\"g\\"
							Name \\"whichPlayer\\"
							Null
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ForGroup\\"
						args: Args [
							Name \\"g\\"
							FuncRef String \\"S\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"DestroyGroup\\"
						args: Args [
							Name \\"g\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerUnitAvailableBJ\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"unitId\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"allowed\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Name \\"allowed\\"
				then: Statements [
					Call {
						name: String \\"SetPlayerTechMaxAllowed\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"unitId\\"
							UnaryOp {
								operator: String \\"-\\"
								expr: Number 1
							}
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Call {
								name: String \\"SetPlayerTechMaxAllowed\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"unitId\\"
									Number 0
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"LockGameSpeedBJ\\"
		statements: Statements [
			Call {
				name: String \\"SetMapFlag\\"
				args: Args [
					Name \\"MAP_LOCK_SPEED\\"
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UnlockGameSpeedBJ\\"
		statements: Statements [
			Call {
				name: String \\"SetMapFlag\\"
				args: Args [
					Name \\"MAP_LOCK_SPEED\\"
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IssueTargetOrderBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"targetWidget\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IssueTargetOrder\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"order\\"
					Name \\"targetWidget\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IssuePointOrderLocBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"whichLocation\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IssuePointOrderLoc\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"order\\"
					Name \\"whichLocation\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Two distinct trigger actions can't share the same function name, so this\\"
	Comment \\" dummy function simply mimics the behavior of an existing call.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"IssueTargetDestructableOrder\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"targetWidget\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IssueTargetOrder\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"order\\"
					Name \\"targetWidget\\"
				]
			}
		]
	}
	EmptyLine {}
	JASSFunction {
		name: String \\"IssueTargetItemOrder\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"targetWidget\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IssueTargetOrder\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"order\\"
					Name \\"targetWidget\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"IssueImmediateOrderBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IssueImmediateOrder\\"
				args: Args [
					Name \\"whichUnit\\"
					Name \\"order\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupTargetOrderBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"targetWidget\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"GroupTargetOrder\\"
				args: Args [
					Name \\"whichGroup\\"
					Name \\"order\\"
					Name \\"targetWidget\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupPointOrderLocBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"whichLocation\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"GroupPointOrderLoc\\"
				args: Args [
					Name \\"whichGroup\\"
					Name \\"order\\"
					Name \\"whichLocation\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GroupImmediateOrderBJ\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"GroupImmediateOrder\\"
				args: Args [
					Name \\"whichGroup\\"
					Name \\"order\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Two distinct trigger actions can't share the same function name, so this\\"
	Comment \\" dummy function simply mimics the behavior of an existing call.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"GroupTargetDestructableOrder\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"targetWidget\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"GroupTargetOrder\\"
				args: Args [
					Name \\"whichGroup\\"
					Name \\"order\\"
					Name \\"targetWidget\\"
				]
			}
		]
	}
	EmptyLine {}
	JASSFunction {
		name: String \\"GroupTargetItemOrder\\"
		params: Params [
			Param {
				type: String \\"group\\"
				name: String \\"whichGroup\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"order\\"
			}
			Param {
				type: String \\"widget\\"
				name: String \\"targetWidget\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"GroupTargetOrder\\"
				args: Args [
					Name \\"whichGroup\\"
					Name \\"order\\"
					Name \\"targetWidget\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetDyingDestructable\\"
		returns: String \\"destructable\\"
		statements: Statements [
			Return Call {
				name: String \\"GetTriggerDestructable\\"
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Rally point setting\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SetUnitRallyPoint\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"targPos\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"IssuePointOrderLocBJ\\"
				args: Args [
					Name \\"whichUnit\\"
					String \\"setrally\\"
					Name \\"targPos\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitRallyUnit\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unit\\"
				name: String \\"targUnit\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"IssueTargetOrder\\"
				args: Args [
					Name \\"whichUnit\\"
					String \\"setrally\\"
					Name \\"targUnit\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetUnitRallyDestructable\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"destructable\\"
				name: String \\"targDest\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"IssueTargetOrder\\"
				args: Args [
					Name \\"whichUnit\\"
					String \\"setrally\\"
					Name \\"targDest\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Utility function for use by editor-generated item drop table triggers.\\"
	Comment \\" This function is added as an action to all destructable drop triggers,\\"
	Comment \\" so that a widget drop may be differentiated from a unit drop.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"SaveDyingWidget\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastDyingWidget\\"
				value: Call {
					name: String \\"GetTriggerWidget\\"
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetBlightRectBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"addBlight\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetBlightRect\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"r\\"
					Name \\"addBlight\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetBlightRadiusLocBJ\\"
		params: Params [
			Param {
				type: String \\"boolean\\"
				name: String \\"addBlight\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"radius\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetBlightLoc\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"loc\\"
					Name \\"radius\\"
					Name \\"addBlight\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"GetAbilityName\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"abilcode\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Return Call {
				name: String \\"GetObjectName\\"
				args: Args [
					Name \\"abilcode\\"
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Melee Template Visibility Settings\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeStartingVisibility\\"
		statements: Statements [
			Comment \\" Start by setting the ToD.\\"
			Call {
				name: String \\"SetFloatGameState\\"
				args: Args [
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"bj_MELEE_STARTING_TOD\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" call FogMaskEnable(true)\\"
			Comment \\" call FogEnable(true)\\"
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Melee Template Starting Resources\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeStartingResources\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"version\\"
				name: String \\"v\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"startingGold\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"startingLumber\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"v\\"
				value: Call {
					name: String \\"VersionGet\\"
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"v\\"
					operator: String \\"==\\"
					right: Name \\"VERSION_REIGN_OF_CHAOS\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"startingGold\\"
						value: Name \\"bj_MELEE_STARTING_GOLD_V0\\"
					}
					JASSSet {
						name: String \\"startingLumber\\"
						value: Name \\"bj_MELEE_STARTING_LUMBER_V0\\"
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"startingGold\\"
								value: Name \\"bj_MELEE_STARTING_GOLD_V1\\"
							}
							JASSSet {
								name: String \\"startingLumber\\"
								value: Name \\"bj_MELEE_STARTING_LUMBER_V1\\"
							}
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Set each player's starting resources.\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerSlotState\\"
								args: Args [
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"PLAYER_SLOT_STATE_PLAYING\\"
						}
						then: Statements [
							Call {
								name: String \\"SetPlayerState\\"
								args: Args [
									Name \\"indexPlayer\\"
									Name \\"PLAYER_STATE_RESOURCE_GOLD\\"
									Name \\"startingGold\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"SetPlayerState\\"
								args: Args [
									Name \\"indexPlayer\\"
									Name \\"PLAYER_STATE_RESOURCE_LUMBER\\"
									Name \\"startingLumber\\"
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Melee Template Hero Limit\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"ReducePlayerTechMaxAllowed\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"techId\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"limit\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"oldMax\\"
				value: Call {
					name: String \\"GetPlayerTechMaxAllowed\\"
					args: Args [
						Name \\"whichPlayer\\"
						Name \\"techId\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" A value of -1 is used to indicate no limit, so check for that as well.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: BinaryOp {
						left: Name \\"oldMax\\"
						operator: String \\"<\\"
						right: Number 0
					}
					operator: String \\"or\\"
					right: BinaryOp {
						left: Name \\"oldMax\\"
						operator: String \\">\\"
						right: Name \\"limit\\"
					}
				}
				then: Statements [
					Call {
						name: String \\"SetPlayerTechMaxAllowed\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"techId\\"
							Name \\"limit\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeStartingHeroLimit\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					Comment \\" max heroes per player\\"
					Call {
						name: String \\"SetPlayerMaxHeroesAllowed\\"
						args: Args [
							Name \\"bj_MELEE_HERO_LIMIT\\"
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" each player is restricted to a limit per hero type as well\\"
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Hamg\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Hmkg\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Hpal\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Hblm\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Obla\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Ofar\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Otch\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Oshd\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Edem\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Ekee\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Emoo\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Ewar\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Udea\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Udre\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Ulic\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Ucrl\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Npbm\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Nbrn\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Nngs\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Nplh\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Nbst\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Nalc\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Ntin\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"ReducePlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"Nfir\\"
							Name \\"bj_MELEE_HERO_TYPE_LIMIT\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Melee Template Granted Hero Items\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTrainedUnitIsHeroBJFilter\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Return Call {
				name: String \\"IsUnitType\\"
				args: Args [
					Call {
						name: String \\"GetFilterUnit\\"
					}
					Name \\"UNIT_TYPE_HERO\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" The first N heroes trained or hired for each player start off with a\\"
	Comment \\" standard set of items.  This is currently:\\"
	Comment \\"   - 1x Scroll of Town Portal\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeGrantItemsToHero\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"owner\\"
				value: Call {
					name: String \\"GetPlayerId\\"
					args: Args [
						Call {
							name: String \\"GetOwningPlayer\\"
							args: Args [
								Name \\"whichUnit\\"
							]
						}
					]
				}
			}
			EmptyLine {}
			Comment \\" If we haven't twinked N heroes for this player yet, twink away.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: ArrayRef {
						name: String \\"bj_meleeTwinkedHeroes\\"
						prop: Name \\"owner\\"
					}
					operator: String \\"<\\"
					right: Name \\"bj_MELEE_MAX_TWINKED_HEROES\\"
				}
				then: Statements [
					Call {
						name: String \\"UnitAddItemById\\"
						args: Args [
							Name \\"whichUnit\\"
							FourCC \\"stwp\\"
						]
						statement: Boolean true
					}
					JASSSet {
						name: String \\"bj_meleeTwinkedHeroes\\"
						value: BinaryOp {
							left: ArrayRef {
								name: String \\"bj_meleeTwinkedHeroes\\"
								prop: Name \\"owner\\"
							}
							operator: String \\"+\\"
							right: Number 1
						}
						prop: Name \\"owner\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeGrantItemsToTrainedHero\\"
		statements: Statements [
			Call {
				name: String \\"MeleeGrantItemsToHero\\"
				args: Args [
					Call {
						name: String \\"GetTrainedUnit\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeGrantItemsToHiredHero\\"
		statements: Statements [
			Call {
				name: String \\"MeleeGrantItemsToHero\\"
				args: Args [
					Call {
						name: String \\"GetSoldUnit\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeGrantHeroItems\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			EmptyLine {}
			Comment \\" Initialize the twinked hero counts.\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"bj_meleeTwinkedHeroes\\"
						value: Number 0
						prop: Name \\"index\\"
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYER_SLOTS\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Register for an event whenever a hero is trained, so that we can give\\"
			Comment \\" him/her their starting items.\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"trig\\"
						value: Call {
							name: String \\"CreateTrigger\\"
						}
					}
					Call {
						name: String \\"TriggerRegisterPlayerUnitEvent\\"
						args: Args [
							Name \\"trig\\"
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							Name \\"EVENT_PLAYER_UNIT_TRAIN_FINISH\\"
							Name \\"filterMeleeTrainedUnitIsHeroBJ\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"TriggerAddAction\\"
						args: Args [
							Name \\"trig\\"
							FuncRef String \\"M\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Register for an event whenever a neutral hero is hired, so that we\\"
			Comment \\" can give him/her their starting items.\\"
			JASSSet {
				name: String \\"trig\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterPlayerUnitEvent\\"
				args: Args [
					Name \\"trig\\"
					Call {
						name: String \\"Player\\"
						args: Args [
							Name \\"PLAYER_NEUTRAL_PASSIVE\\"
						]
					}
					Name \\"EVENT_PLAYER_UNIT_SELL\\"
					Name \\"filterMeleeTrainedUnitIsHeroBJ\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"trig\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Flag that we are giving starting items to heroes, so that the melee\\"
			Comment \\" starting units code can create them as necessary.\\"
			JASSSet {
				name: String \\"bj_meleeGrantHeroItems\\"
				value: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Melee Template Clear Start Locations\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeClearExcessUnit\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"theUnit\\"
				value: Call {
					name: String \\"GetEnumUnit\\"
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"owner\\"
				value: Call {
					name: String \\"GetPlayerId\\"
					args: Args [
						Call {
							name: String \\"GetOwningPlayer\\"
							args: Args [
								Name \\"theUnit\\"
							]
						}
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"owner\\"
					operator: String \\"==\\"
					right: Name \\"PLAYER_NEUTRAL_AGGRESSIVE\\"
				}
				then: Statements [
					Comment \\" Remove any Neutral Hostile units from the area.\\"
					Call {
						name: String \\"RemoveUnit\\"
						args: Args [
							Call {
								name: String \\"GetEnumUnit\\"
							}
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"owner\\"
							operator: String \\"==\\"
							right: Name \\"PLAYER_NEUTRAL_PASSIVE\\"
						}
						statements: Statements [
							Comment \\" Remove non-structure Neutral Passive units from the area.\\"
							IfThenElse {
								condition: UnaryOp {
									operator: String \\"not\\"
									expr: Call {
										name: String \\"IsUnitType\\"
										args: Args [
											Name \\"theUnit\\"
											Name \\"UNIT_TYPE_STRUCTURE\\"
										]
									}
								}
								then: Statements [
									Call {
										name: String \\"RemoveUnit\\"
										args: Args [
											Call {
												name: String \\"GetEnumUnit\\"
											}
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeClearNearbyUnits\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"range\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"nearbyUnits\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"nearbyUnits\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsInRange\\"
				args: Args [
					Name \\"nearbyUnits\\"
					Name \\"x\\"
					Name \\"y\\"
					Name \\"range\\"
					Null
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"nearbyUnits\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"nearbyUnits\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeClearExcessUnits\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"locX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"locY\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					EmptyLine {}
					Comment \\" If the player slot is being used, clear any nearby creeps.\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerSlotState\\"
								args: Args [
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"PLAYER_SLOT_STATE_PLAYING\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"locX\\"
								value: Call {
									name: String \\"GetStartLocationX\\"
									args: Args [
										Call {
											name: String \\"GetPlayerStartLocation\\"
											args: Args [
												Name \\"indexPlayer\\"
											]
										}
									]
								}
							}
							JASSSet {
								name: String \\"locY\\"
								value: Call {
									name: String \\"GetStartLocationY\\"
									args: Args [
										Call {
											name: String \\"GetPlayerStartLocation\\"
											args: Args [
												Name \\"indexPlayer\\"
											]
										}
									]
								}
							}
							EmptyLine {}
							Call {
								name: String \\"MeleeClearNearbyUnits\\"
								args: Args [
									Name \\"locX\\"
									Name \\"locY\\"
									Name \\"bj_MELEE_CLEAR_UNITS_RADIUS\\"
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Melee Template Starting Units\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeEnumFindNearestMine\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"enumUnit\\"
				value: Call {
					name: String \\"GetEnumUnit\\"
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"dist\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"unitLoc\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetUnitTypeId\\"
						args: Args [
							Name \\"enumUnit\\"
						]
					}
					operator: String \\"==\\"
					right: FourCC \\"ngol\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"unitLoc\\"
						value: Call {
							name: String \\"GetUnitLoc\\"
							args: Args [
								Name \\"enumUnit\\"
							]
						}
					}
					JASSSet {
						name: String \\"dist\\"
						value: Call {
							name: String \\"DistanceBetweenPoints\\"
							args: Args [
								Name \\"unitLoc\\"
								Name \\"bj_meleeNearestMineToLoc\\"
							]
						}
					}
					Call {
						name: String \\"RemoveLocation\\"
						args: Args [
							Name \\"unitLoc\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" If this is our first mine, or the closest thusfar, use it instead.\\"
					IfThenElse {
						condition: BinaryOp {
							left: Parens BinaryOp {
								left: Name \\"bj_meleeNearestMineDist\\"
								operator: String \\"<\\"
								right: Number 0
							}
							operator: String \\"or\\"
							right: Parens BinaryOp {
								left: Name \\"dist\\"
								operator: String \\"<\\"
								right: Name \\"bj_meleeNearestMineDist\\"
							}
						}
						then: Statements [
							JASSSet {
								name: String \\"bj_meleeNearestMine\\"
								value: Name \\"enumUnit\\"
							}
							JASSSet {
								name: String \\"bj_meleeNearestMineDist\\"
								value: Name \\"dist\\"
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeFindNearestMine\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"src\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"range\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"nearbyMines\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_meleeNearestMine\\"
			}
			JASSSet {
				name: String \\"bj_meleeNearestMineDist\\"
				value: UnaryOp {
					operator: String \\"-\\"
					expr: Number 1
				}
			}
			JASSSet {
				name: String \\"bj_meleeNearestMineToLoc\\"
				value: Name \\"src\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"nearbyMines\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsInRangeOfLoc\\"
				args: Args [
					Name \\"nearbyMines\\"
					Name \\"src\\"
					Name \\"range\\"
					Null
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"nearbyMines\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"nearbyMines\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Return Name \\"bj_meleeNearestMine\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeRandomHeroLoc\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"p\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"id1\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"id2\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"id3\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"id4\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
		]
		returns: String \\"unit\\"
		statements: Statements [
			Variable {
				type: String \\"unit\\"
				name: String \\"hero\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"roll\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"pick\\"
			}
			Variable {
				type: String \\"version\\"
				name: String \\"v\\"
			}
			EmptyLine {}
			Comment \\" The selection of heroes is dependant on the game version.\\"
			JASSSet {
				name: String \\"v\\"
				value: Call {
					name: String \\"VersionGet\\"
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"v\\"
					operator: String \\"==\\"
					right: Name \\"VERSION_REIGN_OF_CHAOS\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"roll\\"
						value: Call {
							name: String \\"GetRandomInt\\"
							args: Args [
								Number 1
								Number 3
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"roll\\"
								value: Call {
									name: String \\"GetRandomInt\\"
									args: Args [
										Number 1
										Number 4
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Translate the roll into a unitid.\\"
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"roll\\"
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					JASSSet {
						name: String \\"pick\\"
						value: Name \\"id1\\"
					}
				]
				elses: Array [
					ElseIf {
						condition: BinaryOp {
							left: Name \\"roll\\"
							operator: String \\"==\\"
							right: Number 2
						}
						statements: Statements [
							JASSSet {
								name: String \\"pick\\"
								value: Name \\"id2\\"
							}
						]
					}
					ElseIf {
						condition: BinaryOp {
							left: Name \\"roll\\"
							operator: String \\"==\\"
							right: Number 3
						}
						statements: Statements [
							JASSSet {
								name: String \\"pick\\"
								value: Name \\"id3\\"
							}
						]
					}
					ElseIf {
						condition: BinaryOp {
							left: Name \\"roll\\"
							operator: String \\"==\\"
							right: Number 4
						}
						statements: Statements [
							JASSSet {
								name: String \\"pick\\"
								value: Name \\"id4\\"
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized id index - pick the first hero in the list.\\"
							JASSSet {
								name: String \\"pick\\"
								value: Name \\"id1\\"
							}
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Create the hero.\\"
			JASSSet {
				name: String \\"hero\\"
				value: Call {
					name: String \\"CreateUnitAtLoc\\"
					args: Args [
						Name \\"p\\"
						Name \\"pick\\"
						Name \\"loc\\"
						Name \\"bj_UNIT_FACING\\"
					]
				}
			}
			IfThenElse {
				condition: Name \\"bj_meleeGrantHeroItems\\"
				then: Statements [
					Call {
						name: String \\"MeleeGrantItemsToHero\\"
						args: Args [
							Name \\"hero\\"
						]
						statement: Boolean true
					}
				]
			}
			Return Name \\"hero\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns a location which is (distance) away from (src) in the direction of (targ).\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeGetProjectedLoc\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"src\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"targ\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"distance\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"deltaAngle\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"srcX\\"
				value: Call {
					name: String \\"GetLocationX\\"
					args: Args [
						Name \\"src\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"srcY\\"
				value: Call {
					name: String \\"GetLocationY\\"
					args: Args [
						Name \\"src\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"direction\\"
				value: BinaryOp {
					left: Call {
						name: String \\"Atan2\\"
						args: Args [
							BinaryOp {
								left: Call {
									name: String \\"GetLocationY\\"
									args: Args [
										Name \\"targ\\"
									]
								}
								operator: String \\"-\\"
								right: Name \\"srcY\\"
							}
							BinaryOp {
								left: Call {
									name: String \\"GetLocationX\\"
									args: Args [
										Name \\"targ\\"
									]
								}
								operator: String \\"-\\"
								right: Name \\"srcX\\"
							}
						]
					}
					operator: String \\"+\\"
					right: Name \\"deltaAngle\\"
				}
			}
			Return Call {
				name: String \\"Location\\"
				args: Args [
					BinaryOp {
						left: Name \\"srcX\\"
						operator: String \\"+\\"
						right: BinaryOp {
							left: Name \\"distance\\"
							operator: String \\"*\\"
							right: Call {
								name: String \\"Cos\\"
								args: Args [
									Name \\"direction\\"
								]
							}
						}
					}
					BinaryOp {
						left: Name \\"srcY\\"
						operator: String \\"+\\"
						right: BinaryOp {
							left: Name \\"distance\\"
							operator: String \\"*\\"
							right: Call {
								name: String \\"Sin\\"
								args: Args [
									Name \\"direction\\"
								]
							}
						}
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeGetNearestValueWithin\\"
		params: Params [
			Param {
				type: String \\"real\\"
				name: String \\"val\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"minVal\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"maxVal\\"
			}
		]
		returns: String \\"real\\"
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"val\\"
					operator: String \\"<\\"
					right: Name \\"minVal\\"
				}
				then: Statements [
					Return Name \\"minVal\\"
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"val\\"
							operator: String \\">\\"
							right: Name \\"maxVal\\"
						}
						statements: Statements [
							Return Name \\"maxVal\\"
						]
					}
					Else {
						statements: Statements [
							Return Name \\"val\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeGetLocWithinRect\\"
		params: Params [
			Param {
				type: String \\"location\\"
				name: String \\"src\\"
			}
			Param {
				type: String \\"rect\\"
				name: String \\"r\\"
			}
		]
		returns: String \\"location\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"withinX\\"
				value: Call {
					name: String \\"MeleeGetNearestValueWithin\\"
					args: Args [
						Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"src\\"
							]
						}
						Call {
							name: String \\"GetRectMinX\\"
							args: Args [
								Name \\"r\\"
							]
						}
						Call {
							name: String \\"GetRectMaxX\\"
							args: Args [
								Name \\"r\\"
							]
						}
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"withinY\\"
				value: Call {
					name: String \\"MeleeGetNearestValueWithin\\"
					args: Args [
						Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"src\\"
							]
						}
						Call {
							name: String \\"GetRectMinY\\"
							args: Args [
								Name \\"r\\"
							]
						}
						Call {
							name: String \\"GetRectMaxY\\"
							args: Args [
								Name \\"r\\"
							]
						}
					]
				}
			}
			Return Call {
				name: String \\"Location\\"
				args: Args [
					Name \\"withinX\\"
					Name \\"withinY\\"
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Starting Units for Human Players\\"
	Comment \\"   - 1 Town Hall, placed at start location\\"
	Comment \\"   - 5 Peasants, placed between start location and nearest gold mine\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeStartingUnitsHuman\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"startLoc\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doHeroes\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doCamera\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doPreload\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"boolean\\"
				name: String \\"useRandomHero\\"
				value: Call {
					name: String \\"IsMapFlagSet\\"
					args: Args [
						Name \\"MAP_RANDOM_HERO\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"unitSpacing\\"
				value: Number 64
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"nearestMine\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"nearMineLoc\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"heroLoc\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"peonX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"peonY\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"townHall\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doPreload\\"
				then: Statements [
					Call {
						name: String \\"Preloader\\"
						args: Args [
							String \\"scripts\\\\\\\\\\\\\\\\HumanMelee.pld\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"nearestMine\\"
				value: Call {
					name: String \\"MeleeFindNearestMine\\"
					args: Args [
						Name \\"startLoc\\"
						Name \\"bj_MELEE_MINE_SEARCH_RADIUS\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"nearestMine\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Comment \\" Spawn Town Hall at the start location.\\"
					JASSSet {
						name: String \\"townHall\\"
						value: Call {
							name: String \\"CreateUnitAtLoc\\"
							args: Args [
								Name \\"whichPlayer\\"
								FourCC \\"htow\\"
								Name \\"startLoc\\"
								Name \\"bj_UNIT_FACING\\"
							]
						}
					}
					EmptyLine {}
					Comment \\" Spawn Peasants near the mine.\\"
					JASSSet {
						name: String \\"nearMineLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 320
								Number 0
							]
						}
					}
					JASSSet {
						name: String \\"peonX\\"
						value: Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"nearMineLoc\\"
							]
						}
					}
					JASSSet {
						name: String \\"peonY\\"
						value: Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"nearMineLoc\\"
							]
						}
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"hpea\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"hpea\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.15
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"hpea\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.15
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"hpea\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.6
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"hpea\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 0.6
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Set random hero spawn point to be off to the side of the start location.\\"
					JASSSet {
						name: String \\"heroLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 384
								Number 45
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Comment \\" Spawn Town Hall at the start location.\\"
							JASSSet {
								name: String \\"townHall\\"
								value: Call {
									name: String \\"CreateUnitAtLoc\\"
									args: Args [
										Name \\"whichPlayer\\"
										FourCC \\"htow\\"
										Name \\"startLoc\\"
										Name \\"bj_UNIT_FACING\\"
									]
								}
							}
							EmptyLine {}
							Comment \\" Spawn Peasants directly south of the town hall.\\"
							JASSSet {
								name: String \\"peonX\\"
								value: Call {
									name: String \\"GetLocationX\\"
									args: Args [
										Name \\"startLoc\\"
									]
								}
							}
							JASSSet {
								name: String \\"peonY\\"
								value: BinaryOp {
									left: Call {
										name: String \\"GetLocationY\\"
										args: Args [
											Name \\"startLoc\\"
										]
									}
									operator: String \\"-\\"
									right: Number 224
								}
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"hpea\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 2
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"hpea\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 1
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"hpea\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"hpea\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"-\\"
										right: BinaryOp {
											left: Number 1
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"hpea\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"-\\"
										right: BinaryOp {
											left: Number 2
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set random hero spawn point to be just south of the start location.\\"
							JASSSet {
								name: String \\"heroLoc\\"
								value: Call {
									name: String \\"Location\\"
									args: Args [
										Name \\"peonX\\"
										BinaryOp {
											left: Name \\"peonY\\"
											operator: String \\"-\\"
											right: BinaryOp {
												left: Number 2
												operator: String \\"*\\"
												right: Name \\"unitSpacing\\"
											}
										}
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"townHall\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Call {
						name: String \\"UnitAddAbilityBJ\\"
						args: Args [
							FourCC \\"Amic\\"
							Name \\"townHall\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"UnitMakeAbilityPermanentBJ\\"
						args: Args [
							Boolean true
							FourCC \\"Amic\\"
							Name \\"townHall\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doHeroes\\"
				then: Statements [
					Comment \\" If the \\\\\\"Random Hero\\\\\\" option is set, start the player with a random hero.\\"
					Comment \\" Otherwise, give them a \\\\\\"free hero\\\\\\" token.\\"
					IfThenElse {
						condition: Name \\"useRandomHero\\"
						then: Statements [
							Call {
								name: String \\"MeleeRandomHeroLoc\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"Hamg\\"
									FourCC \\"Hmkg\\"
									FourCC \\"Hpal\\"
									FourCC \\"Hblm\\"
									Name \\"heroLoc\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									Call {
										name: String \\"SetPlayerState\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"PLAYER_STATE_RESOURCE_HERO_TOKENS\\"
											Name \\"bj_MELEE_STARTING_HERO_TOKENS\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doCamera\\"
				then: Statements [
					Comment \\" Center the camera on the initial Peasants.\\"
					Call {
						name: String \\"SetCameraPositionForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"peonX\\"
							Name \\"peonY\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetCameraQuickPositionForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"peonX\\"
							Name \\"peonY\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Starting Units for Orc Players\\"
	Comment \\"   - 1 Great Hall, placed at start location\\"
	Comment \\"   - 5 Peons, placed between start location and nearest gold mine\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeStartingUnitsOrc\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"startLoc\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doHeroes\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doCamera\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doPreload\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"boolean\\"
				name: String \\"useRandomHero\\"
				value: Call {
					name: String \\"IsMapFlagSet\\"
					args: Args [
						Name \\"MAP_RANDOM_HERO\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"unitSpacing\\"
				value: Number 64
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"nearestMine\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"nearMineLoc\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"heroLoc\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"peonX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"peonY\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doPreload\\"
				then: Statements [
					Call {
						name: String \\"Preloader\\"
						args: Args [
							String \\"scripts\\\\\\\\\\\\\\\\OrcMelee.pld\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"nearestMine\\"
				value: Call {
					name: String \\"MeleeFindNearestMine\\"
					args: Args [
						Name \\"startLoc\\"
						Name \\"bj_MELEE_MINE_SEARCH_RADIUS\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"nearestMine\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Comment \\" Spawn Great Hall at the start location.\\"
					Call {
						name: String \\"CreateUnitAtLoc\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"ogre\\"
							Name \\"startLoc\\"
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Spawn Peons near the mine.\\"
					JASSSet {
						name: String \\"nearMineLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 320
								Number 0
							]
						}
					}
					JASSSet {
						name: String \\"peonX\\"
						value: Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"nearMineLoc\\"
							]
						}
					}
					JASSSet {
						name: String \\"peonY\\"
						value: Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"nearMineLoc\\"
							]
						}
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"opeo\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"opeo\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.15
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"opeo\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.15
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"opeo\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.6
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"opeo\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 0.6
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Set random hero spawn point to be off to the side of the start location.\\"
					JASSSet {
						name: String \\"heroLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 384
								Number 45
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Comment \\" Spawn Great Hall at the start location.\\"
							Call {
								name: String \\"CreateUnitAtLoc\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"ogre\\"
									Name \\"startLoc\\"
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Spawn Peons directly south of the town hall.\\"
							JASSSet {
								name: String \\"peonX\\"
								value: Call {
									name: String \\"GetLocationX\\"
									args: Args [
										Name \\"startLoc\\"
									]
								}
							}
							JASSSet {
								name: String \\"peonY\\"
								value: BinaryOp {
									left: Call {
										name: String \\"GetLocationY\\"
										args: Args [
											Name \\"startLoc\\"
										]
									}
									operator: String \\"-\\"
									right: Number 224
								}
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"opeo\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 2
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"opeo\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 1
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"opeo\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"opeo\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"-\\"
										right: BinaryOp {
											left: Number 1
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"opeo\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"-\\"
										right: BinaryOp {
											left: Number 2
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set random hero spawn point to be just south of the start location.\\"
							JASSSet {
								name: String \\"heroLoc\\"
								value: Call {
									name: String \\"Location\\"
									args: Args [
										Name \\"peonX\\"
										BinaryOp {
											left: Name \\"peonY\\"
											operator: String \\"-\\"
											right: BinaryOp {
												left: Number 2
												operator: String \\"*\\"
												right: Name \\"unitSpacing\\"
											}
										}
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doHeroes\\"
				then: Statements [
					Comment \\" If the \\\\\\"Random Hero\\\\\\" option is set, start the player with a random hero.\\"
					Comment \\" Otherwise, give them a \\\\\\"free hero\\\\\\" token.\\"
					IfThenElse {
						condition: Name \\"useRandomHero\\"
						then: Statements [
							Call {
								name: String \\"MeleeRandomHeroLoc\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"Obla\\"
									FourCC \\"Ofar\\"
									FourCC \\"Otch\\"
									FourCC \\"Oshd\\"
									Name \\"heroLoc\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									Call {
										name: String \\"SetPlayerState\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"PLAYER_STATE_RESOURCE_HERO_TOKENS\\"
											Name \\"bj_MELEE_STARTING_HERO_TOKENS\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doCamera\\"
				then: Statements [
					Comment \\" Center the camera on the initial Peons.\\"
					Call {
						name: String \\"SetCameraPositionForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"peonX\\"
							Name \\"peonY\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetCameraQuickPositionForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"peonX\\"
							Name \\"peonY\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Starting Units for Undead Players\\"
	Comment \\"   - 1 Necropolis, placed at start location\\"
	Comment \\"   - 1 Haunted Gold Mine, placed on nearest gold mine\\"
	Comment \\"   - 3 Acolytes, placed between start location and nearest gold mine\\"
	Comment \\"   - 1 Ghoul, placed between start location and nearest gold mine\\"
	Comment \\"   - Blight, centered on nearest gold mine, spread across a \\\\\\"large area\\\\\\"\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeStartingUnitsUndead\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"startLoc\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doHeroes\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doCamera\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doPreload\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"boolean\\"
				name: String \\"useRandomHero\\"
				value: Call {
					name: String \\"IsMapFlagSet\\"
					args: Args [
						Name \\"MAP_RANDOM_HERO\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"unitSpacing\\"
				value: Number 64
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"nearestMine\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"nearMineLoc\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"nearTownLoc\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"heroLoc\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"peonX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"peonY\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"ghoulX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"ghoulY\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doPreload\\"
				then: Statements [
					Call {
						name: String \\"Preloader\\"
						args: Args [
							String \\"scripts\\\\\\\\\\\\\\\\UndeadMelee.pld\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"nearestMine\\"
				value: Call {
					name: String \\"MeleeFindNearestMine\\"
					args: Args [
						Name \\"startLoc\\"
						Name \\"bj_MELEE_MINE_SEARCH_RADIUS\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"nearestMine\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Comment \\" Spawn Necropolis at the start location.\\"
					Call {
						name: String \\"CreateUnitAtLoc\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"unpl\\"
							Name \\"startLoc\\"
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Replace the nearest gold mine with a blighted version.\\"
					JASSSet {
						name: String \\"nearestMine\\"
						value: Call {
							name: String \\"BlightGoldMineForPlayerBJ\\"
							args: Args [
								Name \\"nearestMine\\"
								Name \\"whichPlayer\\"
							]
						}
					}
					EmptyLine {}
					Comment \\" Spawn Ghoul near the Necropolis.\\"
					JASSSet {
						name: String \\"nearTownLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Name \\"startLoc\\"
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Number 288
								Number 0
							]
						}
					}
					JASSSet {
						name: String \\"ghoulX\\"
						value: Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"nearTownLoc\\"
							]
						}
					}
					JASSSet {
						name: String \\"ghoulY\\"
						value: Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"nearTownLoc\\"
							]
						}
					}
					JASSSet {
						name: String \\"bj_ghoul\\"
						value: Call {
							name: String \\"CreateUnit\\"
							args: Args [
								Name \\"whichPlayer\\"
								FourCC \\"ugho\\"
								BinaryOp {
									left: Name \\"ghoulX\\"
									operator: String \\"+\\"
									right: BinaryOp {
										left: Number 0
										operator: String \\"*\\"
										right: Name \\"unitSpacing\\"
									}
								}
								BinaryOp {
									left: Name \\"ghoulY\\"
									operator: String \\"+\\"
									right: BinaryOp {
										left: Number 0
										operator: String \\"*\\"
										right: Name \\"unitSpacing\\"
									}
								}
								Name \\"bj_UNIT_FACING\\"
							]
						}
						prop: Call {
							name: String \\"GetPlayerId\\"
							args: Args [
								Name \\"whichPlayer\\"
							]
						}
					}
					EmptyLine {}
					Comment \\" Spawn Acolytes near the mine.\\"
					JASSSet {
						name: String \\"nearMineLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 320
								Number 0
							]
						}
					}
					JASSSet {
						name: String \\"peonX\\"
						value: Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"nearMineLoc\\"
							]
						}
					}
					JASSSet {
						name: String \\"peonY\\"
						value: Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"nearMineLoc\\"
							]
						}
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"uaco\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.5
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"uaco\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.65
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 0.5
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"uaco\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 0.65
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 0.5
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Create a patch of blight around the gold mine.\\"
					Call {
						name: String \\"SetBlightLoc\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"nearMineLoc\\"
							Number 768
							Boolean true
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Set random hero spawn point to be off to the side of the start location.\\"
					JASSSet {
						name: String \\"heroLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 384
								Number 45
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Comment \\" Spawn Necropolis at the start location.\\"
							Call {
								name: String \\"CreateUnitAtLoc\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"unpl\\"
									Name \\"startLoc\\"
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Spawn Acolytes and Ghoul directly south of the Necropolis.\\"
							JASSSet {
								name: String \\"peonX\\"
								value: Call {
									name: String \\"GetLocationX\\"
									args: Args [
										Name \\"startLoc\\"
									]
								}
							}
							JASSSet {
								name: String \\"peonY\\"
								value: BinaryOp {
									left: Call {
										name: String \\"GetLocationY\\"
										args: Args [
											Name \\"startLoc\\"
										]
									}
									operator: String \\"-\\"
									right: Number 224
								}
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"uaco\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"-\\"
										right: BinaryOp {
											left: Number 1.5
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"uaco\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"-\\"
										right: BinaryOp {
											left: Number 0.5
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"uaco\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0.5
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"ugho\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 1.5
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Create a patch of blight around the start location.\\"
							Call {
								name: String \\"SetBlightLoc\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"startLoc\\"
									Number 768
									Boolean true
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set random hero spawn point to be just south of the start location.\\"
							JASSSet {
								name: String \\"heroLoc\\"
								value: Call {
									name: String \\"Location\\"
									args: Args [
										Name \\"peonX\\"
										BinaryOp {
											left: Name \\"peonY\\"
											operator: String \\"-\\"
											right: BinaryOp {
												left: Number 2
												operator: String \\"*\\"
												right: Name \\"unitSpacing\\"
											}
										}
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doHeroes\\"
				then: Statements [
					Comment \\" If the \\\\\\"Random Hero\\\\\\" option is set, start the player with a random hero.\\"
					Comment \\" Otherwise, give them a \\\\\\"free hero\\\\\\" token.\\"
					IfThenElse {
						condition: Name \\"useRandomHero\\"
						then: Statements [
							Call {
								name: String \\"MeleeRandomHeroLoc\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"Udea\\"
									FourCC \\"Udre\\"
									FourCC \\"Ulic\\"
									FourCC \\"Ucrl\\"
									Name \\"heroLoc\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									Call {
										name: String \\"SetPlayerState\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"PLAYER_STATE_RESOURCE_HERO_TOKENS\\"
											Name \\"bj_MELEE_STARTING_HERO_TOKENS\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doCamera\\"
				then: Statements [
					Comment \\" Center the camera on the initial Acolytes.\\"
					Call {
						name: String \\"SetCameraPositionForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"peonX\\"
							Name \\"peonY\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetCameraQuickPositionForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"peonX\\"
							Name \\"peonY\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Starting Units for Night Elf Players\\"
	Comment \\"   - 1 Tree of Life, placed by nearest gold mine, already entangled\\"
	Comment \\"   - 5 Wisps, placed between Tree of Life and nearest gold mine\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeStartingUnitsNightElf\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"startLoc\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doHeroes\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doCamera\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doPreload\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"boolean\\"
				name: String \\"useRandomHero\\"
				value: Call {
					name: String \\"IsMapFlagSet\\"
					args: Args [
						Name \\"MAP_RANDOM_HERO\\"
					]
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"unitSpacing\\"
				value: Number 64
			}
			Variable {
				type: String \\"real\\"
				name: String \\"minTreeDist\\"
				value: BinaryOp {
					left: Number 3.5
					operator: String \\"*\\"
					right: Name \\"bj_CELLWIDTH\\"
				}
			}
			Variable {
				type: String \\"real\\"
				name: String \\"minWispDist\\"
				value: BinaryOp {
					left: Number 1.75
					operator: String \\"*\\"
					right: Name \\"bj_CELLWIDTH\\"
				}
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"nearestMine\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"nearMineLoc\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"wispLoc\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"heroLoc\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"peonX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"peonY\\"
			}
			Variable {
				type: String \\"unit\\"
				name: String \\"tree\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doPreload\\"
				then: Statements [
					Call {
						name: String \\"Preloader\\"
						args: Args [
							String \\"scripts\\\\\\\\\\\\\\\\NightElfMelee.pld\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"nearestMine\\"
				value: Call {
					name: String \\"MeleeFindNearestMine\\"
					args: Args [
						Name \\"startLoc\\"
						Name \\"bj_MELEE_MINE_SEARCH_RADIUS\\"
					]
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"nearestMine\\"
					operator: String \\"!=\\"
				}
				then: Statements [
					Comment \\" Spawn Tree of Life near the mine and have it entangle the mine.\\"
					Comment \\" Project the Tree's coordinates from the gold mine, and then snap\\"
					Comment \\" the X and Y values to within minTreeDist of the Gold Mine.\\"
					JASSSet {
						name: String \\"nearMineLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 650
								Number 0
							]
						}
					}
					JASSSet {
						name: String \\"nearMineLoc\\"
						value: Call {
							name: String \\"MeleeGetLocWithinRect\\"
							args: Args [
								Name \\"nearMineLoc\\"
								Call {
									name: String \\"GetRectFromCircleBJ\\"
									args: Args [
										Call {
											name: String \\"GetUnitLoc\\"
											args: Args [
												Name \\"nearestMine\\"
											]
										}
										Name \\"minTreeDist\\"
									]
								}
							]
						}
					}
					JASSSet {
						name: String \\"tree\\"
						value: Call {
							name: String \\"CreateUnitAtLoc\\"
							args: Args [
								Name \\"whichPlayer\\"
								FourCC \\"etol\\"
								Name \\"nearMineLoc\\"
								Name \\"bj_UNIT_FACING\\"
							]
						}
					}
					Call {
						name: String \\"IssueTargetOrder\\"
						args: Args [
							Name \\"tree\\"
							String \\"entangleinstant\\"
							Name \\"nearestMine\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Spawn Wisps at the start location.\\"
					JASSSet {
						name: String \\"wispLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 320
								Number 0
							]
						}
					}
					JASSSet {
						name: String \\"wispLoc\\"
						value: Call {
							name: String \\"MeleeGetLocWithinRect\\"
							args: Args [
								Name \\"wispLoc\\"
								Call {
									name: String \\"GetRectFromCircleBJ\\"
									args: Args [
										Call {
											name: String \\"GetUnitLoc\\"
											args: Args [
												Name \\"nearestMine\\"
											]
										}
										Name \\"minWispDist\\"
									]
								}
							]
						}
					}
					JASSSet {
						name: String \\"peonX\\"
						value: Call {
							name: String \\"GetLocationX\\"
							args: Args [
								Name \\"wispLoc\\"
							]
						}
					}
					JASSSet {
						name: String \\"peonY\\"
						value: Call {
							name: String \\"GetLocationY\\"
							args: Args [
								Name \\"wispLoc\\"
							]
						}
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"ewsp\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"ewsp\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.15
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"ewsp\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.15
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"ewsp\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"+\\"
								right: BinaryOp {
									left: Number 0.58
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"ewsp\\"
							BinaryOp {
								left: Name \\"peonX\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 0.58
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							BinaryOp {
								left: Name \\"peonY\\"
								operator: String \\"-\\"
								right: BinaryOp {
									left: Number 1
									operator: String \\"*\\"
									right: Name \\"unitSpacing\\"
								}
							}
							Name \\"bj_UNIT_FACING\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					Comment \\" Set random hero spawn point to be off to the side of the start location.\\"
					JASSSet {
						name: String \\"heroLoc\\"
						value: Call {
							name: String \\"MeleeGetProjectedLoc\\"
							args: Args [
								Call {
									name: String \\"GetUnitLoc\\"
									args: Args [
										Name \\"nearestMine\\"
									]
								}
								Name \\"startLoc\\"
								Number 384
								Number 45
							]
						}
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Comment \\" Spawn Tree of Life at the start location.\\"
							Call {
								name: String \\"CreateUnitAtLoc\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"etol\\"
									Name \\"startLoc\\"
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Spawn Wisps directly south of the town hall.\\"
							JASSSet {
								name: String \\"peonX\\"
								value: Call {
									name: String \\"GetLocationX\\"
									args: Args [
										Name \\"startLoc\\"
									]
								}
							}
							JASSSet {
								name: String \\"peonY\\"
								value: BinaryOp {
									left: Call {
										name: String \\"GetLocationY\\"
										args: Args [
											Name \\"startLoc\\"
										]
									}
									operator: String \\"-\\"
									right: Number 224
								}
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"ewsp\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"-\\"
										right: BinaryOp {
											left: Number 2
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"ewsp\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"-\\"
										right: BinaryOp {
											left: Number 1
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"ewsp\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"ewsp\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 1
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"CreateUnit\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"ewsp\\"
									BinaryOp {
										left: Name \\"peonX\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 2
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									BinaryOp {
										left: Name \\"peonY\\"
										operator: String \\"+\\"
										right: BinaryOp {
											left: Number 0
											operator: String \\"*\\"
											right: Name \\"unitSpacing\\"
										}
									}
									Name \\"bj_UNIT_FACING\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set random hero spawn point to be just south of the start location.\\"
							JASSSet {
								name: String \\"heroLoc\\"
								value: Call {
									name: String \\"Location\\"
									args: Args [
										Name \\"peonX\\"
										BinaryOp {
											left: Name \\"peonY\\"
											operator: String \\"-\\"
											right: BinaryOp {
												left: Number 2
												operator: String \\"*\\"
												right: Name \\"unitSpacing\\"
											}
										}
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doHeroes\\"
				then: Statements [
					Comment \\" If the \\\\\\"Random Hero\\\\\\" option is set, start the player with a random hero.\\"
					Comment \\" Otherwise, give them a \\\\\\"free hero\\\\\\" token.\\"
					IfThenElse {
						condition: Name \\"useRandomHero\\"
						then: Statements [
							Call {
								name: String \\"MeleeRandomHeroLoc\\"
								args: Args [
									Name \\"whichPlayer\\"
									FourCC \\"Edem\\"
									FourCC \\"Ekee\\"
									FourCC \\"Emoo\\"
									FourCC \\"Ewar\\"
									Name \\"heroLoc\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									Call {
										name: String \\"SetPlayerState\\"
										args: Args [
											Name \\"whichPlayer\\"
											Name \\"PLAYER_STATE_RESOURCE_HERO_TOKENS\\"
											Name \\"bj_MELEE_STARTING_HERO_TOKENS\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doCamera\\"
				then: Statements [
					Comment \\" Center the camera on the initial Wisps.\\"
					Call {
						name: String \\"SetCameraPositionForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"peonX\\"
							Name \\"peonY\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetCameraQuickPositionForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"peonX\\"
							Name \\"peonY\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Starting Units for Players Whose Race is Unknown\\"
	Comment \\"   - 12 Sheep, placed randomly around the start location\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeStartingUnitsUnknownRace\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"startLoc\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doHeroes\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doCamera\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doPreload\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doPreload\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					Call {
						name: String \\"CreateUnit\\"
						args: Args [
							Name \\"whichPlayer\\"
							FourCC \\"nshe\\"
							BinaryOp {
								left: Call {
									name: String \\"GetLocationX\\"
									args: Args [
										Name \\"startLoc\\"
									]
								}
								operator: String \\"+\\"
								right: Call {
									name: String \\"GetRandomReal\\"
									args: Args [
										UnaryOp {
											operator: String \\"-\\"
											expr: Number 256
										}
										Number 256
									]
								}
							}
							BinaryOp {
								left: Call {
									name: String \\"GetLocationY\\"
									args: Args [
										Name \\"startLoc\\"
									]
								}
								operator: String \\"+\\"
								right: Call {
									name: String \\"GetRandomReal\\"
									args: Args [
										UnaryOp {
											operator: String \\"-\\"
											expr: Number 256
										}
										Number 256
									]
								}
							}
							Call {
								name: String \\"GetRandomReal\\"
								args: Args [
									Number 0
									Number 360
								]
							}
						]
						statement: Boolean true
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Number 12
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doHeroes\\"
				then: Statements [
					Comment \\" Give them a \\\\\\"free hero\\\\\\" token, out of pity.\\"
					Call {
						name: String \\"SetPlayerState\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"PLAYER_STATE_RESOURCE_HERO_TOKENS\\"
							Name \\"bj_MELEE_STARTING_HERO_TOKENS\\"
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens Name \\"doCamera\\"
				then: Statements [
					Comment \\" Center the camera on the initial sheep.\\"
					Call {
						name: String \\"SetCameraPositionLocForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"startLoc\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"SetCameraQuickPositionLocForPlayer\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"startLoc\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeStartingUnits\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"location\\"
				name: String \\"indexStartLoc\\"
			}
			Variable {
				type: String \\"race\\"
				name: String \\"indexRace\\"
			}
			EmptyLine {}
			Call {
				name: String \\"Preloader\\"
				args: Args [
					String \\"scripts\\\\\\\\\\\\\\\\SharedMelee.pld\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerSlotState\\"
								args: Args [
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"PLAYER_SLOT_STATE_PLAYING\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"indexStartLoc\\"
								value: Call {
									name: String \\"GetStartLocationLoc\\"
									args: Args [
										Call {
											name: String \\"GetPlayerStartLocation\\"
											args: Args [
												Name \\"indexPlayer\\"
											]
										}
									]
								}
							}
							JASSSet {
								name: String \\"indexRace\\"
								value: Call {
									name: String \\"GetPlayerRace\\"
									args: Args [
										Name \\"indexPlayer\\"
									]
								}
							}
							EmptyLine {}
							Comment \\" Create initial race-specific starting units\\"
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"indexRace\\"
									operator: String \\"==\\"
									right: Name \\"RACE_HUMAN\\"
								}
								then: Statements [
									Call {
										name: String \\"MeleeStartingUnitsHuman\\"
										args: Args [
											Name \\"indexPlayer\\"
											Name \\"indexStartLoc\\"
											Boolean true
											Boolean true
											Boolean true
										]
										statement: Boolean true
									}
								]
								elses: Array [
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"indexRace\\"
											operator: String \\"==\\"
											right: Name \\"RACE_ORC\\"
										}
										statements: Statements [
											Call {
												name: String \\"MeleeStartingUnitsOrc\\"
												args: Args [
													Name \\"indexPlayer\\"
													Name \\"indexStartLoc\\"
													Boolean true
													Boolean true
													Boolean true
												]
												statement: Boolean true
											}
										]
									}
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"indexRace\\"
											operator: String \\"==\\"
											right: Name \\"RACE_UNDEAD\\"
										}
										statements: Statements [
											Call {
												name: String \\"MeleeStartingUnitsUndead\\"
												args: Args [
													Name \\"indexPlayer\\"
													Name \\"indexStartLoc\\"
													Boolean true
													Boolean true
													Boolean true
												]
												statement: Boolean true
											}
										]
									}
									ElseIf {
										condition: Parens BinaryOp {
											left: Name \\"indexRace\\"
											operator: String \\"==\\"
											right: Name \\"RACE_NIGHTELF\\"
										}
										statements: Statements [
											Call {
												name: String \\"MeleeStartingUnitsNightElf\\"
												args: Args [
													Name \\"indexPlayer\\"
													Name \\"indexStartLoc\\"
													Boolean true
													Boolean true
													Boolean true
												]
												statement: Boolean true
											}
										]
									}
									Else {
										statements: Statements [
											Call {
												name: String \\"MeleeStartingUnitsUnknownRace\\"
												args: Args [
													Name \\"indexPlayer\\"
													Name \\"indexStartLoc\\"
													Boolean true
													Boolean true
													Boolean true
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeStartingUnitsForPlayer\\"
		params: Params [
			Param {
				type: String \\"race\\"
				name: String \\"whichRace\\"
			}
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"location\\"
				name: String \\"loc\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"doHeroes\\"
			}
		]
		statements: Statements [
			Comment \\" Create initial race-specific starting units\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"whichRace\\"
					operator: String \\"==\\"
					right: Name \\"RACE_HUMAN\\"
				}
				then: Statements [
					Call {
						name: String \\"MeleeStartingUnitsHuman\\"
						args: Args [
							Name \\"whichPlayer\\"
							Name \\"loc\\"
							Name \\"doHeroes\\"
							Boolean false
							Boolean false
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"whichRace\\"
							operator: String \\"==\\"
							right: Name \\"RACE_ORC\\"
						}
						statements: Statements [
							Call {
								name: String \\"MeleeStartingUnitsOrc\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"loc\\"
									Name \\"doHeroes\\"
									Boolean false
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"whichRace\\"
							operator: String \\"==\\"
							right: Name \\"RACE_UNDEAD\\"
						}
						statements: Statements [
							Call {
								name: String \\"MeleeStartingUnitsUndead\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"loc\\"
									Name \\"doHeroes\\"
									Boolean false
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"whichRace\\"
							operator: String \\"==\\"
							right: Name \\"RACE_NIGHTELF\\"
						}
						statements: Statements [
							Call {
								name: String \\"MeleeStartingUnitsNightElf\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"loc\\"
									Name \\"doHeroes\\"
									Boolean false
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized race - ignore the request.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Melee Template Starting AI Scripts\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"PickMeleeAI\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"num\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"s1\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"s2\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"s3\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"pick\\"
			}
			EmptyLine {}
			Comment \\" easy difficulty never uses any custom AI scripts\\"
			Comment \\" that are designed to be a bit more challenging\\"
			Comment \\"\\"
			IfThenElse {
				condition: BinaryOp {
					left: Call {
						name: String \\"GetAIDifficulty\\"
						args: Args [
							Name \\"num\\"
						]
					}
					operator: String \\"==\\"
					right: Name \\"AI_DIFFICULTY_NEWBIE\\"
				}
				then: Statements [
					Call {
						name: String \\"StartMeleeAI\\"
						args: Args [
							Name \\"num\\"
							Name \\"s1\\"
						]
						statement: Boolean true
					}
					Return __undefined__
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"s2\\"
					operator: String \\"==\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"pick\\"
						value: Number 1
					}
				]
				elses: Array [
					ElseIf {
						condition: BinaryOp {
							left: Name \\"s3\\"
							operator: String \\"==\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"pick\\"
								value: Call {
									name: String \\"GetRandomInt\\"
									args: Args [
										Number 1
										Number 2
									]
								}
							}
						]
					}
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"pick\\"
								value: Call {
									name: String \\"GetRandomInt\\"
									args: Args [
										Number 1
										Number 3
									]
								}
							}
						]
					}
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"pick\\"
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					Call {
						name: String \\"StartMeleeAI\\"
						args: Args [
							Name \\"num\\"
							Name \\"s1\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: BinaryOp {
							left: Name \\"pick\\"
							operator: String \\"==\\"
							right: Number 2
						}
						statements: Statements [
							Call {
								name: String \\"StartMeleeAI\\"
								args: Args [
									Name \\"num\\"
									Name \\"s2\\"
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Call {
								name: String \\"StartMeleeAI\\"
								args: Args [
									Name \\"num\\"
									Name \\"s3\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeStartingAI\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"race\\"
				name: String \\"indexRace\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerSlotState\\"
								args: Args [
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"PLAYER_SLOT_STATE_PLAYING\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"indexRace\\"
								value: Call {
									name: String \\"GetPlayerRace\\"
									args: Args [
										Name \\"indexPlayer\\"
									]
								}
							}
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetPlayerController\\"
										args: Args [
											Name \\"indexPlayer\\"
										]
									}
									operator: String \\"==\\"
									right: Name \\"MAP_CONTROL_COMPUTER\\"
								}
								then: Statements [
									Comment \\" Run a race-specific melee AI script.\\"
									IfThenElse {
										condition: Parens BinaryOp {
											left: Name \\"indexRace\\"
											operator: String \\"==\\"
											right: Name \\"RACE_HUMAN\\"
										}
										then: Statements [
											Call {
												name: String \\"PickMeleeAI\\"
												args: Args [
													Name \\"indexPlayer\\"
													String \\"human.ai\\"
													Null
													Null
												]
												statement: Boolean true
											}
										]
										elses: Array [
											ElseIf {
												condition: Parens BinaryOp {
													left: Name \\"indexRace\\"
													operator: String \\"==\\"
													right: Name \\"RACE_ORC\\"
												}
												statements: Statements [
													Call {
														name: String \\"PickMeleeAI\\"
														args: Args [
															Name \\"indexPlayer\\"
															String \\"orc.ai\\"
															Null
															Null
														]
														statement: Boolean true
													}
												]
											}
											ElseIf {
												condition: Parens BinaryOp {
													left: Name \\"indexRace\\"
													operator: String \\"==\\"
													right: Name \\"RACE_UNDEAD\\"
												}
												statements: Statements [
													Call {
														name: String \\"PickMeleeAI\\"
														args: Args [
															Name \\"indexPlayer\\"
															String \\"undead.ai\\"
															Null
															Null
														]
														statement: Boolean true
													}
													Call {
														name: String \\"RecycleGuardPosition\\"
														args: Args [
															ArrayRef {
																name: String \\"bj_ghoul\\"
																prop: Name \\"index\\"
															}
														]
														statement: Boolean true
													}
												]
											}
											ElseIf {
												condition: Parens BinaryOp {
													left: Name \\"indexRace\\"
													operator: String \\"==\\"
													right: Name \\"RACE_NIGHTELF\\"
												}
												statements: Statements [
													Call {
														name: String \\"PickMeleeAI\\"
														args: Args [
															Name \\"indexPlayer\\"
															String \\"elf.ai\\"
															Null
															Null
														]
														statement: Boolean true
													}
												]
											}
											Else {
												statements: Statements [
													Comment \\" Unrecognized race.\\"
												]
											}
										]
									}
									Call {
										name: String \\"ShareEverythingWithTeamAI\\"
										args: Args [
											Name \\"indexPlayer\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	JASSFunction {
		name: String \\"LockGuardPosition\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"targ\\"
			}
		]
		statements: Statements [
			Call {
				name: String \\"SetUnitCreepGuard\\"
				args: Args [
					Name \\"targ\\"
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Melee Template Victory / Defeat Conditions\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleePlayerIsOpponent\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"opponentIndex\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Variable {
				type: String \\"player\\"
				name: String \\"thePlayer\\"
				value: Call {
					name: String \\"Player\\"
					args: Args [
						Name \\"playerIndex\\"
					]
				}
			}
			Variable {
				type: String \\"player\\"
				name: String \\"theOpponent\\"
				value: Call {
					name: String \\"Player\\"
					args: Args [
						Name \\"opponentIndex\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" The player himself is not an opponent.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"playerIndex\\"
					operator: String \\"==\\"
					right: Name \\"opponentIndex\\"
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			Comment \\" Unused player slots are not opponents.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetPlayerSlotState\\"
						args: Args [
							Name \\"theOpponent\\"
						]
					}
					operator: String \\"!=\\"
					right: Name \\"PLAYER_SLOT_STATE_PLAYING\\"
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			Comment \\" Players who are already defeated are not opponents.\\"
			IfThenElse {
				condition: Parens ArrayRef {
					name: String \\"bj_meleeDefeated\\"
					prop: Name \\"opponentIndex\\"
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			Comment \\" Allied players with allied victory set are not opponents.\\"
			IfThenElse {
				condition: Call {
					name: String \\"GetPlayerAlliance\\"
					args: Args [
						Name \\"thePlayer\\"
						Name \\"theOpponent\\"
						Name \\"ALLIANCE_PASSIVE\\"
					]
				}
				then: Statements [
					IfThenElse {
						condition: Call {
							name: String \\"GetPlayerAlliance\\"
							args: Args [
								Name \\"theOpponent\\"
								Name \\"thePlayer\\"
								Name \\"ALLIANCE_PASSIVE\\"
							]
						}
						then: Statements [
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetPlayerState\\"
										args: Args [
											Name \\"thePlayer\\"
											Name \\"PLAYER_STATE_ALLIED_VICTORY\\"
										]
									}
									operator: String \\"==\\"
									right: Number 1
								}
								then: Statements [
									IfThenElse {
										condition: Parens BinaryOp {
											left: Call {
												name: String \\"GetPlayerState\\"
												args: Args [
													Name \\"theOpponent\\"
													Name \\"PLAYER_STATE_ALLIED_VICTORY\\"
												]
											}
											operator: String \\"==\\"
											right: Number 1
										}
										then: Statements [
											Return Boolean false
										]
									}
								]
							}
						]
					}
				]
			}
			EmptyLine {}
			Return Boolean true
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Count buildings currently owned by all allies, including the player themself.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeGetAllyStructureCount\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"buildingCount\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			Comment \\" Count the number of buildings controlled by all not-yet-defeated co-allies.\\"
			JASSSet {
				name: String \\"buildingCount\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					EmptyLine {}
					Comment \\" uncomment to cause defeat even if you have control of ally structures, but yours have been nixed\\"
					Comment \\"if (PlayersAreCoAllied(whichPlayer, indexPlayer) and not bj_meleeDefeated[playerIndex]) then\\"
					IfThenElse {
						condition: Parens Call {
							name: String \\"PlayersAreCoAllied\\"
							args: Args [
								Name \\"whichPlayer\\"
								Name \\"indexPlayer\\"
							]
						}
						then: Statements [
							JASSSet {
								name: String \\"buildingCount\\"
								value: BinaryOp {
									left: Name \\"buildingCount\\"
									operator: String \\"+\\"
									right: Call {
										name: String \\"GetPlayerStructureCount\\"
										args: Args [
											Name \\"indexPlayer\\"
											Boolean true
										]
									}
								}
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Return Name \\"buildingCount\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Count allies, excluding dead players and the player themself.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeGetAllyCount\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"playerCount\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			Comment \\" Count the number of not-yet-defeated co-allies.\\"
			JASSSet {
				name: String \\"playerCount\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					IfThenElse {
						condition: BinaryOp {
							left: BinaryOp {
								left: Call {
									name: String \\"PlayersAreCoAllied\\"
									args: Args [
										Name \\"whichPlayer\\"
										Name \\"indexPlayer\\"
									]
								}
								operator: String \\"and\\"
								right: UnaryOp {
									operator: String \\"not\\"
									expr: ArrayRef {
										name: String \\"bj_meleeDefeated\\"
										prop: Name \\"playerIndex\\"
									}
								}
							}
							operator: String \\"and\\"
							right: Parens BinaryOp {
								left: Name \\"whichPlayer\\"
								operator: String \\"!=\\"
								right: Name \\"indexPlayer\\"
							}
						}
						then: Statements [
							JASSSet {
								name: String \\"playerCount\\"
								value: BinaryOp {
									left: Name \\"playerCount\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Return Name \\"playerCount\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Counts key structures owned by a player and his or her allies, including\\"
	Comment \\" structures currently upgrading or under construction.\\"
	Comment \\"\\"
	Comment \\" Key structures: Town Hall, Great Hall, Tree of Life, Necropolis\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeGetAllyKeyStructureCount\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"keyStructs\\"
			}
			EmptyLine {}
			Comment \\" Count the number of buildings controlled by all not-yet-defeated co-allies.\\"
			JASSSet {
				name: String \\"keyStructs\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					IfThenElse {
						condition: Parens Call {
							name: String \\"PlayersAreCoAllied\\"
							args: Args [
								Name \\"whichPlayer\\"
								Name \\"indexPlayer\\"
							]
						}
						then: Statements [
							JASSSet {
								name: String \\"keyStructs\\"
								value: BinaryOp {
									left: Name \\"keyStructs\\"
									operator: String \\"+\\"
									right: Call {
										name: String \\"BlzGetPlayerTownHallCount\\"
										args: Args [
											Name \\"indexPlayer\\"
										]
									}
								}
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Return Name \\"keyStructs\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Enum: Draw out a specific player.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeDoDrawEnum\\"
		statements: Statements [
			Variable {
				type: String \\"player\\"
				name: String \\"thePlayer\\"
				value: Call {
					name: String \\"GetEnumPlayer\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"CachePlayerHeroData\\"
				args: Args [
					Name \\"thePlayer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"RemovePlayerPreserveUnitsBJ\\"
				args: Args [
					Name \\"thePlayer\\"
					Name \\"PLAYER_GAME_RESULT_TIE\\"
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Enum: Victory out a specific player.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeDoVictoryEnum\\"
		statements: Statements [
			Variable {
				type: String \\"player\\"
				name: String \\"thePlayer\\"
				value: Call {
					name: String \\"GetEnumPlayer\\"
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
				value: Call {
					name: String \\"GetPlayerId\\"
					args: Args [
						Name \\"thePlayer\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens UnaryOp {
					operator: String \\"not\\"
					expr: ArrayRef {
						name: String \\"bj_meleeVictoried\\"
						prop: Name \\"playerIndex\\"
					}
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_meleeVictoried\\"
						value: Boolean true
						prop: Name \\"playerIndex\\"
					}
					Call {
						name: String \\"CachePlayerHeroData\\"
						args: Args [
							Name \\"thePlayer\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"RemovePlayerPreserveUnitsBJ\\"
						args: Args [
							Name \\"thePlayer\\"
							Name \\"PLAYER_GAME_RESULT_VICTORY\\"
							Boolean false
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Defeat out a specific player.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeDoDefeat\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_meleeDefeated\\"
				value: Boolean true
				prop: Call {
					name: String \\"GetPlayerId\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
			}
			Call {
				name: String \\"RemovePlayerPreserveUnitsBJ\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"PLAYER_GAME_RESULT_DEFEAT\\"
					Boolean false
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Enum: Defeat out a specific player.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeDoDefeatEnum\\"
		statements: Statements [
			Variable {
				type: String \\"player\\"
				name: String \\"thePlayer\\"
				value: Call {
					name: String \\"GetEnumPlayer\\"
				}
			}
			EmptyLine {}
			Comment \\" needs to happen before ownership change\\"
			Call {
				name: String \\"CachePlayerHeroData\\"
				args: Args [
					Name \\"thePlayer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"MakeUnitsPassiveForTeam\\"
				args: Args [
					Name \\"thePlayer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"MeleeDoDefeat\\"
				args: Args [
					Name \\"thePlayer\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" A specific player left the game.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeDoLeave\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		statements: Statements [
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetIntegerGameState\\"
						args: Args [
							Name \\"GAME_STATE_DISCONNECTED\\"
						]
					}
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					Call {
						name: String \\"GameOverDialogBJ\\"
						args: Args [
							Name \\"whichPlayer\\"
							Boolean true
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"bj_meleeDefeated\\"
								value: Boolean true
								prop: Call {
									name: String \\"GetPlayerId\\"
									args: Args [
										Name \\"whichPlayer\\"
									]
								}
							}
							Call {
								name: String \\"RemovePlayerPreserveUnitsBJ\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"PLAYER_GAME_RESULT_DEFEAT\\"
									Boolean true
								]
								statement: Boolean true
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Remove all observers\\"
	Comment \\" \\"
	JASSFunction {
		name: String \\"MeleeRemoveObservers\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			Comment \\" Give all observers the game over dialog\\"
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					EmptyLine {}
					IfThenElse {
						condition: Parens Call {
							name: String \\"IsPlayerObserver\\"
							args: Args [
								Name \\"indexPlayer\\"
							]
						}
						then: Statements [
							Call {
								name: String \\"RemovePlayerPreserveUnitsBJ\\"
								args: Args [
									Name \\"indexPlayer\\"
									Name \\"PLAYER_GAME_RESULT_NEUTRAL\\"
									Boolean false
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Test all players to determine if a team has won.  For a team to win, all\\"
	Comment \\" remaining (read: undefeated) players need to be co-allied with all other\\"
	Comment \\" remaining players.  If even one player is not allied towards another,\\"
	Comment \\" everyone must be denied victory.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeCheckForVictors\\"
		returns: String \\"force\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"opponentIndex\\"
			}
			Variable {
				type: String \\"force\\"
				name: String \\"opponentlessPlayers\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"gameOver\\"
				value: Boolean false
			}
			EmptyLine {}
			Comment \\" Check to see if any players have opponents remaining.\\"
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: ArrayRef {
								name: String \\"bj_meleeDefeated\\"
								prop: Name \\"playerIndex\\"
							}
						}
						then: Statements [
							Comment \\" Determine whether or not this player has any remaining opponents.\\"
							JASSSet {
								name: String \\"opponentIndex\\"
								value: Number 0
							}
							Loop {
								statements: Statements [
									Comment \\" If anyone has an opponent, noone can be victorious yet.\\"
									IfThenElse {
										condition: Call {
											name: String \\"MeleePlayerIsOpponent\\"
											args: Args [
												Name \\"playerIndex\\"
												Name \\"opponentIndex\\"
											]
										}
										then: Statements [
											Return Call {
												name: String \\"CreateForce\\"
											}
										]
									}
									EmptyLine {}
									JASSSet {
										name: String \\"opponentIndex\\"
										value: BinaryOp {
											left: Name \\"opponentIndex\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"opponentIndex\\"
										operator: String \\"==\\"
										right: Name \\"bj_MAX_PLAYERS\\"
									}
								]
							}
							EmptyLine {}
							Comment \\" Keep track of each opponentless player so that we can give\\"
							Comment \\" them a victory later.\\"
							Call {
								name: String \\"ForceAddPlayer\\"
								args: Args [
									Name \\"opponentlessPlayers\\"
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"playerIndex\\"
										]
									}
								]
								statement: Boolean true
							}
							JASSSet {
								name: String \\"gameOver\\"
								value: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Set the game over global flag\\"
			JASSSet {
				name: String \\"bj_meleeGameOver\\"
				value: Name \\"gameOver\\"
			}
			EmptyLine {}
			Return Name \\"opponentlessPlayers\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Test each player to determine if anyone has been defeated.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeCheckForLosersAndVictors\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"force\\"
				name: String \\"defeatedPlayers\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Variable {
				type: String \\"force\\"
				name: String \\"victoriousPlayers\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"gameOver\\"
				value: Boolean false
			}
			EmptyLine {}
			Comment \\" If the game is already over, do nothing\\"
			IfThenElse {
				condition: Parens Name \\"bj_meleeGameOver\\"
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			Comment \\" If the game was disconnected then it is over, in this case we\\"
			Comment \\" don't want to report results for anyone as they will most likely\\"
			Comment \\" conflict with the actual game results\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetIntegerGameState\\"
						args: Args [
							Name \\"GAME_STATE_DISCONNECTED\\"
						]
					}
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_meleeGameOver\\"
						value: Boolean true
					}
					Return __undefined__
				]
			}
			EmptyLine {}
			Comment \\" Check each player to see if he or she has been defeated yet.\\"
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: UnaryOp {
								operator: String \\"not\\"
								expr: ArrayRef {
									name: String \\"bj_meleeDefeated\\"
									prop: Name \\"playerIndex\\"
								}
							}
							operator: String \\"and\\"
							right: UnaryOp {
								operator: String \\"not\\"
								expr: ArrayRef {
									name: String \\"bj_meleeVictoried\\"
									prop: Name \\"playerIndex\\"
								}
							}
						}
						then: Statements [
							Comment \\"call DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 60, \\\\\\"Player\\\\\\"+I2S(playerIndex)+\\\\\\" has \\\\\\"+I2S(MeleeGetAllyStructureCount(indexPlayer))+\\\\\\" ally buildings.\\\\\\")\\"
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"MeleeGetAllyStructureCount\\"
										args: Args [
											Name \\"indexPlayer\\"
										]
									}
									operator: String \\"<=\\"
									right: Number 0
								}
								then: Statements [
									EmptyLine {}
									Comment \\" Keep track of each defeated player so that we can give\\"
									Comment \\" them a defeat later.\\"
									Call {
										name: String \\"ForceAddPlayer\\"
										args: Args [
											Name \\"defeatedPlayers\\"
											Call {
												name: String \\"Player\\"
												args: Args [
													Name \\"playerIndex\\"
												]
											}
										]
										statement: Boolean true
									}
									EmptyLine {}
									Comment \\" Set their defeated flag now so MeleeCheckForVictors\\"
									Comment \\" can detect victors.\\"
									JASSSet {
										name: String \\"bj_meleeDefeated\\"
										value: Boolean true
										prop: Name \\"playerIndex\\"
									}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Now that the defeated flags are set, check if there are any victors\\"
			JASSSet {
				name: String \\"victoriousPlayers\\"
				value: Call {
					name: String \\"MeleeCheckForVictors\\"
				}
			}
			EmptyLine {}
			Comment \\" Defeat all defeated players\\"
			Call {
				name: String \\"ForForce\\"
				args: Args [
					Name \\"defeatedPlayers\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Give victory to all victorious players\\"
			Call {
				name: String \\"ForForce\\"
				args: Args [
					Name \\"victoriousPlayers\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" If the game is over we should remove all observers\\"
			IfThenElse {
				condition: Parens Name \\"bj_meleeGameOver\\"
				then: Statements [
					Call {
						name: String \\"MeleeRemoveObservers\\"
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns a race-specific \\\\\\"build X or be revealed\\\\\\" message.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeGetCrippledWarningMessage\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Variable {
				type: String \\"race\\"
				name: String \\"r\\"
				value: Call {
					name: String \\"GetPlayerRace\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"r\\"
					operator: String \\"==\\"
					right: Name \\"RACE_HUMAN\\"
				}
				then: Statements [
					Return Call {
						name: String \\"GetLocalizedString\\"
						args: Args [
							String \\"CRIPPLE_WARNING_HUMAN\\"
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_ORC\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"CRIPPLE_WARNING_ORC\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_NIGHTELF\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"CRIPPLE_WARNING_NIGHTELF\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_UNDEAD\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"CRIPPLE_WARNING_UNDEAD\\"
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized Race\\"
							Return String \\"\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns a race-specific \\\\\\"build X\\\\\\" label for cripple timers.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeGetCrippledTimerMessage\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Variable {
				type: String \\"race\\"
				name: String \\"r\\"
				value: Call {
					name: String \\"GetPlayerRace\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"r\\"
					operator: String \\"==\\"
					right: Name \\"RACE_HUMAN\\"
				}
				then: Statements [
					Return Call {
						name: String \\"GetLocalizedString\\"
						args: Args [
							String \\"CRIPPLE_TIMER_HUMAN\\"
						]
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_ORC\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"CRIPPLE_TIMER_ORC\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_NIGHTELF\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"CRIPPLE_TIMER_NIGHTELF\\"
								]
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"r\\"
							operator: String \\"==\\"
							right: Name \\"RACE_UNDEAD\\"
						}
						statements: Statements [
							Return Call {
								name: String \\"GetLocalizedString\\"
								args: Args [
									String \\"CRIPPLE_TIMER_UNDEAD\\"
								]
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized Race\\"
							Return String \\"\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Returns a race-specific \\\\\\"build X\\\\\\" label for cripple timers.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeGetCrippledRevealedMessage\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"string\\"
		statements: Statements [
			Return BinaryOp {
				left: BinaryOp {
					left: Call {
						name: String \\"GetLocalizedString\\"
						args: Args [
							String \\"CRIPPLE_REVEALING_PREFIX\\"
						]
					}
					operator: String \\"+\\"
					right: Call {
						name: String \\"GetPlayerName\\"
						args: Args [
							Name \\"whichPlayer\\"
						]
					}
				}
				operator: String \\"+\\"
				right: Call {
					name: String \\"GetLocalizedString\\"
					args: Args [
						String \\"CRIPPLE_REVEALING_POSTFIX\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeExposePlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"expose\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"force\\"
				name: String \\"toExposeTo\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			EmptyLine {}
			Call {
				name: String \\"CripplePlayer\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"toExposeTo\\"
					Boolean false
				]
				statement: Boolean true
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_playerIsExposed\\"
				value: Name \\"expose\\"
				prop: Call {
					name: String \\"GetPlayerId\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
			}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"PlayersAreCoAllied\\"
								args: Args [
									Name \\"whichPlayer\\"
									Name \\"indexPlayer\\"
								]
							}
						}
						then: Statements [
							Call {
								name: String \\"ForceAddPlayer\\"
								args: Args [
									Name \\"toExposeTo\\"
									Name \\"indexPlayer\\"
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"CripplePlayer\\"
				args: Args [
					Name \\"whichPlayer\\"
					Name \\"toExposeTo\\"
					Name \\"expose\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyForce\\"
				args: Args [
					Name \\"toExposeTo\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeExposeAllPlayers\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex2\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer2\\"
			}
			Variable {
				type: String \\"force\\"
				name: String \\"toExposeTo\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					EmptyLine {}
					Call {
						name: String \\"ForceClear\\"
						args: Args [
							Name \\"toExposeTo\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"CripplePlayer\\"
						args: Args [
							Name \\"indexPlayer\\"
							Name \\"toExposeTo\\"
							Boolean false
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex2\\"
						value: Number 0
					}
					Loop {
						statements: Statements [
							JASSSet {
								name: String \\"indexPlayer2\\"
								value: Call {
									name: String \\"Player\\"
									args: Args [
										Name \\"playerIndex2\\"
									]
								}
							}
							EmptyLine {}
							IfThenElse {
								condition: BinaryOp {
									left: Name \\"playerIndex\\"
									operator: String \\"!=\\"
									right: Name \\"playerIndex2\\"
								}
								then: Statements [
									IfThenElse {
										condition: Parens UnaryOp {
											operator: String \\"not\\"
											expr: Call {
												name: String \\"PlayersAreCoAllied\\"
												args: Args [
													Name \\"indexPlayer\\"
													Name \\"indexPlayer2\\"
												]
											}
										}
										then: Statements [
											Call {
												name: String \\"ForceAddPlayer\\"
												args: Args [
													Name \\"toExposeTo\\"
													Name \\"indexPlayer2\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
							EmptyLine {}
							JASSSet {
								name: String \\"playerIndex2\\"
								value: BinaryOp {
									left: Name \\"playerIndex2\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"playerIndex2\\"
								operator: String \\"==\\"
								right: Name \\"bj_MAX_PLAYERS\\"
							}
						]
					}
					EmptyLine {}
					Call {
						name: String \\"CripplePlayer\\"
						args: Args [
							Name \\"indexPlayer\\"
							Name \\"toExposeTo\\"
							Boolean true
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Call {
				name: String \\"DestroyForce\\"
				args: Args [
					Name \\"toExposeTo\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeCrippledPlayerTimeout\\"
		statements: Statements [
			Variable {
				type: String \\"timer\\"
				name: String \\"expiredTimer\\"
				value: Call {
					name: String \\"GetExpiredTimer\\"
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"exposedPlayer\\"
			}
			EmptyLine {}
			Comment \\" Determine which player's timer expired.\\"
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					IfThenElse {
						condition: Parens BinaryOp {
							left: ArrayRef {
								name: String \\"bj_crippledTimer\\"
								prop: Name \\"playerIndex\\"
							}
							operator: String \\"==\\"
							right: Name \\"expiredTimer\\"
						}
						then: Statements [
							ExitWhen Boolean true
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"playerIndex\\"
					operator: String \\"==\\"
					right: Name \\"bj_MAX_PLAYERS\\"
				}
				then: Statements [
					Return __undefined__
				]
			}
			JASSSet {
				name: String \\"exposedPlayer\\"
				value: Call {
					name: String \\"Player\\"
					args: Args [
						Name \\"playerIndex\\"
					]
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetLocalPlayer\\"
					}
					operator: String \\"==\\"
					right: Name \\"exposedPlayer\\"
				}
				then: Statements [
					Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
					EmptyLine {}
					Comment \\" Hide the timer window for this player.\\"
					Call {
						name: String \\"TimerDialogDisplay\\"
						args: Args [
							ArrayRef {
								name: String \\"bj_crippledTimerWindows\\"
								prop: Name \\"playerIndex\\"
							}
							Boolean false
						]
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Comment \\" Display a text message to all players, explaining the exposure.\\"
			Call {
				name: String \\"DisplayTimedTextToPlayer\\"
				args: Args [
					Call {
						name: String \\"GetLocalPlayer\\"
					}
					Number 0
					Number 0
					Name \\"bj_MELEE_CRIPPLE_MSG_DURATION\\"
					Call {
						name: String \\"MeleeGetCrippledRevealedMessage\\"
						args: Args [
							Name \\"exposedPlayer\\"
						]
					}
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Expose the player.\\"
			Call {
				name: String \\"MeleeExposePlayer\\"
				args: Args [
					Name \\"exposedPlayer\\"
					Boolean true
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleePlayerIsCrippled\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerStructures\\"
				value: Call {
					name: String \\"GetPlayerStructureCount\\"
					args: Args [
						Name \\"whichPlayer\\"
						Boolean true
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"playerKeyStructures\\"
				value: Call {
					name: String \\"BlzGetPlayerTownHallCount\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" Dead players are not considered to be crippled.\\"
			Return BinaryOp {
				left: Parens BinaryOp {
					left: Name \\"playerStructures\\"
					operator: String \\">\\"
					right: Number 0
				}
				operator: String \\"and\\"
				right: Parens BinaryOp {
					left: Name \\"playerKeyStructures\\"
					operator: String \\"<=\\"
					right: Number 0
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Test each player to determine if anyone has become crippled.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeCheckForCrippledPlayers\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"force\\"
				name: String \\"crippledPlayers\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"isNowCrippled\\"
			}
			Variable {
				type: String \\"race\\"
				name: String \\"indexRace\\"
			}
			EmptyLine {}
			Comment \\" The \\\\\\"finish soon\\\\\\" exposure of all players overrides any \\\\\\"crippled\\\\\\" exposure\\"
			IfThenElse {
				condition: Name \\"bj_finishSoonAllExposed\\"
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			Comment \\" Check each player to see if he or she has been crippled or uncrippled.\\"
			JASSSet {
				name: String \\"playerIndex\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"playerIndex\\"
							]
						}
					}
					JASSSet {
						name: String \\"isNowCrippled\\"
						value: Call {
							name: String \\"MeleePlayerIsCrippled\\"
							args: Args [
								Name \\"indexPlayer\\"
							]
						}
					}
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: UnaryOp {
								operator: String \\"not\\"
								expr: ArrayRef {
									name: String \\"bj_playerIsCrippled\\"
									prop: Name \\"playerIndex\\"
								}
							}
							operator: String \\"and\\"
							right: Name \\"isNowCrippled\\"
						}
						then: Statements [
							EmptyLine {}
							Comment \\" Player became crippled; start their cripple timer.\\"
							JASSSet {
								name: String \\"bj_playerIsCrippled\\"
								value: Boolean true
								prop: Name \\"playerIndex\\"
							}
							Call {
								name: String \\"TimerStart\\"
								args: Args [
									ArrayRef {
										name: String \\"bj_crippledTimer\\"
										prop: Name \\"playerIndex\\"
									}
									Name \\"bj_MELEE_CRIPPLE_TIMEOUT\\"
									Boolean false
									FuncRef String \\"M\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetLocalPlayer\\"
									}
									operator: String \\"==\\"
									right: Name \\"indexPlayer\\"
								}
								then: Statements [
									Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
									EmptyLine {}
									Comment \\" Show the timer window.\\"
									Call {
										name: String \\"TimerDialogDisplay\\"
										args: Args [
											ArrayRef {
												name: String \\"bj_crippledTimerWindows\\"
												prop: Name \\"playerIndex\\"
											}
											Boolean true
										]
										statement: Boolean true
									}
									EmptyLine {}
									Comment \\" Display a warning message.\\"
									Call {
										name: String \\"DisplayTimedTextToPlayer\\"
										args: Args [
											Name \\"indexPlayer\\"
											Number 0
											Number 0
											Name \\"bj_MELEE_CRIPPLE_MSG_DURATION\\"
											Call {
												name: String \\"MeleeGetCrippledWarningMessage\\"
												args: Args [
													Name \\"indexPlayer\\"
												]
											}
										]
										statement: Boolean true
									}
								]
							}
							EmptyLine {}
						]
						elses: Array [
							ElseIf {
								condition: Parens BinaryOp {
									left: ArrayRef {
										name: String \\"bj_playerIsCrippled\\"
										prop: Name \\"playerIndex\\"
									}
									operator: String \\"and\\"
									right: UnaryOp {
										operator: String \\"not\\"
										expr: Name \\"isNowCrippled\\"
									}
								}
								statements: Statements [
									EmptyLine {}
									Comment \\" Player became uncrippled; stop their cripple timer.\\"
									JASSSet {
										name: String \\"bj_playerIsCrippled\\"
										value: Boolean false
										prop: Name \\"playerIndex\\"
									}
									Call {
										name: String \\"PauseTimer\\"
										args: Args [
											ArrayRef {
												name: String \\"bj_crippledTimer\\"
												prop: Name \\"playerIndex\\"
											}
										]
										statement: Boolean true
									}
									EmptyLine {}
									IfThenElse {
										condition: Parens BinaryOp {
											left: Call {
												name: String \\"GetLocalPlayer\\"
											}
											operator: String \\"==\\"
											right: Name \\"indexPlayer\\"
										}
										then: Statements [
											Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
											EmptyLine {}
											Comment \\" Hide the timer window for this player.\\"
											Call {
												name: String \\"TimerDialogDisplay\\"
												args: Args [
													ArrayRef {
														name: String \\"bj_crippledTimerWindows\\"
														prop: Name \\"playerIndex\\"
													}
													Boolean false
												]
												statement: Boolean true
											}
											EmptyLine {}
											Comment \\" Display a confirmation message if the player's team is still alive.\\"
											IfThenElse {
												condition: Parens BinaryOp {
													left: Call {
														name: String \\"MeleeGetAllyStructureCount\\"
														args: Args [
															Name \\"indexPlayer\\"
														]
													}
													operator: String \\">\\"
													right: Number 0
												}
												then: Statements [
													IfThenElse {
														condition: Parens ArrayRef {
															name: String \\"bj_playerIsExposed\\"
															prop: Name \\"playerIndex\\"
														}
														then: Statements [
															Call {
																name: String \\"DisplayTimedTextToPlayer\\"
																args: Args [
																	Name \\"indexPlayer\\"
																	Number 0
																	Number 0
																	Name \\"bj_MELEE_CRIPPLE_MSG_DURATION\\"
																	Call {
																		name: String \\"GetLocalizedString\\"
																		args: Args [
																			String \\"CRIPPLE_UNREVEALED\\"
																		]
																	}
																]
																statement: Boolean true
															}
														]
														elses: Array [
															Else {
																statements: Statements [
																	Call {
																		name: String \\"DisplayTimedTextToPlayer\\"
																		args: Args [
																			Name \\"indexPlayer\\"
																			Number 0
																			Number 0
																			Name \\"bj_MELEE_CRIPPLE_MSG_DURATION\\"
																			Call {
																				name: String \\"GetLocalizedString\\"
																				args: Args [
																					String \\"CRIPPLE_UNCRIPPLED\\"
																				]
																			}
																		]
																		statement: Boolean true
																	}
																]
															}
														]
													}
												]
											}
										]
									}
									EmptyLine {}
									Comment \\" If the player granted shared vision, deny that vision now.\\"
									Call {
										name: String \\"MeleeExposePlayer\\"
										args: Args [
											Name \\"indexPlayer\\"
											Boolean false
										]
										statement: Boolean true
									}
									EmptyLine {}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"playerIndex\\"
						value: BinaryOp {
							left: Name \\"playerIndex\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"playerIndex\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Determine if the lost unit should result in any defeats or victories.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeCheckLostUnit\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"lostUnit\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"player\\"
				name: String \\"lostUnitOwner\\"
				value: Call {
					name: String \\"GetOwningPlayer\\"
					args: Args [
						Name \\"lostUnit\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" We only need to check for mortality if this was the last building.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetPlayerStructureCount\\"
						args: Args [
							Name \\"lostUnitOwner\\"
							Boolean true
						]
					}
					operator: String \\"<=\\"
					right: Number 0
				}
				then: Statements [
					Call {
						name: String \\"MeleeCheckForLosersAndVictors\\"
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Comment \\" Check if the lost unit has crippled or uncrippled the player.\\"
			Comment \\" (A team with 0 units is dead, and thus considered uncrippled.)\\"
			Call {
				name: String \\"MeleeCheckForCrippledPlayers\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Determine if the gained unit should result in any defeats, victories,\\"
	Comment \\" or cripple-status changes.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"MeleeCheckAddedUnit\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"addedUnit\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"player\\"
				name: String \\"addedUnitOwner\\"
				value: Call {
					name: String \\"GetOwningPlayer\\"
					args: Args [
						Name \\"addedUnit\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" If the player was crippled, this unit may have uncrippled him/her.\\"
			IfThenElse {
				condition: Parens ArrayRef {
					name: String \\"bj_playerIsCrippled\\"
					prop: Call {
						name: String \\"GetPlayerId\\"
						args: Args [
							Name \\"addedUnitOwner\\"
						]
					}
				}
				then: Statements [
					Call {
						name: String \\"MeleeCheckForCrippledPlayers\\"
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTriggerActionConstructCancel\\"
		statements: Statements [
			Call {
				name: String \\"MeleeCheckLostUnit\\"
				args: Args [
					Call {
						name: String \\"GetCancelledStructure\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTriggerActionUnitDeath\\"
		statements: Statements [
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsUnitType\\"
					args: Args [
						Call {
							name: String \\"GetDyingUnit\\"
						}
						Name \\"UNIT_TYPE_STRUCTURE\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"MeleeCheckLostUnit\\"
						args: Args [
							Call {
								name: String \\"GetDyingUnit\\"
							}
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTriggerActionUnitConstructionStart\\"
		statements: Statements [
			Call {
				name: String \\"MeleeCheckAddedUnit\\"
				args: Args [
					Call {
						name: String \\"GetConstructingStructure\\"
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTriggerActionPlayerDefeated\\"
		statements: Statements [
			Variable {
				type: String \\"player\\"
				name: String \\"thePlayer\\"
				value: Call {
					name: String \\"GetTriggerPlayer\\"
				}
			}
			Call {
				name: String \\"CachePlayerHeroData\\"
				args: Args [
					Name \\"thePlayer\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"MeleeGetAllyCount\\"
						args: Args [
							Name \\"thePlayer\\"
						]
					}
					operator: String \\">\\"
					right: Number 0
				}
				then: Statements [
					Comment \\" If at least one ally is still alive and kicking, share units with\\"
					Comment \\" them and proceed with death.\\"
					Call {
						name: String \\"ShareEverythingWithTeam\\"
						args: Args [
							Name \\"thePlayer\\"
						]
						statement: Boolean true
					}
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: ArrayRef {
								name: String \\"bj_meleeDefeated\\"
								prop: Call {
									name: String \\"GetPlayerId\\"
									args: Args [
										Name \\"thePlayer\\"
									]
								}
							}
						}
						then: Statements [
							Call {
								name: String \\"MeleeDoDefeat\\"
								args: Args [
									Name \\"thePlayer\\"
								]
								statement: Boolean true
							}
						]
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Comment \\" If no living allies remain, swap all units and buildings over to\\"
							Comment \\" neutral_passive and proceed with death.\\"
							Call {
								name: String \\"MakeUnitsPassiveForTeam\\"
								args: Args [
									Name \\"thePlayer\\"
								]
								statement: Boolean true
							}
							IfThenElse {
								condition: Parens UnaryOp {
									operator: String \\"not\\"
									expr: ArrayRef {
										name: String \\"bj_meleeDefeated\\"
										prop: Call {
											name: String \\"GetPlayerId\\"
											args: Args [
												Name \\"thePlayer\\"
											]
										}
									}
								}
								then: Statements [
									Call {
										name: String \\"MeleeDoDefeat\\"
										args: Args [
											Name \\"thePlayer\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
			Call {
				name: String \\"MeleeCheckForLosersAndVictors\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTriggerActionPlayerLeft\\"
		statements: Statements [
			Variable {
				type: String \\"player\\"
				name: String \\"thePlayer\\"
				value: Call {
					name: String \\"GetTriggerPlayer\\"
				}
			}
			EmptyLine {}
			Comment \\" Just show game over for observers when they leave\\"
			IfThenElse {
				condition: Parens Call {
					name: String \\"IsPlayerObserver\\"
					args: Args [
						Name \\"thePlayer\\"
					]
				}
				then: Statements [
					Call {
						name: String \\"RemovePlayerPreserveUnitsBJ\\"
						args: Args [
							Name \\"thePlayer\\"
							Name \\"PLAYER_GAME_RESULT_NEUTRAL\\"
							Boolean false
						]
						statement: Boolean true
					}
					Return __undefined__
				]
			}
			EmptyLine {}
			Call {
				name: String \\"CachePlayerHeroData\\"
				args: Args [
					Name \\"thePlayer\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" This is the same as defeat except the player generates the message \\"
			Comment \\" \\\\\\"player left the game\\\\\\" as opposed to \\\\\\"player was defeated\\\\\\".\\"
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"MeleeGetAllyCount\\"
						args: Args [
							Name \\"thePlayer\\"
						]
					}
					operator: String \\">\\"
					right: Number 0
				}
				then: Statements [
					Comment \\" If at least one ally is still alive and kicking, share units with\\"
					Comment \\" them and proceed with death.\\"
					Call {
						name: String \\"ShareEverythingWithTeam\\"
						args: Args [
							Name \\"thePlayer\\"
						]
						statement: Boolean true
					}
					Call {
						name: String \\"MeleeDoLeave\\"
						args: Args [
							Name \\"thePlayer\\"
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Comment \\" If no living allies remain, swap all units and buildings over to\\"
							Comment \\" neutral_passive and proceed with death.\\"
							Call {
								name: String \\"MakeUnitsPassiveForTeam\\"
								args: Args [
									Name \\"thePlayer\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"MeleeDoLeave\\"
								args: Args [
									Name \\"thePlayer\\"
								]
								statement: Boolean true
							}
						]
					}
				]
			}
			Call {
				name: String \\"MeleeCheckForLosersAndVictors\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTriggerActionAllianceChange\\"
		statements: Statements [
			Call {
				name: String \\"MeleeCheckForLosersAndVictors\\"
				statement: Boolean true
			}
			Call {
				name: String \\"MeleeCheckForCrippledPlayers\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTriggerTournamentFinishSoon\\"
		statements: Statements [
			Comment \\" Note: We may get this trigger multiple times\\"
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"timeRemaining\\"
				value: Call {
					name: String \\"GetTournamentFinishSoonTimeRemaining\\"
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: UnaryOp {
					operator: String \\"not\\"
					expr: Name \\"bj_finishSoonAllExposed\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_finishSoonAllExposed\\"
						value: Boolean true
					}
					EmptyLine {}
					Comment \\" Reset all crippled players and their timers, and hide the local crippled timer dialog\\"
					JASSSet {
						name: String \\"playerIndex\\"
						value: Number 0
					}
					Loop {
						statements: Statements [
							JASSSet {
								name: String \\"indexPlayer\\"
								value: Call {
									name: String \\"Player\\"
									args: Args [
										Name \\"playerIndex\\"
									]
								}
							}
							IfThenElse {
								condition: ArrayRef {
									name: String \\"bj_playerIsCrippled\\"
									prop: Name \\"playerIndex\\"
								}
								then: Statements [
									Comment \\" Uncripple the player\\"
									JASSSet {
										name: String \\"bj_playerIsCrippled\\"
										value: Boolean false
										prop: Name \\"playerIndex\\"
									}
									Call {
										name: String \\"PauseTimer\\"
										args: Args [
											ArrayRef {
												name: String \\"bj_crippledTimer\\"
												prop: Name \\"playerIndex\\"
											}
										]
										statement: Boolean true
									}
									EmptyLine {}
									IfThenElse {
										condition: Parens BinaryOp {
											left: Call {
												name: String \\"GetLocalPlayer\\"
											}
											operator: String \\"==\\"
											right: Name \\"indexPlayer\\"
										}
										then: Statements [
											Comment \\" Use only local code (no net traffic) within this block to avoid desyncs.\\"
											EmptyLine {}
											Comment \\" Hide the timer window.\\"
											Call {
												name: String \\"TimerDialogDisplay\\"
												args: Args [
													ArrayRef {
														name: String \\"bj_crippledTimerWindows\\"
														prop: Name \\"playerIndex\\"
													}
													Boolean false
												]
												statement: Boolean true
											}
										]
									}
									EmptyLine {}
								]
							}
							JASSSet {
								name: String \\"playerIndex\\"
								value: BinaryOp {
									left: Name \\"playerIndex\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"playerIndex\\"
								operator: String \\"==\\"
								right: Name \\"bj_MAX_PLAYERS\\"
							}
						]
					}
					EmptyLine {}
					Comment \\" Expose all players\\"
					Call {
						name: String \\"MeleeExposeAllPlayers\\"
						statement: Boolean true
					}
				]
			}
			EmptyLine {}
			Comment \\" Show the \\\\\\"finish soon\\\\\\" timer dialog and set the real time remaining\\"
			Call {
				name: String \\"TimerDialogDisplay\\"
				args: Args [
					Name \\"bj_finishSoonTimerDialog\\"
					Boolean true
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TimerDialogSetRealTimeRemaining\\"
				args: Args [
					Name \\"bj_finishSoonTimerDialog\\"
					Name \\"timeRemaining\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeWasUserPlayer\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
		]
		returns: String \\"boolean\\"
		statements: Statements [
			Variable {
				type: String \\"playerslotstate\\"
				name: String \\"slotState\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Call {
						name: String \\"GetPlayerController\\"
						args: Args [
							Name \\"whichPlayer\\"
						]
					}
					operator: String \\"!=\\"
					right: Name \\"MAP_CONTROL_USER\\"
				}
				then: Statements [
					Return Boolean false
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"slotState\\"
				value: Call {
					name: String \\"GetPlayerSlotState\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
			}
			EmptyLine {}
			Return Parens BinaryOp {
				left: BinaryOp {
					left: Name \\"slotState\\"
					operator: String \\"==\\"
					right: Name \\"PLAYER_SLOT_STATE_PLAYING\\"
				}
				operator: String \\"or\\"
				right: BinaryOp {
					left: Name \\"slotState\\"
					operator: String \\"==\\"
					right: Name \\"PLAYER_SLOT_STATE_LEFT\\"
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTournamentFinishNowRuleA\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"multiplier\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerScore\\"
				array: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"teamScore\\"
				array: Boolean true
			}
			Variable {
				type: String \\"force\\"
				name: String \\"teamForce\\"
				array: Boolean true
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"teamCount\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"index2\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer2\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bestTeam\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"bestScore\\"
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"draw\\"
			}
			EmptyLine {}
			Comment \\" Compute individual player scores\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					IfThenElse {
						condition: Call {
							name: String \\"MeleeWasUserPlayer\\"
							args: Args [
								Name \\"indexPlayer\\"
							]
						}
						then: Statements [
							JASSSet {
								name: String \\"playerScore\\"
								value: Call {
									name: String \\"GetTournamentScore\\"
									args: Args [
										Name \\"indexPlayer\\"
									]
								}
								prop: Name \\"index\\"
							}
							IfThenElse {
								condition: BinaryOp {
									left: ArrayRef {
										name: String \\"playerScore\\"
										prop: Name \\"index\\"
									}
									operator: String \\"<=\\"
									right: Number 0
								}
								then: Statements [
									JASSSet {
										name: String \\"playerScore\\"
										value: Number 1
										prop: Name \\"index\\"
									}
								]
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									JASSSet {
										name: String \\"playerScore\\"
										value: Number 0
										prop: Name \\"index\\"
									}
								]
							}
						]
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Compute team scores and team forces\\"
			JASSSet {
				name: String \\"teamCount\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					IfThenElse {
						condition: BinaryOp {
							left: ArrayRef {
								name: String \\"playerScore\\"
								prop: Name \\"index\\"
							}
							operator: String \\"!=\\"
							right: Number 0
						}
						then: Statements [
							JASSSet {
								name: String \\"indexPlayer\\"
								value: Call {
									name: String \\"Player\\"
									args: Args [
										Name \\"index\\"
									]
								}
							}
							EmptyLine {}
							JASSSet {
								name: String \\"teamScore\\"
								value: Number 0
								prop: Name \\"teamCount\\"
							}
							JASSSet {
								name: String \\"teamForce\\"
								value: Call {
									name: String \\"CreateForce\\"
								}
								prop: Name \\"teamCount\\"
							}
							EmptyLine {}
							JASSSet {
								name: String \\"index2\\"
								value: Name \\"index\\"
							}
							Loop {
								statements: Statements [
									IfThenElse {
										condition: BinaryOp {
											left: ArrayRef {
												name: String \\"playerScore\\"
												prop: Name \\"index2\\"
											}
											operator: String \\"!=\\"
											right: Number 0
										}
										then: Statements [
											JASSSet {
												name: String \\"indexPlayer2\\"
												value: Call {
													name: String \\"Player\\"
													args: Args [
														Name \\"index2\\"
													]
												}
											}
											EmptyLine {}
											IfThenElse {
												condition: Call {
													name: String \\"PlayersAreCoAllied\\"
													args: Args [
														Name \\"indexPlayer\\"
														Name \\"indexPlayer2\\"
													]
												}
												then: Statements [
													JASSSet {
														name: String \\"teamScore\\"
														value: BinaryOp {
															left: ArrayRef {
																name: String \\"teamScore\\"
																prop: Name \\"teamCount\\"
															}
															operator: String \\"+\\"
															right: ArrayRef {
																name: String \\"playerScore\\"
																prop: Name \\"index2\\"
															}
														}
														prop: Name \\"teamCount\\"
													}
													Call {
														name: String \\"ForceAddPlayer\\"
														args: Args [
															ArrayRef {
																name: String \\"teamForce\\"
																prop: Name \\"teamCount\\"
															}
															Name \\"indexPlayer2\\"
														]
														statement: Boolean true
													}
													JASSSet {
														name: String \\"playerScore\\"
														value: Number 0
														prop: Name \\"index2\\"
													}
												]
											}
										]
									}
									EmptyLine {}
									JASSSet {
										name: String \\"index2\\"
										value: BinaryOp {
											left: Name \\"index2\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"index2\\"
										operator: String \\"==\\"
										right: Name \\"bj_MAX_PLAYERS\\"
									}
								]
							}
							EmptyLine {}
							JASSSet {
								name: String \\"teamCount\\"
								value: BinaryOp {
									left: Name \\"teamCount\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" The game is now over\\"
			JASSSet {
				name: String \\"bj_meleeGameOver\\"
				value: Boolean true
			}
			EmptyLine {}
			Comment \\" There should always be at least one team, but continue to work if not\\"
			IfThenElse {
				condition: BinaryOp {
					left: Name \\"teamCount\\"
					operator: String \\"!=\\"
					right: Number 0
				}
				then: Statements [
					EmptyLine {}
					Comment \\" Find best team score\\"
					JASSSet {
						name: String \\"bestTeam\\"
						value: UnaryOp {
							operator: String \\"-\\"
							expr: Number 1
						}
					}
					JASSSet {
						name: String \\"bestScore\\"
						value: UnaryOp {
							operator: String \\"-\\"
							expr: Number 1
						}
					}
					JASSSet {
						name: String \\"index\\"
						value: Number 0
					}
					Loop {
						statements: Statements [
							IfThenElse {
								condition: BinaryOp {
									left: ArrayRef {
										name: String \\"teamScore\\"
										prop: Name \\"index\\"
									}
									operator: String \\">\\"
									right: Name \\"bestScore\\"
								}
								then: Statements [
									JASSSet {
										name: String \\"bestTeam\\"
										value: Name \\"index\\"
									}
									JASSSet {
										name: String \\"bestScore\\"
										value: ArrayRef {
											name: String \\"teamScore\\"
											prop: Name \\"index\\"
										}
									}
								]
							}
							EmptyLine {}
							JASSSet {
								name: String \\"index\\"
								value: BinaryOp {
									left: Name \\"index\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"index\\"
								operator: String \\"==\\"
								right: Name \\"teamCount\\"
							}
						]
					}
					EmptyLine {}
					Comment \\" Check whether the best team's score is 'multiplier' times better than\\"
					Comment \\" every other team. In the case of multiplier == 1 and exactly equal team\\"
					Comment \\" scores, the first team (which was randomly chosen by the server) will win.\\"
					JASSSet {
						name: String \\"draw\\"
						value: Boolean false
					}
					JASSSet {
						name: String \\"index\\"
						value: Number 0
					}
					Loop {
						statements: Statements [
							IfThenElse {
								condition: BinaryOp {
									left: Name \\"index\\"
									operator: String \\"!=\\"
									right: Name \\"bestTeam\\"
								}
								then: Statements [
									IfThenElse {
										condition: BinaryOp {
											left: Name \\"bestScore\\"
											operator: String \\"<\\"
											right: Parens BinaryOp {
												left: Name \\"multiplier\\"
												operator: String \\"*\\"
												right: ArrayRef {
													name: String \\"teamScore\\"
													prop: Name \\"index\\"
												}
											}
										}
										then: Statements [
											JASSSet {
												name: String \\"draw\\"
												value: Boolean true
											}
										]
									}
								]
							}
							EmptyLine {}
							JASSSet {
								name: String \\"index\\"
								value: BinaryOp {
									left: Name \\"index\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"index\\"
								operator: String \\"==\\"
								right: Name \\"teamCount\\"
							}
						]
					}
					EmptyLine {}
					IfThenElse {
						condition: Name \\"draw\\"
						then: Statements [
							Comment \\" Give draw to all players on all teams\\"
							JASSSet {
								name: String \\"index\\"
								value: Number 0
							}
							Loop {
								statements: Statements [
									Call {
										name: String \\"ForForce\\"
										args: Args [
											ArrayRef {
												name: String \\"teamForce\\"
												prop: Name \\"index\\"
											}
											FuncRef String \\"M\\"
										]
										statement: Boolean true
									}
									EmptyLine {}
									JASSSet {
										name: String \\"index\\"
										value: BinaryOp {
											left: Name \\"index\\"
											operator: String \\"+\\"
											right: Number 1
										}
									}
									ExitWhen BinaryOp {
										left: Name \\"index\\"
										operator: String \\"==\\"
										right: Name \\"teamCount\\"
									}
								]
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									Comment \\" Give defeat to all players on teams other than the best team\\"
									JASSSet {
										name: String \\"index\\"
										value: Number 0
									}
									Loop {
										statements: Statements [
											IfThenElse {
												condition: BinaryOp {
													left: Name \\"index\\"
													operator: String \\"!=\\"
													right: Name \\"bestTeam\\"
												}
												then: Statements [
													Call {
														name: String \\"ForForce\\"
														args: Args [
															ArrayRef {
																name: String \\"teamForce\\"
																prop: Name \\"index\\"
															}
															FuncRef String \\"M\\"
														]
														statement: Boolean true
													}
												]
											}
											EmptyLine {}
											JASSSet {
												name: String \\"index\\"
												value: BinaryOp {
													left: Name \\"index\\"
													operator: String \\"+\\"
													right: Number 1
												}
											}
											ExitWhen BinaryOp {
												left: Name \\"index\\"
												operator: String \\"==\\"
												right: Name \\"teamCount\\"
											}
										]
									}
									EmptyLine {}
									Comment \\" Give victory to all players on the best team\\"
									Call {
										name: String \\"ForForce\\"
										args: Args [
											ArrayRef {
												name: String \\"teamForce\\"
												prop: Name \\"bestTeam\\"
											}
											FuncRef String \\"M\\"
										]
										statement: Boolean true
									}
								]
							}
						]
					}
				]
			}
			EmptyLine {}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeTriggerTournamentFinishNow\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"rule\\"
				value: Call {
					name: String \\"GetTournamentFinishNowRule\\"
				}
			}
			EmptyLine {}
			Comment \\" If the game is already over, do nothing\\"
			IfThenElse {
				condition: Name \\"bj_meleeGameOver\\"
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"rule\\"
					operator: String \\"==\\"
					right: Number 1
				}
				then: Statements [
					Comment \\" Finals games\\"
					Call {
						name: String \\"MeleeTournamentFinishNowRuleA\\"
						args: Args [
							Number 1
						]
						statement: Boolean true
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							Comment \\" Preliminary games\\"
							Call {
								name: String \\"MeleeTournamentFinishNowRuleA\\"
								args: Args [
									Number 3
								]
								statement: Boolean true
							}
						]
					}
				]
			}
			EmptyLine {}
			Comment \\" Since the game is over we should remove all observers\\"
			Call {
				name: String \\"MeleeRemoveObservers\\"
				statement: Boolean true
			}
			EmptyLine {}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeInitVictoryDefeat\\"
		statements: Statements [
			Variable {
				type: String \\"trigger\\"
				name: String \\"trig\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			EmptyLine {}
			Comment \\" Create a timer window for the \\\\\\"finish soon\\\\\\" timeout period, it has no timer\\"
			Comment \\" because it is driven by real time (outside of the game state to avoid desyncs)\\"
			JASSSet {
				name: String \\"bj_finishSoonTimerDialog\\"
				value: Call {
					name: String \\"CreateTimerDialog\\"
					args: Args [
						Null
					]
				}
			}
			EmptyLine {}
			Comment \\" Set a trigger to fire when we receive a \\\\\\"finish soon\\\\\\" game event\\"
			JASSSet {
				name: String \\"trig\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterGameEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"EVENT_GAME_TOURNAMENT_FINISH_SOON\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"trig\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Set a trigger to fire when we receive a \\\\\\"finish now\\\\\\" game event\\"
			JASSSet {
				name: String \\"trig\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterGameEvent\\"
				args: Args [
					Name \\"trig\\"
					Name \\"EVENT_GAME_TOURNAMENT_FINISH_NOW\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"trig\\"
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Set up each player's mortality code.\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"indexPlayer\\"
						value: Call {
							name: String \\"Player\\"
							args: Args [
								Name \\"index\\"
							]
						}
					}
					EmptyLine {}
					Comment \\" Make sure this player slot is playing.\\"
					IfThenElse {
						condition: Parens BinaryOp {
							left: Call {
								name: String \\"GetPlayerSlotState\\"
								args: Args [
									Name \\"indexPlayer\\"
								]
							}
							operator: String \\"==\\"
							right: Name \\"PLAYER_SLOT_STATE_PLAYING\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"bj_meleeDefeated\\"
								value: Boolean false
								prop: Name \\"index\\"
							}
							JASSSet {
								name: String \\"bj_meleeVictoried\\"
								value: Boolean false
								prop: Name \\"index\\"
							}
							EmptyLine {}
							Comment \\" Create a timer and timer window in case the player is crippled.\\"
							JASSSet {
								name: String \\"bj_playerIsCrippled\\"
								value: Boolean false
								prop: Name \\"index\\"
							}
							JASSSet {
								name: String \\"bj_playerIsExposed\\"
								value: Boolean false
								prop: Name \\"index\\"
							}
							JASSSet {
								name: String \\"bj_crippledTimer\\"
								value: Call {
									name: String \\"CreateTimer\\"
								}
								prop: Name \\"index\\"
							}
							JASSSet {
								name: String \\"bj_crippledTimerWindows\\"
								value: Call {
									name: String \\"CreateTimerDialog\\"
									args: Args [
										ArrayRef {
											name: String \\"bj_crippledTimer\\"
											prop: Name \\"index\\"
										}
									]
								}
								prop: Name \\"index\\"
							}
							Call {
								name: String \\"TimerDialogSetTitle\\"
								args: Args [
									ArrayRef {
										name: String \\"bj_crippledTimerWindows\\"
										prop: Name \\"index\\"
									}
									Call {
										name: String \\"MeleeGetCrippledTimerMessage\\"
										args: Args [
											Name \\"indexPlayer\\"
										]
									}
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set a trigger to fire whenever a building is cancelled for this player.\\"
							JASSSet {
								name: String \\"trig\\"
								value: Call {
									name: String \\"CreateTrigger\\"
								}
							}
							Call {
								name: String \\"TriggerRegisterPlayerUnitEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"indexPlayer\\"
									Name \\"EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL\\"
									Null
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerAddAction\\"
								args: Args [
									Name \\"trig\\"
									FuncRef String \\"M\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set a trigger to fire whenever a unit dies for this player.\\"
							JASSSet {
								name: String \\"trig\\"
								value: Call {
									name: String \\"CreateTrigger\\"
								}
							}
							Call {
								name: String \\"TriggerRegisterPlayerUnitEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"indexPlayer\\"
									Name \\"EVENT_PLAYER_UNIT_DEATH\\"
									Null
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerAddAction\\"
								args: Args [
									Name \\"trig\\"
									FuncRef String \\"M\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set a trigger to fire whenever a unit begins construction for this player\\"
							JASSSet {
								name: String \\"trig\\"
								value: Call {
									name: String \\"CreateTrigger\\"
								}
							}
							Call {
								name: String \\"TriggerRegisterPlayerUnitEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"indexPlayer\\"
									Name \\"EVENT_PLAYER_UNIT_CONSTRUCT_START\\"
									Null
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerAddAction\\"
								args: Args [
									Name \\"trig\\"
									FuncRef String \\"M\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set a trigger to fire whenever this player defeats-out\\"
							JASSSet {
								name: String \\"trig\\"
								value: Call {
									name: String \\"CreateTrigger\\"
								}
							}
							Call {
								name: String \\"TriggerRegisterPlayerEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"indexPlayer\\"
									Name \\"EVENT_PLAYER_DEFEAT\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerAddAction\\"
								args: Args [
									Name \\"trig\\"
									FuncRef String \\"M\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set a trigger to fire whenever this player leaves\\"
							JASSSet {
								name: String \\"trig\\"
								value: Call {
									name: String \\"CreateTrigger\\"
								}
							}
							Call {
								name: String \\"TriggerRegisterPlayerEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"indexPlayer\\"
									Name \\"EVENT_PLAYER_LEAVE\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerAddAction\\"
								args: Args [
									Name \\"trig\\"
									FuncRef String \\"M\\"
								]
								statement: Boolean true
							}
							EmptyLine {}
							Comment \\" Set a trigger to fire whenever this player changes his/her alliances.\\"
							JASSSet {
								name: String \\"trig\\"
								value: Call {
									name: String \\"CreateTrigger\\"
								}
							}
							Call {
								name: String \\"TriggerRegisterPlayerAllianceChange\\"
								args: Args [
									Name \\"trig\\"
									Name \\"indexPlayer\\"
									Name \\"ALLIANCE_PASSIVE\\"
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerRegisterPlayerStateEvent\\"
								args: Args [
									Name \\"trig\\"
									Name \\"indexPlayer\\"
									Name \\"PLAYER_STATE_ALLIED_VICTORY\\"
									Name \\"EQUAL\\"
									Number 1
								]
								statement: Boolean true
							}
							Call {
								name: String \\"TriggerAddAction\\"
								args: Args [
									Name \\"trig\\"
									FuncRef String \\"M\\"
								]
								statement: Boolean true
							}
						]
						elses: Array [
							Else {
								statements: Statements [
									JASSSet {
										name: String \\"bj_meleeDefeated\\"
										value: Boolean true
										prop: Name \\"index\\"
									}
									JASSSet {
										name: String \\"bj_meleeVictoried\\"
										value: Boolean false
										prop: Name \\"index\\"
									}
									EmptyLine {}
									Comment \\" Handle leave events for observers\\"
									IfThenElse {
										condition: Parens Call {
											name: String \\"IsPlayerObserver\\"
											args: Args [
												Name \\"indexPlayer\\"
											]
										}
										then: Statements [
											Comment \\" Set a trigger to fire whenever this player leaves\\"
											JASSSet {
												name: String \\"trig\\"
												value: Call {
													name: String \\"CreateTrigger\\"
												}
											}
											Call {
												name: String \\"TriggerRegisterPlayerEvent\\"
												args: Args [
													Name \\"trig\\"
													Name \\"indexPlayer\\"
													Name \\"EVENT_PLAYER_LEAVE\\"
												]
												statement: Boolean true
											}
											Call {
												name: String \\"TriggerAddAction\\"
												args: Args [
													Name \\"trig\\"
													FuncRef String \\"M\\"
												]
												statement: Boolean true
											}
										]
									}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Test for victory / defeat at startup, in case the user has already won / lost.\\"
			Comment \\" Allow for a short time to pass first, so that the map can finish loading.\\"
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Call {
						name: String \\"CreateTimer\\"
					}
					Number 2
					Boolean false
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Player Slot Availability\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"CheckInitPlayerSlotAvailability\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens UnaryOp {
					operator: String \\"not\\"
					expr: Name \\"bj_slotControlReady\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"index\\"
						value: Number 0
					}
					Loop {
						statements: Statements [
							JASSSet {
								name: String \\"bj_slotControlUsed\\"
								value: Boolean false
								prop: Name \\"index\\"
							}
							JASSSet {
								name: String \\"bj_slotControl\\"
								value: Name \\"MAP_CONTROL_USER\\"
								prop: Name \\"index\\"
							}
							JASSSet {
								name: String \\"index\\"
								value: BinaryOp {
									left: Name \\"index\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							ExitWhen BinaryOp {
								left: Name \\"index\\"
								operator: String \\"==\\"
								right: Name \\"bj_MAX_PLAYERS\\"
							}
						]
					}
					JASSSet {
						name: String \\"bj_slotControlReady\\"
						value: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetPlayerSlotAvailable\\"
		params: Params [
			Param {
				type: String \\"player\\"
				name: String \\"whichPlayer\\"
			}
			Param {
				type: String \\"mapcontrol\\"
				name: String \\"control\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"playerIndex\\"
				value: Call {
					name: String \\"GetPlayerId\\"
					args: Args [
						Name \\"whichPlayer\\"
					]
				}
			}
			EmptyLine {}
			Call {
				name: String \\"CheckInitPlayerSlotAvailability\\"
				statement: Boolean true
			}
			JASSSet {
				name: String \\"bj_slotControlUsed\\"
				value: Boolean true
				prop: Name \\"playerIndex\\"
			}
			JASSSet {
				name: String \\"bj_slotControl\\"
				value: Name \\"control\\"
				prop: Name \\"playerIndex\\"
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Generic Template Player-slot Initialization\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"TeamInitPlayerSlots\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"teamCount\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"player\\"
				name: String \\"indexPlayer\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"team\\"
			}
			EmptyLine {}
			Call {
				name: String \\"SetTeams\\"
				args: Args [
					Name \\"teamCount\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"CheckInitPlayerSlotAvailability\\"
				statement: Boolean true
			}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"team\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					IfThenElse {
						condition: Parens ArrayRef {
							name: String \\"bj_slotControlUsed\\"
							prop: Name \\"index\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"indexPlayer\\"
								value: Call {
									name: String \\"Player\\"
									args: Args [
										Name \\"index\\"
									]
								}
							}
							Call {
								name: String \\"SetPlayerTeam\\"
								args: Args [
									Name \\"indexPlayer\\"
									Name \\"team\\"
								]
								statement: Boolean true
							}
							JASSSet {
								name: String \\"team\\"
								value: BinaryOp {
									left: Name \\"team\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							IfThenElse {
								condition: Parens BinaryOp {
									left: Name \\"team\\"
									operator: String \\">=\\"
									right: Name \\"teamCount\\"
								}
								then: Statements [
									JASSSet {
										name: String \\"team\\"
										value: Number 0
									}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MeleeInitPlayerSlots\\"
		statements: Statements [
			Call {
				name: String \\"TeamInitPlayerSlots\\"
				args: Args [
					Name \\"bj_MAX_PLAYERS\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"FFAInitPlayerSlots\\"
		statements: Statements [
			Call {
				name: String \\"TeamInitPlayerSlots\\"
				args: Args [
					Name \\"bj_MAX_PLAYERS\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"OneOnOneInitPlayerSlots\\"
		statements: Statements [
			Comment \\" Limit the game to 2 players.\\"
			Call {
				name: String \\"SetTeams\\"
				args: Args [
					Number 2
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetPlayers\\"
				args: Args [
					Number 2
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TeamInitPlayerSlots\\"
				args: Args [
					Number 2
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitGenericPlayerSlots\\"
		statements: Statements [
			Variable {
				type: String \\"gametype\\"
				name: String \\"gType\\"
				value: Call {
					name: String \\"GetGameTypeSelected\\"
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"gType\\"
					operator: String \\"==\\"
					right: Name \\"GAME_TYPE_MELEE\\"
				}
				then: Statements [
					Call {
						name: String \\"MeleeInitPlayerSlots\\"
						statement: Boolean true
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"gType\\"
							operator: String \\"==\\"
							right: Name \\"GAME_TYPE_FFA\\"
						}
						statements: Statements [
							Call {
								name: String \\"FFAInitPlayerSlots\\"
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"gType\\"
							operator: String \\"==\\"
							right: Name \\"GAME_TYPE_USE_MAP_SETTINGS\\"
						}
						statements: Statements [
							Comment \\" Do nothing; the map-specific script handles this.\\"
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"gType\\"
							operator: String \\"==\\"
							right: Name \\"GAME_TYPE_ONE_ON_ONE\\"
						}
						statements: Statements [
							Call {
								name: String \\"OneOnOneInitPlayerSlots\\"
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"gType\\"
							operator: String \\"==\\"
							right: Name \\"GAME_TYPE_TWO_TEAM_PLAY\\"
						}
						statements: Statements [
							Call {
								name: String \\"TeamInitPlayerSlots\\"
								args: Args [
									Number 2
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"gType\\"
							operator: String \\"==\\"
							right: Name \\"GAME_TYPE_THREE_TEAM_PLAY\\"
						}
						statements: Statements [
							Call {
								name: String \\"TeamInitPlayerSlots\\"
								args: Args [
									Number 3
								]
								statement: Boolean true
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"gType\\"
							operator: String \\"==\\"
							right: Name \\"GAME_TYPE_FOUR_TEAM_PLAY\\"
						}
						statements: Statements [
							Call {
								name: String \\"TeamInitPlayerSlots\\"
								args: Args [
									Number 4
								]
								statement: Boolean true
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Unrecognized Game Type\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Blizzard.j Initialization\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDNCSoundsDawn\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"bj_useDawnDuskSounds\\"
				then: Statements [
					Call {
						name: String \\"StartSound\\"
						args: Args [
							Name \\"bj_dawnSound\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDNCSoundsDusk\\"
		statements: Statements [
			IfThenElse {
				condition: Name \\"bj_useDawnDuskSounds\\"
				then: Statements [
					Call {
						name: String \\"StartSound\\"
						args: Args [
							Name \\"bj_duskSound\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDNCSoundsDay\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"ToD\\"
				value: Call {
					name: String \\"GetTimeOfDay\\"
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: BinaryOp {
							left: Name \\"ToD\\"
							operator: String \\">=\\"
							right: Name \\"bj_TOD_DAWN\\"
						}
						operator: String \\"and\\"
						right: BinaryOp {
							left: Name \\"ToD\\"
							operator: String \\"<\\"
							right: Name \\"bj_TOD_DUSK\\"
						}
					}
					operator: String \\"and\\"
					right: UnaryOp {
						operator: String \\"not\\"
						expr: Name \\"bj_dncIsDaytime\\"
					}
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_dncIsDaytime\\"
						value: Boolean true
					}
					EmptyLine {}
					Comment \\" change ambient sounds\\"
					Call {
						name: String \\"StopSound\\"
						args: Args [
							Name \\"bj_nightAmbientSound\\"
							Boolean false
							Boolean true
						]
						statement: Boolean true
					}
					Call {
						name: String \\"StartSound\\"
						args: Args [
							Name \\"bj_dayAmbientSound\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"SetDNCSoundsNight\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"ToD\\"
				value: Call {
					name: String \\"GetTimeOfDay\\"
				}
			}
			EmptyLine {}
			IfThenElse {
				condition: BinaryOp {
					left: Parens BinaryOp {
						left: BinaryOp {
							left: Name \\"ToD\\"
							operator: String \\"<\\"
							right: Name \\"bj_TOD_DAWN\\"
						}
						operator: String \\"or\\"
						right: BinaryOp {
							left: Name \\"ToD\\"
							operator: String \\">=\\"
							right: Name \\"bj_TOD_DUSK\\"
						}
					}
					operator: String \\"and\\"
					right: Name \\"bj_dncIsDaytime\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_dncIsDaytime\\"
						value: Boolean false
					}
					EmptyLine {}
					Comment \\" change ambient sounds\\"
					Call {
						name: String \\"StopSound\\"
						args: Args [
							Name \\"bj_dayAmbientSound\\"
							Boolean false
							Boolean true
						]
						statement: Boolean true
					}
					Call {
						name: String \\"StartSound\\"
						args: Args [
							Name \\"bj_nightAmbientSound\\"
						]
						statement: Boolean true
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitDNCSounds\\"
		statements: Statements [
			Comment \\" Create sounds to be played at dawn and dusk.\\"
			JASSSet {
				name: String \\"bj_dawnSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"RoosterSound\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_duskSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"WolfSound\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			EmptyLine {}
			Comment \\" Set up triggers to respond to dawn and dusk.\\"
			JASSSet {
				name: String \\"bj_dncSoundsDawn\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterGameStateEvent\\"
				args: Args [
					Name \\"bj_dncSoundsDawn\\"
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"EQUAL\\"
					Name \\"bj_TOD_DAWN\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"bj_dncSoundsDawn\\"
					FuncRef String \\"S\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_dncSoundsDusk\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterGameStateEvent\\"
				args: Args [
					Name \\"bj_dncSoundsDusk\\"
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"EQUAL\\"
					Name \\"bj_TOD_DUSK\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"bj_dncSoundsDusk\\"
					FuncRef String \\"S\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Set up triggers to respond to changes from day to night or vice-versa.\\"
			JASSSet {
				name: String \\"bj_dncSoundsDay\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterGameStateEvent\\"
				args: Args [
					Name \\"bj_dncSoundsDay\\"
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"GREATER_THAN_OR_EQUAL\\"
					Name \\"bj_TOD_DAWN\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerRegisterGameStateEvent\\"
				args: Args [
					Name \\"bj_dncSoundsDay\\"
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"LESS_THAN\\"
					Name \\"bj_TOD_DUSK\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"bj_dncSoundsDay\\"
					FuncRef String \\"S\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_dncSoundsNight\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterGameStateEvent\\"
				args: Args [
					Name \\"bj_dncSoundsNight\\"
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"LESS_THAN\\"
					Name \\"bj_TOD_DAWN\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerRegisterGameStateEvent\\"
				args: Args [
					Name \\"bj_dncSoundsNight\\"
					Name \\"GAME_STATE_TIME_OF_DAY\\"
					Name \\"GREATER_THAN_OR_EQUAL\\"
					Name \\"bj_TOD_DUSK\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"bj_dncSoundsNight\\"
					FuncRef String \\"S\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitBlizzardGlobals\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"userControlledPlayers\\"
			}
			Variable {
				type: String \\"version\\"
				name: String \\"v\\"
			}
			EmptyLine {}
			Comment \\" Init filter function vars\\"
			JASSSet {
				name: String \\"filterIssueHauntOrderAtLocBJ\\"
				value: Call {
					name: String \\"Filter\\"
					args: Args [
						FuncRef String \\"I\\"
					]
				}
			}
			JASSSet {
				name: String \\"filterEnumDestructablesInCircleBJ\\"
				value: Call {
					name: String \\"Filter\\"
					args: Args [
						FuncRef String \\"E\\"
					]
				}
			}
			JASSSet {
				name: String \\"filterGetUnitsInRectOfPlayer\\"
				value: Call {
					name: String \\"Filter\\"
					args: Args [
						FuncRef String \\"G\\"
					]
				}
			}
			JASSSet {
				name: String \\"filterGetUnitsOfTypeIdAll\\"
				value: Call {
					name: String \\"Filter\\"
					args: Args [
						FuncRef String \\"G\\"
					]
				}
			}
			JASSSet {
				name: String \\"filterGetUnitsOfPlayerAndTypeId\\"
				value: Call {
					name: String \\"Filter\\"
					args: Args [
						FuncRef String \\"G\\"
					]
				}
			}
			JASSSet {
				name: String \\"filterMeleeTrainedUnitIsHeroBJ\\"
				value: Call {
					name: String \\"Filter\\"
					args: Args [
						FuncRef String \\"M\\"
					]
				}
			}
			JASSSet {
				name: String \\"filterLivingPlayerUnitsOfTypeId\\"
				value: Call {
					name: String \\"Filter\\"
					args: Args [
						FuncRef String \\"L\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" Init force presets\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYER_SLOTS\\"
					}
					JASSSet {
						name: String \\"bj_FORCE_PLAYER\\"
						value: Call {
							name: String \\"CreateForce\\"
						}
						prop: Name \\"index\\"
					}
					Call {
						name: String \\"ForceAddPlayer\\"
						args: Args [
							ArrayRef {
								name: String \\"bj_FORCE_PLAYER\\"
								prop: Name \\"index\\"
							}
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
						]
						statement: Boolean true
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_FORCE_ALL_PLAYERS\\"
				value: Call {
					name: String \\"CreateForce\\"
				}
			}
			Call {
				name: String \\"ForceEnumPlayers\\"
				args: Args [
					Name \\"bj_FORCE_ALL_PLAYERS\\"
					Null
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Init Cinematic Mode history\\"
			JASSSet {
				name: String \\"bj_cineModePriorSpeed\\"
				value: Call {
					name: String \\"GetGameSpeed\\"
				}
			}
			JASSSet {
				name: String \\"bj_cineModePriorFogSetting\\"
				value: Call {
					name: String \\"IsFogEnabled\\"
				}
			}
			JASSSet {
				name: String \\"bj_cineModePriorMaskSetting\\"
				value: Call {
					name: String \\"IsFogMaskEnabled\\"
				}
			}
			EmptyLine {}
			Comment \\" Init Trigger Queue\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\">=\\"
						right: Name \\"bj_MAX_QUEUED_TRIGGERS\\"
					}
					JASSSet {
						name: String \\"bj_queuedExecTriggers\\"
						prop: Name \\"index\\"
					}
					JASSSet {
						name: String \\"bj_queuedExecUseConds\\"
						value: Boolean false
						prop: Name \\"index\\"
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
				]
			}
			EmptyLine {}
			Comment \\" Init singleplayer check\\"
			JASSSet {
				name: String \\"bj_isSinglePlayer\\"
				value: Boolean false
			}
			JASSSet {
				name: String \\"userControlledPlayers\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\">=\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: BinaryOp {
								left: Call {
									name: String \\"GetPlayerController\\"
									args: Args [
										Call {
											name: String \\"Player\\"
											args: Args [
												Name \\"index\\"
											]
										}
									]
								}
								operator: String \\"==\\"
								right: Name \\"MAP_CONTROL_USER\\"
							}
							operator: String \\"and\\"
							right: BinaryOp {
								left: Call {
									name: String \\"GetPlayerSlotState\\"
									args: Args [
										Call {
											name: String \\"Player\\"
											args: Args [
												Name \\"index\\"
											]
										}
									]
								}
								operator: String \\"==\\"
								right: Name \\"PLAYER_SLOT_STATE_PLAYING\\"
							}
						}
						then: Statements [
							JASSSet {
								name: String \\"userControlledPlayers\\"
								value: BinaryOp {
									left: Name \\"userControlledPlayers\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
						]
					}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
				]
			}
			JASSSet {
				name: String \\"bj_isSinglePlayer\\"
				value: Parens BinaryOp {
					left: Name \\"userControlledPlayers\\"
					operator: String \\"==\\"
					right: Number 1
				}
			}
			EmptyLine {}
			Comment \\" Init sounds\\"
			Comment \\"set bj_pingMinimapSound = CreateSoundFromLabel(\\\\\\"AutoCastButtonClick\\\\\\", false, false, false, 10000, 10000)\\"
			JASSSet {
				name: String \\"bj_rescueSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"Rescue\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_questDiscoveredSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"QuestNew\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_questUpdatedSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"QuestUpdate\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_questCompletedSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"QuestCompleted\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_questFailedSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"QuestFailed\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_questHintSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"Hint\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_questSecretSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"SecretFound\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_questItemAcquiredSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"ItemReward\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_questWarningSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"Warning\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_victoryDialogSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"QuestCompleted\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			JASSSet {
				name: String \\"bj_defeatDialogSound\\"
				value: Call {
					name: String \\"CreateSoundFromLabel\\"
					args: Args [
						String \\"QuestFailed\\"
						Boolean false
						Boolean false
						Boolean false
						Number 10000
						Number 10000
					]
				}
			}
			EmptyLine {}
			Comment \\" Init corpse creation triggers.\\"
			Call {
				name: String \\"DelayedSuspendDecayCreate\\"
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Init version-specific data\\"
			JASSSet {
				name: String \\"v\\"
				value: Call {
					name: String \\"VersionGet\\"
				}
			}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"v\\"
					operator: String \\"==\\"
					right: Name \\"VERSION_REIGN_OF_CHAOS\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_MELEE_MAX_TWINKED_HEROES\\"
						value: Name \\"bj_MELEE_MAX_TWINKED_HEROES_V0\\"
					}
				]
				elses: Array [
					Else {
						statements: Statements [
							JASSSet {
								name: String \\"bj_MELEE_MAX_TWINKED_HEROES\\"
								value: Name \\"bj_MELEE_MAX_TWINKED_HEROES_V1\\"
							}
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitQueuedTriggers\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_queuedExecTimeout\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterTimerExpireEvent\\"
				args: Args [
					Name \\"bj_queuedExecTimeout\\"
					Name \\"bj_queuedExecTimeoutTimer\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"bj_queuedExecTimeout\\"
					FuncRef String \\"Q\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitMapRects\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_mapInitialPlayableArea\\"
				value: Call {
					name: String \\"Rect\\"
					args: Args [
						BinaryOp {
							left: Call {
								name: String \\"GetCameraBoundMinX\\"
							}
							operator: String \\"-\\"
							right: Call {
								name: String \\"GetCameraMargin\\"
								args: Args [
									Name \\"CAMERA_MARGIN_LEFT\\"
								]
							}
						}
						BinaryOp {
							left: Call {
								name: String \\"GetCameraBoundMinY\\"
							}
							operator: String \\"-\\"
							right: Call {
								name: String \\"GetCameraMargin\\"
								args: Args [
									Name \\"CAMERA_MARGIN_BOTTOM\\"
								]
							}
						}
						BinaryOp {
							left: Call {
								name: String \\"GetCameraBoundMaxX\\"
							}
							operator: String \\"+\\"
							right: Call {
								name: String \\"GetCameraMargin\\"
								args: Args [
									Name \\"CAMERA_MARGIN_RIGHT\\"
								]
							}
						}
						BinaryOp {
							left: Call {
								name: String \\"GetCameraBoundMaxY\\"
							}
							operator: String \\"+\\"
							right: Call {
								name: String \\"GetCameraMargin\\"
								args: Args [
									Name \\"CAMERA_MARGIN_TOP\\"
								]
							}
						}
					]
				}
			}
			JASSSet {
				name: String \\"bj_mapInitialCameraBounds\\"
				value: Call {
					name: String \\"GetCurrentCameraBoundsMapRectBJ\\"
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitSummonableCaps\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					Comment \\" upgraded units\\"
					Comment \\" Note: Only do this if the corresponding upgrade is not yet researched\\"
					Comment \\" Barrage - Siege Engines\\"
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"GetPlayerTechResearched\\"
								args: Args [
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"index\\"
										]
									}
									FourCC \\"Rhrt\\"
									Boolean true
								]
							}
						}
						then: Statements [
							Call {
								name: String \\"SetPlayerTechMaxAllowed\\"
								args: Args [
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"index\\"
										]
									}
									FourCC \\"hrtt\\"
									Number 0
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					Comment \\" Berserker Upgrade - Troll Berserkers\\"
					IfThenElse {
						condition: Parens UnaryOp {
							operator: String \\"not\\"
							expr: Call {
								name: String \\"GetPlayerTechResearched\\"
								args: Args [
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"index\\"
										]
									}
									FourCC \\"Robk\\"
									Boolean true
								]
							}
						}
						then: Statements [
							Call {
								name: String \\"SetPlayerTechMaxAllowed\\"
								args: Args [
									Call {
										name: String \\"Player\\"
										args: Args [
											Name \\"index\\"
										]
									}
									FourCC \\"otbk\\"
									Number 0
								]
								statement: Boolean true
							}
						]
					}
					EmptyLine {}
					Comment \\" max skeletons per player\\"
					Call {
						name: String \\"SetPlayerTechMaxAllowed\\"
						args: Args [
							Call {
								name: String \\"Player\\"
								args: Args [
									Name \\"index\\"
								]
							}
							FourCC \\"uske\\"
							Name \\"bj_MAX_SKELETONS\\"
						]
						statement: Boolean true
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_MAX_PLAYERS\\"
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Update the per-class stock limits.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"UpdateStockAvailability\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"itemtype\\"
				name: String \\"iType\\"
				value: Call {
					name: String \\"GetItemType\\"
					args: Args [
						Name \\"whichItem\\"
					]
				}
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"iLevel\\"
				value: Call {
					name: String \\"GetItemLevel\\"
					args: Args [
						Name \\"whichItem\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" Update allowed type/level combinations.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"iType\\"
					operator: String \\"==\\"
					right: Name \\"ITEM_TYPE_PERMANENT\\"
				}
				then: Statements [
					JASSSet {
						name: String \\"bj_stockAllowedPermanent\\"
						value: Boolean true
						prop: Name \\"iLevel\\"
					}
				]
				elses: Array [
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"iType\\"
							operator: String \\"==\\"
							right: Name \\"ITEM_TYPE_CHARGED\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"bj_stockAllowedCharged\\"
								value: Boolean true
								prop: Name \\"iLevel\\"
							}
						]
					}
					ElseIf {
						condition: Parens BinaryOp {
							left: Name \\"iType\\"
							operator: String \\"==\\"
							right: Name \\"ITEM_TYPE_ARTIFACT\\"
						}
						statements: Statements [
							JASSSet {
								name: String \\"bj_stockAllowedArtifact\\"
								value: Boolean true
								prop: Name \\"iLevel\\"
							}
						]
					}
					Else {
						statements: Statements [
							Comment \\" Not interested in this item type - ignore the item.\\"
						]
					}
				]
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Find a sellable item of the given type and level, and then add it.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"UpdateEachStockBuildingEnum\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"iteration\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"pickedItemId\\"
			}
			EmptyLine {}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"pickedItemId\\"
						value: Call {
							name: String \\"ChooseRandomItemEx\\"
							args: Args [
								Name \\"bj_stockPickedItemType\\"
								Name \\"bj_stockPickedItemLevel\\"
							]
						}
					}
					ExitWhen Call {
						name: String \\"IsItemIdSellable\\"
						args: Args [
							Name \\"pickedItemId\\"
						]
					}
					EmptyLine {}
					Comment \\" If we get hung up on an entire class/level combo of unsellable\\"
					Comment \\" items, or a very unlucky series of random numbers, give up.\\"
					JASSSet {
						name: String \\"iteration\\"
						value: BinaryOp {
							left: Name \\"iteration\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"iteration\\"
							operator: String \\">\\"
							right: Name \\"bj_STOCK_MAX_ITERATIONS\\"
						}
						then: Statements [
							Return __undefined__
						]
					}
				]
			}
			Call {
				name: String \\"AddItemToStock\\"
				args: Args [
					Call {
						name: String \\"GetEnumUnit\\"
					}
					Name \\"pickedItemId\\"
					Number 1
					Number 1
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"UpdateEachStockBuilding\\"
		params: Params [
			Param {
				type: String \\"itemtype\\"
				name: String \\"iType\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"iLevel\\"
			}
		]
		statements: Statements [
			Variable {
				type: String \\"group\\"
				name: String \\"g\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"bj_stockPickedItemType\\"
				value: Name \\"iType\\"
			}
			JASSSet {
				name: String \\"bj_stockPickedItemLevel\\"
				value: Name \\"iLevel\\"
			}
			EmptyLine {}
			JASSSet {
				name: String \\"g\\"
				value: Call {
					name: String \\"CreateGroup\\"
				}
			}
			Call {
				name: String \\"GroupEnumUnitsOfType\\"
				args: Args [
					Name \\"g\\"
					String \\"marketplace\\"
					Null
				]
				statement: Boolean true
			}
			Call {
				name: String \\"ForGroup\\"
				args: Args [
					Name \\"g\\"
					FuncRef String \\"U\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"DestroyGroup\\"
				args: Args [
					Name \\"g\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Update stock inventory.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"PerformStockUpdates\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"pickedItemId\\"
			}
			Variable {
				type: String \\"itemtype\\"
				name: String \\"pickedItemType\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"pickedItemLevel\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"allowedCombinations\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"iLevel\\"
			}
			EmptyLine {}
			Comment \\" Give each type/level combination a chance of being picked.\\"
			JASSSet {
				name: String \\"iLevel\\"
				value: Number 1
			}
			Loop {
				statements: Statements [
					IfThenElse {
						condition: Parens ArrayRef {
							name: String \\"bj_stockAllowedPermanent\\"
							prop: Name \\"iLevel\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"allowedCombinations\\"
								value: BinaryOp {
									left: Name \\"allowedCombinations\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetRandomInt\\"
										args: Args [
											Number 1
											Name \\"allowedCombinations\\"
										]
									}
									operator: String \\"==\\"
									right: Number 1
								}
								then: Statements [
									JASSSet {
										name: String \\"pickedItemType\\"
										value: Name \\"ITEM_TYPE_PERMANENT\\"
									}
									JASSSet {
										name: String \\"pickedItemLevel\\"
										value: Name \\"iLevel\\"
									}
								]
							}
						]
					}
					IfThenElse {
						condition: Parens ArrayRef {
							name: String \\"bj_stockAllowedCharged\\"
							prop: Name \\"iLevel\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"allowedCombinations\\"
								value: BinaryOp {
									left: Name \\"allowedCombinations\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetRandomInt\\"
										args: Args [
											Number 1
											Name \\"allowedCombinations\\"
										]
									}
									operator: String \\"==\\"
									right: Number 1
								}
								then: Statements [
									JASSSet {
										name: String \\"pickedItemType\\"
										value: Name \\"ITEM_TYPE_CHARGED\\"
									}
									JASSSet {
										name: String \\"pickedItemLevel\\"
										value: Name \\"iLevel\\"
									}
								]
							}
						]
					}
					IfThenElse {
						condition: Parens ArrayRef {
							name: String \\"bj_stockAllowedArtifact\\"
							prop: Name \\"iLevel\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"allowedCombinations\\"
								value: BinaryOp {
									left: Name \\"allowedCombinations\\"
									operator: String \\"+\\"
									right: Number 1
								}
							}
							IfThenElse {
								condition: Parens BinaryOp {
									left: Call {
										name: String \\"GetRandomInt\\"
										args: Args [
											Number 1
											Name \\"allowedCombinations\\"
										]
									}
									operator: String \\"==\\"
									right: Number 1
								}
								then: Statements [
									JASSSet {
										name: String \\"pickedItemType\\"
										value: Name \\"ITEM_TYPE_ARTIFACT\\"
									}
									JASSSet {
										name: String \\"pickedItemLevel\\"
										value: Name \\"iLevel\\"
									}
								]
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"iLevel\\"
						value: BinaryOp {
							left: Name \\"iLevel\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"iLevel\\"
						operator: String \\">\\"
						right: Name \\"bj_MAX_ITEM_LEVEL\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Make sure we found a valid item type to add.\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"allowedCombinations\\"
					operator: String \\"==\\"
					right: Number 0
				}
				then: Statements [
					Return __undefined__
				]
			}
			EmptyLine {}
			Call {
				name: String \\"UpdateEachStockBuilding\\"
				args: Args [
					Name \\"pickedItemType\\"
					Name \\"pickedItemLevel\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	Comment \\" Perform the first update, and then arrange future updates.\\"
	Comment \\"\\"
	JASSFunction {
		name: String \\"StartStockUpdates\\"
		statements: Statements [
			Call {
				name: String \\"PerformStockUpdates\\"
				statement: Boolean true
			}
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Name \\"bj_stockUpdateTimer\\"
					Name \\"bj_STOCK_RESTOCK_INTERVAL\\"
					Boolean true
					FuncRef String \\"P\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RemovePurchasedItem\\"
		statements: Statements [
			Call {
				name: String \\"RemoveItemFromStock\\"
				args: Args [
					Call {
						name: String \\"GetSellingUnit\\"
					}
					Call {
						name: String \\"GetItemTypeId\\"
						args: Args [
							Call {
								name: String \\"GetSoldItem\\"
							}
						]
					}
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitNeutralBuildings\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"iLevel\\"
			}
			EmptyLine {}
			Comment \\" Chart of allowed stock items.\\"
			JASSSet {
				name: String \\"iLevel\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"bj_stockAllowedPermanent\\"
						value: Boolean false
						prop: Name \\"iLevel\\"
					}
					JASSSet {
						name: String \\"bj_stockAllowedCharged\\"
						value: Boolean false
						prop: Name \\"iLevel\\"
					}
					JASSSet {
						name: String \\"bj_stockAllowedArtifact\\"
						value: Boolean false
						prop: Name \\"iLevel\\"
					}
					JASSSet {
						name: String \\"iLevel\\"
						value: BinaryOp {
							left: Name \\"iLevel\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"iLevel\\"
						operator: String \\">\\"
						right: Name \\"bj_MAX_ITEM_LEVEL\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Limit stock inventory slots.\\"
			Call {
				name: String \\"SetAllItemTypeSlots\\"
				args: Args [
					Name \\"bj_MAX_STOCK_ITEM_SLOTS\\"
				]
				statement: Boolean true
			}
			Call {
				name: String \\"SetAllUnitTypeSlots\\"
				args: Args [
					Name \\"bj_MAX_STOCK_UNIT_SLOTS\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Arrange the first update.\\"
			JASSSet {
				name: String \\"bj_stockUpdateTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Name \\"bj_stockUpdateTimer\\"
					Name \\"bj_STOCK_RESTOCK_INITIAL_DELAY\\"
					Boolean false
					FuncRef String \\"S\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Comment \\" Set up a trigger to fire whenever an item is sold.\\"
			JASSSet {
				name: String \\"bj_stockItemPurchased\\"
				value: Call {
					name: String \\"CreateTrigger\\"
				}
			}
			Call {
				name: String \\"TriggerRegisterPlayerUnitEvent\\"
				args: Args [
					Name \\"bj_stockItemPurchased\\"
					Call {
						name: String \\"Player\\"
						args: Args [
							Name \\"PLAYER_NEUTRAL_PASSIVE\\"
						]
					}
					Name \\"EVENT_PLAYER_UNIT_SELL_ITEM\\"
					Null
				]
				statement: Boolean true
			}
			Call {
				name: String \\"TriggerAddAction\\"
				args: Args [
					Name \\"bj_stockItemPurchased\\"
					FuncRef String \\"R\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"MarkGameStarted\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_gameStarted\\"
				value: Boolean true
			}
			Call {
				name: String \\"DestroyTimer\\"
				args: Args [
					Name \\"bj_gameStartedTimer\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"DetectGameStarted\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_gameStartedTimer\\"
				value: Call {
					name: String \\"CreateTimer\\"
				}
			}
			Call {
				name: String \\"TimerStart\\"
				args: Args [
					Name \\"bj_gameStartedTimer\\"
					Name \\"bj_GAME_STARTED_THRESHOLD\\"
					Boolean false
					FuncRef String \\"M\\"
				]
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"InitBlizzard\\"
		statements: Statements [
			Comment \\" Set up the Neutral Victim player slot, to torture the abandoned units\\"
			Comment \\" of defeated players.  Since some triggers expect this player slot to\\"
			Comment \\" exist, this is performed for all maps.\\"
			Call {
				name: String \\"ConfigureNeutralVictim\\"
				statement: Boolean true
			}
			EmptyLine {}
			Call {
				name: String \\"InitBlizzardGlobals\\"
				statement: Boolean true
			}
			Call {
				name: String \\"InitQueuedTriggers\\"
				statement: Boolean true
			}
			Call {
				name: String \\"InitRescuableBehaviorBJ\\"
				statement: Boolean true
			}
			Call {
				name: String \\"InitDNCSounds\\"
				statement: Boolean true
			}
			Call {
				name: String \\"InitMapRects\\"
				statement: Boolean true
			}
			Call {
				name: String \\"InitSummonableCaps\\"
				statement: Boolean true
			}
			Call {
				name: String \\"InitNeutralBuildings\\"
				statement: Boolean true
			}
			Call {
				name: String \\"DetectGameStarted\\"
				statement: Boolean true
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Random distribution\\"
	Comment \\"*\\"
	Comment \\"*  Used to select a random object from a given distribution of chances\\"
	Comment \\"*\\"
	Comment \\"*  - RandomDistReset clears the distribution list\\"
	Comment \\"*\\"
	Comment \\"*  - RandomDistAddItem adds a new object to the distribution list\\"
	Comment \\"*    with a given identifier and an integer chance to be chosen\\"
	Comment \\"*\\"
	Comment \\"*  - RandomDistChoose will use the current distribution list to choose\\"
	Comment \\"*    one of the objects randomly based on the chance distribution\\"
	Comment \\"*  \\"
	Comment \\"*  Note that the chances are effectively normalized by their sum,\\"
	Comment \\"*  so only the relative values of each chance are important\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RandomDistReset\\"
		statements: Statements [
			JASSSet {
				name: String \\"bj_randDistCount\\"
				value: Number 0
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RandomDistAddItem\\"
		params: Params [
			Param {
				type: String \\"integer\\"
				name: String \\"inID\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"inChance\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_randDistID\\"
				value: Name \\"inID\\"
				prop: Name \\"bj_randDistCount\\"
			}
			JASSSet {
				name: String \\"bj_randDistChance\\"
				value: Name \\"inChance\\"
				prop: Name \\"bj_randDistCount\\"
			}
			JASSSet {
				name: String \\"bj_randDistCount\\"
				value: BinaryOp {
					left: Name \\"bj_randDistCount\\"
					operator: String \\"+\\"
					right: Number 1
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"RandomDistChoose\\"
		returns: String \\"integer\\"
		statements: Statements [
			Variable {
				type: String \\"integer\\"
				name: String \\"sum\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"chance\\"
				value: Number 0
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Variable {
				type: String \\"integer\\"
				name: String \\"foundID\\"
				value: UnaryOp {
					operator: String \\"-\\"
					expr: Number 1
				}
			}
			Variable {
				type: String \\"boolean\\"
				name: String \\"done\\"
			}
			EmptyLine {}
			Comment \\" No items?\\"
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"bj_randDistCount\\"
					operator: String \\"==\\"
					right: Number 0
				}
				then: Statements [
					Return UnaryOp {
						operator: String \\"-\\"
						expr: Number 1
					}
				]
			}
			EmptyLine {}
			Comment \\" Find sum of all chances\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"sum\\"
						value: BinaryOp {
							left: Name \\"sum\\"
							operator: String \\"+\\"
							right: ArrayRef {
								name: String \\"bj_randDistChance\\"
								prop: Name \\"index\\"
							}
						}
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					ExitWhen BinaryOp {
						left: Name \\"index\\"
						operator: String \\"==\\"
						right: Name \\"bj_randDistCount\\"
					}
				]
			}
			EmptyLine {}
			Comment \\" Choose random number within the total range\\"
			JASSSet {
				name: String \\"chance\\"
				value: Call {
					name: String \\"GetRandomInt\\"
					args: Args [
						Number 1
						Name \\"sum\\"
					]
				}
			}
			EmptyLine {}
			Comment \\" Find ID which corresponds to this chance\\"
			JASSSet {
				name: String \\"index\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"sum\\"
				value: Number 0
			}
			JASSSet {
				name: String \\"done\\"
				value: Boolean false
			}
			Loop {
				statements: Statements [
					JASSSet {
						name: String \\"sum\\"
						value: BinaryOp {
							left: Name \\"sum\\"
							operator: String \\"+\\"
							right: ArrayRef {
								name: String \\"bj_randDistChance\\"
								prop: Name \\"index\\"
							}
						}
					}
					EmptyLine {}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"chance\\"
							operator: String \\"<=\\"
							right: Name \\"sum\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"foundID\\"
								value: ArrayRef {
									name: String \\"bj_randDistID\\"
									prop: Name \\"index\\"
								}
							}
							JASSSet {
								name: String \\"done\\"
								value: Boolean true
							}
						]
					}
					EmptyLine {}
					JASSSet {
						name: String \\"index\\"
						value: BinaryOp {
							left: Name \\"index\\"
							operator: String \\"+\\"
							right: Number 1
						}
					}
					IfThenElse {
						condition: Parens BinaryOp {
							left: Name \\"index\\"
							operator: String \\"==\\"
							right: Name \\"bj_randDistCount\\"
						}
						then: Statements [
							JASSSet {
								name: String \\"done\\"
								value: Boolean true
							}
						]
					}
					EmptyLine {}
					ExitWhen BinaryOp {
						left: Name \\"done\\"
						operator: String \\"==\\"
						right: Boolean true
					}
				]
			}
			EmptyLine {}
			Return Name \\"foundID\\"
		]
	}
	EmptyLine {}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Drop item\\"
	Comment \\"*\\"
	Comment \\"*  Makes the given unit drop the given item\\"
	Comment \\"*\\"
	Comment \\"*  Note: This could potentially cause problems if the unit is standing\\"
	Comment \\"*        right on the edge of an unpathable area and happens to drop the\\"
	Comment \\"*        item into the unpathable area where nobody can get it...\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	JASSFunction {
		name: String \\"UnitDropItem\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"inUnit\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"inItemID\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"radius\\"
				value: Number 32
			}
			Variable {
				type: String \\"real\\"
				name: String \\"unitX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"unitY\\"
			}
			Variable {
				type: String \\"item\\"
				name: String \\"droppedItem\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"inItemID\\"
					operator: String \\"==\\"
					right: UnaryOp {
						operator: String \\"-\\"
						expr: Number 1
					}
				}
				then: Statements [
					Return Null
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"unitX\\"
				value: Call {
					name: String \\"GetUnitX\\"
					args: Args [
						Name \\"inUnit\\"
					]
				}
			}
			JASSSet {
				name: String \\"unitY\\"
				value: Call {
					name: String \\"GetUnitY\\"
					args: Args [
						Name \\"inUnit\\"
					]
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"x\\"
				value: Call {
					name: String \\"GetRandomReal\\"
					args: Args [
						BinaryOp {
							left: Name \\"unitX\\"
							operator: String \\"-\\"
							right: Name \\"radius\\"
						}
						BinaryOp {
							left: Name \\"unitX\\"
							operator: String \\"+\\"
							right: Name \\"radius\\"
						}
					]
				}
			}
			JASSSet {
				name: String \\"y\\"
				value: Call {
					name: String \\"GetRandomReal\\"
					args: Args [
						BinaryOp {
							left: Name \\"unitY\\"
							operator: String \\"-\\"
							right: Name \\"radius\\"
						}
						BinaryOp {
							left: Name \\"unitY\\"
							operator: String \\"+\\"
							right: Name \\"radius\\"
						}
					]
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"droppedItem\\"
				value: Call {
					name: String \\"CreateItem\\"
					args: Args [
						Name \\"inItemID\\"
						Name \\"x\\"
						Name \\"y\\"
					]
				}
			}
			EmptyLine {}
			Call {
				name: String \\"SetItemDropID\\"
				args: Args [
					Name \\"droppedItem\\"
					Call {
						name: String \\"GetUnitTypeId\\"
						args: Args [
							Name \\"inUnit\\"
						]
					}
				]
				statement: Boolean true
			}
			Call {
				name: String \\"UpdateStockAvailability\\"
				args: Args [
					Name \\"droppedItem\\"
				]
				statement: Boolean true
			}
			EmptyLine {}
			Return Name \\"droppedItem\\"
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"WidgetDropItem\\"
		params: Params [
			Param {
				type: String \\"widget\\"
				name: String \\"inWidget\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"inItemID\\"
			}
		]
		returns: String \\"item\\"
		statements: Statements [
			Variable {
				type: String \\"real\\"
				name: String \\"x\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"y\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"radius\\"
				value: Number 32
			}
			Variable {
				type: String \\"real\\"
				name: String \\"widgetX\\"
			}
			Variable {
				type: String \\"real\\"
				name: String \\"widgetY\\"
			}
			EmptyLine {}
			IfThenElse {
				condition: Parens BinaryOp {
					left: Name \\"inItemID\\"
					operator: String \\"==\\"
					right: UnaryOp {
						operator: String \\"-\\"
						expr: Number 1
					}
				}
				then: Statements [
					Return Null
				]
			}
			EmptyLine {}
			JASSSet {
				name: String \\"widgetX\\"
				value: Call {
					name: String \\"GetWidgetX\\"
					args: Args [
						Name \\"inWidget\\"
					]
				}
			}
			JASSSet {
				name: String \\"widgetY\\"
				value: Call {
					name: String \\"GetWidgetY\\"
					args: Args [
						Name \\"inWidget\\"
					]
				}
			}
			EmptyLine {}
			JASSSet {
				name: String \\"x\\"
				value: Call {
					name: String \\"GetRandomReal\\"
					args: Args [
						BinaryOp {
							left: Name \\"widgetX\\"
							operator: String \\"-\\"
							right: Name \\"radius\\"
						}
						BinaryOp {
							left: Name \\"widgetX\\"
							operator: String \\"+\\"
							right: Name \\"radius\\"
						}
					]
				}
			}
			JASSSet {
				name: String \\"y\\"
				value: Call {
					name: String \\"GetRandomReal\\"
					args: Args [
						BinaryOp {
							left: Name \\"widgetY\\"
							operator: String \\"-\\"
							right: Name \\"radius\\"
						}
						BinaryOp {
							left: Name \\"widgetY\\"
							operator: String \\"+\\"
							right: Name \\"radius\\"
						}
					]
				}
			}
			EmptyLine {}
			Return Call {
				name: String \\"CreateItem\\"
				args: Args [
					Name \\"inItemID\\"
					Name \\"x\\"
					Name \\"y\\"
				]
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\"***************************************************************************\\"
	Comment \\"*\\"
	Comment \\"*  Instanced Object Operation Functions\\"
	Comment \\"*\\"
	Comment \\"*  Get/Set specific fields for single unit/item/ability instance\\"
	Comment \\"*\\"
	Comment \\"***************************************************************************\\"
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzIsLastInstanceObjectFunctionSuccessful\\"
		returns: String \\"boolean\\"
		statements: Statements [
			Return Name \\"bj_lastInstObjFuncSuccessful\\"
		]
	}
	EmptyLine {}
	Comment \\" Ability\\"
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityBooleanFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitybooleanfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityBooleanField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityIntegerFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityintegerfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityIntegerField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityRealFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityrealfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityRealField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityStringFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitystringfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityStringField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityBooleanLevelFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitybooleanlevelfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityBooleanLevelField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityIntegerLevelFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityintegerlevelfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityIntegerLevelField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityRealLevelFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityreallevelfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityRealLevelField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityStringLevelFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitystringlevelfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityStringLevelField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityBooleanLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitybooleanlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityBooleanLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"index\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityIntegerLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityintegerlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityIntegerLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"index\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityRealLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityreallevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityRealLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"index\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetAbilityStringLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitystringlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetAbilityStringLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"index\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzAddAbilityBooleanLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitybooleanlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzAddAbilityBooleanLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzAddAbilityIntegerLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityintegerlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzAddAbilityIntegerLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzAddAbilityRealLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityreallevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzAddAbilityRealLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzAddAbilityStringLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitystringlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzAddAbilityStringLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzRemoveAbilityBooleanLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitybooleanlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzRemoveAbilityBooleanLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzRemoveAbilityIntegerLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityintegerlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzRemoveAbilityIntegerLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzRemoveAbilityRealLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilityreallevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzRemoveAbilityRealLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzRemoveAbilityStringLevelArrayFieldBJ\\"
		params: Params [
			Param {
				type: String \\"ability\\"
				name: String \\"whichAbility\\"
			}
			Param {
				type: String \\"abilitystringlevelarrayfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"level\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzRemoveAbilityStringLevelArrayField\\"
					args: Args [
						Name \\"whichAbility\\"
						Name \\"whichField\\"
						Name \\"level\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\" Item \\"
	Comment \\"=============================================================\\"
	JASSFunction {
		name: String \\"BlzItemAddAbilityBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"abilCode\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzItemAddAbility\\"
					args: Args [
						Name \\"whichItem\\"
						Name \\"abilCode\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzItemRemoveAbilityBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"abilCode\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzItemRemoveAbility\\"
					args: Args [
						Name \\"whichItem\\"
						Name \\"abilCode\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetItemBooleanFieldBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"itembooleanfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetItemBooleanField\\"
					args: Args [
						Name \\"whichItem\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetItemIntegerFieldBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"itemintegerfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetItemIntegerField\\"
					args: Args [
						Name \\"whichItem\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetItemRealFieldBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"itemrealfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetItemRealField\\"
					args: Args [
						Name \\"whichItem\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetItemStringFieldBJ\\"
		params: Params [
			Param {
				type: String \\"item\\"
				name: String \\"whichItem\\"
			}
			Param {
				type: String \\"itemstringfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetItemStringField\\"
					args: Args [
						Name \\"whichItem\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	EmptyLine {}
	Comment \\" Unit \\"
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetUnitBooleanFieldBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitbooleanfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetUnitBooleanField\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetUnitIntegerFieldBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitintegerfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetUnitIntegerField\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetUnitRealFieldBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitrealfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetUnitRealField\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetUnitStringFieldBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitstringfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetUnitStringField\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichField\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\" Unit Weapon\\"
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetUnitWeaponBooleanFieldBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitweaponbooleanfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Param {
				type: String \\"boolean\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetUnitWeaponBooleanField\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichField\\"
						Name \\"index\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetUnitWeaponIntegerFieldBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitweaponintegerfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetUnitWeaponIntegerField\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichField\\"
						Name \\"index\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetUnitWeaponRealFieldBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitweaponrealfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Param {
				type: String \\"real\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetUnitWeaponRealField\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichField\\"
						Name \\"index\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
	EmptyLine {}
	Comment \\"===========================================================================\\"
	JASSFunction {
		name: String \\"BlzSetUnitWeaponStringFieldBJ\\"
		params: Params [
			Param {
				type: String \\"unit\\"
				name: String \\"whichUnit\\"
			}
			Param {
				type: String \\"unitweaponstringfield\\"
				name: String \\"whichField\\"
			}
			Param {
				type: String \\"integer\\"
				name: String \\"index\\"
			}
			Param {
				type: String \\"string\\"
				name: String \\"value\\"
			}
		]
		statements: Statements [
			JASSSet {
				name: String \\"bj_lastInstObjFuncSuccessful\\"
				value: Call {
					name: String \\"BlzSetUnitWeaponStringField\\"
					args: Args [
						Name \\"whichUnit\\"
						Name \\"whichField\\"
						Name \\"index\\"
						Name \\"value\\"
					]
				}
			}
		]
	}
]"
`;
