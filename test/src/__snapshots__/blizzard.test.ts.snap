// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`smoke Blizzard.j 1`] = `
Program {
  "body": Array [
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Blizzard.j ( define Jass2 functions that need to be in every map script )",
    },
    Comment {
      "value": "===========================================================================",
    },
    EmptyLine {},
    EmptyLine {},
    Globals {
      "globals": Statements {
        "body": Array [
          Comment {
            "value": "-----------------------------------------------------------------------",
          },
          Comment {
            "value": " Constants",
          },
          Comment {
            "value": "",
          },
          EmptyLine {},
          Comment {
            "value": " Misc constants",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_PI",
            },
            "type": "real",
            "value": 3.14159,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_E",
            },
            "type": "real",
            "value": 2.71828,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CELLWIDTH",
            },
            "type": "real",
            "value": 128,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CLIFFHEIGHT",
            },
            "type": "real",
            "value": 128,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_UNIT_FACING",
            },
            "type": "real",
            "value": 270,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_RADTODEG",
            },
            "type": "real",
            "value": BinaryOp {
              "left": 180,
              "operator": "/",
              "right": Name {
                "value": "bj_PI",
              },
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_DEGTORAD",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Name {
                "value": "bj_PI",
              },
              "operator": "/",
              "right": 180,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_QUEST",
            },
            "type": "real",
            "value": 20,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_QUESTUPDATE",
            },
            "type": "real",
            "value": 20,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_QUESTDONE",
            },
            "type": "real",
            "value": 20,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_QUESTFAILED",
            },
            "type": "real",
            "value": 20,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_QUESTREQUIREMENT",
            },
            "type": "real",
            "value": 20,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_MISSIONFAILED",
            },
            "type": "real",
            "value": 20,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_ALWAYSHINT",
            },
            "type": "real",
            "value": 12,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_HINT",
            },
            "type": "real",
            "value": 12,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_SECRET",
            },
            "type": "real",
            "value": 10,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_UNITACQUIRED",
            },
            "type": "real",
            "value": 15,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_UNITAVAILABLE",
            },
            "type": "real",
            "value": 10,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_ITEMACQUIRED",
            },
            "type": "real",
            "value": 10,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TEXT_DELAY_WARNING",
            },
            "type": "real",
            "value": 12,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUEUE_DELAY_QUEST",
            },
            "type": "real",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUEUE_DELAY_HINT",
            },
            "type": "real",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUEUE_DELAY_SECRET",
            },
            "type": "real",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HANDICAP_EASY",
            },
            "type": "real",
            "value": 60,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HANDICAP_NORMAL",
            },
            "type": "real",
            "value": 90,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HANDICAPDAMAGE_EASY",
            },
            "type": "real",
            "value": 50,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HANDICAPDAMAGE_NORMAL",
            },
            "type": "real",
            "value": 90,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HANDICAPREVIVE_NOTHARD",
            },
            "type": "real",
            "value": 50,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GAME_STARTED_THRESHOLD",
            },
            "type": "real",
            "value": 0.01,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_WAIT_FOR_COND_MIN_INTERVAL",
            },
            "type": "real",
            "value": 0.1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_POLLED_WAIT_INTERVAL",
            },
            "type": "real",
            "value": 0.1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_POLLED_WAIT_SKIP_THRESHOLD",
            },
            "type": "real",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Game constants",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_INVENTORY",
            },
            "type": "integer",
            "value": 6,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_PLAYERS",
            },
            "type": "integer",
            "value": Call {
              "name": Name {
                "value": "GetBJMaxPlayers",
              },
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_PLAYER_NEUTRAL_VICTIM",
            },
            "type": "integer",
            "value": Call {
              "name": Name {
                "value": "GetBJPlayerNeutralVictim",
              },
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_PLAYER_NEUTRAL_EXTRA",
            },
            "type": "integer",
            "value": Call {
              "name": Name {
                "value": "GetBJPlayerNeutralExtra",
              },
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_PLAYER_SLOTS",
            },
            "type": "integer",
            "value": Call {
              "name": Name {
                "value": "GetBJMaxPlayerSlots",
              },
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_SKELETONS",
            },
            "type": "integer",
            "value": 25,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_STOCK_ITEM_SLOTS",
            },
            "type": "integer",
            "value": 11,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_STOCK_UNIT_SLOTS",
            },
            "type": "integer",
            "value": 11,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_ITEM_LEVEL",
            },
            "type": "integer",
            "value": 10,
          },
          EmptyLine {},
          Comment {
            "value": " Auto Save constants",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_CHECKPOINTS",
            },
            "type": "integer",
            "value": 5,
          },
          EmptyLine {},
          Comment {
            "value": " Ideally these would be looked up from Units/MiscData.txt,",
          },
          Comment {
            "value": " but there is currently no script functionality exposed to do that",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TOD_DAWN",
            },
            "type": "real",
            "value": 6,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TOD_DUSK",
            },
            "type": "real",
            "value": 18,
          },
          EmptyLine {},
          Comment {
            "value": " Melee game settings:",
          },
          Comment {
            "value": "   - Starting Time of Day (TOD)",
          },
          Comment {
            "value": "   - Starting Gold",
          },
          Comment {
            "value": "   - Starting Lumber",
          },
          Comment {
            "value": "   - Starting Hero Tokens (free heroes)",
          },
          Comment {
            "value": "   - Max heroes allowed per player",
          },
          Comment {
            "value": "   - Max heroes allowed per hero type",
          },
          Comment {
            "value": "   - Distance from start loc to search for nearby mines",
          },
          Comment {
            "value": "",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_STARTING_TOD",
            },
            "type": "real",
            "value": 8,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_STARTING_GOLD_V0",
            },
            "type": "integer",
            "value": 750,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_STARTING_GOLD_V1",
            },
            "type": "integer",
            "value": 500,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_STARTING_LUMBER_V0",
            },
            "type": "integer",
            "value": 200,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_STARTING_LUMBER_V1",
            },
            "type": "integer",
            "value": 150,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_STARTING_HERO_TOKENS",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_HERO_LIMIT",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_HERO_TYPE_LIMIT",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_MINE_SEARCH_RADIUS",
            },
            "type": "real",
            "value": 2000,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_CLEAR_UNITS_RADIUS",
            },
            "type": "real",
            "value": 1500,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_CRIPPLE_TIMEOUT",
            },
            "type": "real",
            "value": 120,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_CRIPPLE_MSG_DURATION",
            },
            "type": "real",
            "value": 20,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_MAX_TWINKED_HEROES_V0",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MELEE_MAX_TWINKED_HEROES_V1",
            },
            "type": "integer",
            "value": 1,
          },
          EmptyLine {},
          Comment {
            "value": " Delay between a creep's death and the time it may drop an item.",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CREEP_ITEM_DELAY",
            },
            "type": "real",
            "value": 0.5,
          },
          EmptyLine {},
          Comment {
            "value": " Timing settings for Marketplace inventories.",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_STOCK_RESTOCK_INITIAL_DELAY",
            },
            "type": "real",
            "value": 120,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_STOCK_RESTOCK_INTERVAL",
            },
            "type": "real",
            "value": 30,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_STOCK_MAX_ITERATIONS",
            },
            "type": "integer",
            "value": 20,
          },
          EmptyLine {},
          Comment {
            "value": " Max events registered by a single \\"dest dies in region\\" event.",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_DEST_IN_REGION_EVENTS",
            },
            "type": "integer",
            "value": 64,
          },
          EmptyLine {},
          Comment {
            "value": " Camera settings",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERA_MIN_FARZ",
            },
            "type": "integer",
            "value": 100,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERA_DEFAULT_DISTANCE",
            },
            "type": "integer",
            "value": 1650,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERA_DEFAULT_FARZ",
            },
            "type": "integer",
            "value": 5000,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERA_DEFAULT_AOA",
            },
            "type": "integer",
            "value": 304,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERA_DEFAULT_FOV",
            },
            "type": "integer",
            "value": 70,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERA_DEFAULT_ROLL",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERA_DEFAULT_ROTATION",
            },
            "type": "integer",
            "value": 90,
          },
          EmptyLine {},
          Comment {
            "value": " Rescue",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_RESCUE_PING_TIME",
            },
            "type": "real",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Transmission behavior settings",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_NOTHING_SOUND_DURATION",
            },
            "type": "real",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TRANSMISSION_PING_TIME",
            },
            "type": "real",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TRANSMISSION_IND_RED",
            },
            "type": "integer",
            "value": 255,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TRANSMISSION_IND_BLUE",
            },
            "type": "integer",
            "value": 255,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TRANSMISSION_IND_GREEN",
            },
            "type": "integer",
            "value": 255,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TRANSMISSION_IND_ALPHA",
            },
            "type": "integer",
            "value": 255,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TRANSMISSION_PORT_HANGTIME",
            },
            "type": "real",
            "value": 1.5,
          },
          EmptyLine {},
          Comment {
            "value": " Cinematic mode settings",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_INTERFACEFADE",
            },
            "type": "real",
            "value": 0.5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_GAMESPEED",
            },
            "type": Name {
              "value": "gamespeed",
            },
            "value": Name {
              "value": "MAP_SPEED_NORMAL",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Cinematic mode volume levels",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_VOLUME_UNITMOVEMENT",
            },
            "type": "real",
            "value": 0.4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_VOLUME_UNITSOUNDS",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_VOLUME_COMBAT",
            },
            "type": "real",
            "value": 0.4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_VOLUME_SPELLS",
            },
            "type": "real",
            "value": 0.4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_VOLUME_UI",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_VOLUME_MUSIC",
            },
            "type": "real",
            "value": 0.55,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_VOLUME_AMBIENTSOUNDS",
            },
            "type": "real",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMODE_VOLUME_FIRE",
            },
            "type": "real",
            "value": 0.6,
          },
          EmptyLine {},
          Comment {
            "value": " Speech mode volume levels",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SPEECH_VOLUME_UNITMOVEMENT",
            },
            "type": "real",
            "value": 0.25,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SPEECH_VOLUME_UNITSOUNDS",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SPEECH_VOLUME_COMBAT",
            },
            "type": "real",
            "value": 0.25,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SPEECH_VOLUME_SPELLS",
            },
            "type": "real",
            "value": 0.25,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SPEECH_VOLUME_UI",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SPEECH_VOLUME_MUSIC",
            },
            "type": "real",
            "value": 0.55,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SPEECH_VOLUME_AMBIENTSOUNDS",
            },
            "type": "real",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SPEECH_VOLUME_FIRE",
            },
            "type": "real",
            "value": 0.6,
          },
          EmptyLine {},
          Comment {
            "value": " Smart pan settings",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SMARTPAN_TRESHOLD_PAN",
            },
            "type": "real",
            "value": 500,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SMARTPAN_TRESHOLD_SNAP",
            },
            "type": "real",
            "value": 3500,
          },
          EmptyLine {},
          Comment {
            "value": " QueuedTriggerExecute settings",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MAX_QUEUED_TRIGGERS",
            },
            "type": "integer",
            "value": 100,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUEUED_TRIGGER_TIMEOUT",
            },
            "type": "real",
            "value": 180,
          },
          EmptyLine {},
          Comment {
            "value": " Campaign indexing constants",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_T",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_H",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_U",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_O",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_N",
            },
            "type": "integer",
            "value": 4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_XN",
            },
            "type": "integer",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_XH",
            },
            "type": "integer",
            "value": 6,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_XU",
            },
            "type": "integer",
            "value": 7,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_INDEX_XO",
            },
            "type": "integer",
            "value": 8,
          },
          EmptyLine {},
          Comment {
            "value": " Campaign offset constants (for mission indexing)",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_T",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_H",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_U",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_O",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_N",
            },
            "type": "integer",
            "value": 4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_XN",
            },
            "type": "integer",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_XH",
            },
            "type": "integer",
            "value": 6,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_XU",
            },
            "type": "integer",
            "value": 7,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPAIGN_OFFSET_XO",
            },
            "type": "integer",
            "value": 8,
          },
          EmptyLine {},
          Comment {
            "value": " Mission indexing constants",
          },
          Comment {
            "value": " Tutorial",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_T00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_T",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_T01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_T",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_T02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_T",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_T03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_T",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_T04",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_T",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 4,
            },
          },
          Comment {
            "value": " Human",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H04",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 4,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H05",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 5,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H06",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 6,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H07",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 7,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H08",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 8,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H09",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 9,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H10",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 10,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_H11",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_H",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 11,
            },
          },
          Comment {
            "value": " Undead",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U05",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 4,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U07",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 5,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U08",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 6,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U09",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 7,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U10",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 8,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_U11",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_U",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 9,
            },
          },
          Comment {
            "value": " Orc",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O04",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 4,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O05",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 5,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O06",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 6,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O07",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 7,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O08",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 8,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O09",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 9,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_O10",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_O",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 10,
            },
          },
          Comment {
            "value": " Night Elf",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N04",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 4,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N05",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 5,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N06",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 6,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N07",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 7,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N08",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 8,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_N09",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_N",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 9,
            },
          },
          Comment {
            "value": " Expansion Night Elf",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN04",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 4,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN05",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 5,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN06",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 6,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN07",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 7,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN08",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 8,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN09",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 9,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XN10",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XN",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 10,
            },
          },
          Comment {
            "value": " Expansion Human",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH04",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 4,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH05",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 5,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH06",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 6,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH07",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 7,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH08",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 8,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XH09",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XH",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 9,
            },
          },
          Comment {
            "value": " Expansion Undead",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU04",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 4,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU05",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 5,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU06",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 6,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU07",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 7,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU08",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 8,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU09",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 9,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU10",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 10,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU11",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 11,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU12",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 12,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XU13",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XU",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 13,
            },
          },
          EmptyLine {},
          Comment {
            "value": " Expansion Orc",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XO00",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XO",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 0,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XO01",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XO",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 1,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XO02",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XO",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 2,
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MISSION_INDEX_XO03",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "bj_CAMPAIGN_OFFSET_XO",
                },
                "operator": "*",
                "right": 1000,
              },
              "operator": "+",
              "right": 3,
            },
          },
          EmptyLine {},
          Comment {
            "value": " Cinematic indexing constants",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_TOP",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_HOP",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_HED",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_OOP",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_OED",
            },
            "type": "integer",
            "value": 4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_UOP",
            },
            "type": "integer",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_UED",
            },
            "type": "integer",
            "value": 6,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_NOP",
            },
            "type": "integer",
            "value": 7,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_NED",
            },
            "type": "integer",
            "value": 8,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_XOP",
            },
            "type": "integer",
            "value": 9,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEMATICINDEX_XED",
            },
            "type": "integer",
            "value": 10,
          },
          EmptyLine {},
          Comment {
            "value": " Alliance settings",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ALLIANCE_UNALLIED",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ALLIANCE_UNALLIED_VISION",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ALLIANCE_ALLIED",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ALLIANCE_ALLIED_VISION",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ALLIANCE_ALLIED_UNITS",
            },
            "type": "integer",
            "value": 4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ALLIANCE_ALLIED_ADVUNITS",
            },
            "type": "integer",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ALLIANCE_NEUTRAL",
            },
            "type": "integer",
            "value": 6,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ALLIANCE_NEUTRAL_VISION",
            },
            "type": "integer",
            "value": 7,
          },
          EmptyLine {},
          Comment {
            "value": " Keyboard Event Types",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_KEYEVENTTYPE_DEPRESS",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_KEYEVENTTYPE_RELEASE",
            },
            "type": "integer",
            "value": 1,
          },
          EmptyLine {},
          Comment {
            "value": " Keyboard Event Keys",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_KEYEVENTKEY_LEFT",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_KEYEVENTKEY_RIGHT",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_KEYEVENTKEY_DOWN",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_KEYEVENTKEY_UP",
            },
            "type": "integer",
            "value": 3,
          },
          EmptyLine {},
          Comment {
            "value": " Mouse Event Types",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MOUSEEVENTTYPE_DOWN",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MOUSEEVENTTYPE_UP",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MOUSEEVENTTYPE_MOVE",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Transmission timing methods",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TIMETYPE_ADD",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TIMETYPE_SET",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_TIMETYPE_SUB",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Camera bounds adjustment methods",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERABOUNDS_ADJUST_ADD",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMERABOUNDS_ADJUST_SUB",
            },
            "type": "integer",
            "value": 1,
          },
          EmptyLine {},
          Comment {
            "value": " Quest creation states",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTTYPE_REQ_DISCOVERED",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTTYPE_REQ_UNDISCOVERED",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTTYPE_OPT_DISCOVERED",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTTYPE_OPT_UNDISCOVERED",
            },
            "type": "integer",
            "value": 3,
          },
          EmptyLine {},
          Comment {
            "value": " Quest message types",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_DISCOVERED",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_UPDATED",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_COMPLETED",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_FAILED",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_REQUIREMENT",
            },
            "type": "integer",
            "value": 4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_MISSIONFAILED",
            },
            "type": "integer",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_ALWAYSHINT",
            },
            "type": "integer",
            "value": 6,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_HINT",
            },
            "type": "integer",
            "value": 7,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_SECRET",
            },
            "type": "integer",
            "value": 8,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_UNITACQUIRED",
            },
            "type": "integer",
            "value": 9,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_UNITAVAILABLE",
            },
            "type": "integer",
            "value": 10,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_ITEMACQUIRED",
            },
            "type": "integer",
            "value": 11,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_QUESTMESSAGE_WARNING",
            },
            "type": "integer",
            "value": 12,
          },
          EmptyLine {},
          Comment {
            "value": " Leaderboard sorting methods",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SORTTYPE_SORTBYVALUE",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SORTTYPE_SORTBYPLAYER",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_SORTTYPE_SORTBYLABEL",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Cinematic fade filter methods",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEFADETYPE_FADEIN",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEFADETYPE_FADEOUT",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CINEFADETYPE_FADEOUTIN",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Buff removal methods",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_REMOVEBUFFS_POSITIVE",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_REMOVEBUFFS_NEGATIVE",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_REMOVEBUFFS_ALL",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_REMOVEBUFFS_NONTLIFE",
            },
            "type": "integer",
            "value": 3,
          },
          EmptyLine {},
          Comment {
            "value": " Buff properties - polarity",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_BUFF_POLARITY_POSITIVE",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_BUFF_POLARITY_NEGATIVE",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_BUFF_POLARITY_EITHER",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Buff properties - resist type",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_BUFF_RESIST_MAGIC",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_BUFF_RESIST_PHYSICAL",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_BUFF_RESIST_EITHER",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_BUFF_RESIST_BOTH",
            },
            "type": "integer",
            "value": 3,
          },
          EmptyLine {},
          Comment {
            "value": " Hero stats",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HEROSTAT_STR",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HEROSTAT_AGI",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HEROSTAT_INT",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Hero skill point modification methods",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MODIFYMETHOD_ADD",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MODIFYMETHOD_SUB",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MODIFYMETHOD_SET",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Unit state adjustment methods (for replaced units)",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_UNIT_STATE_METHOD_ABSOLUTE",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_UNIT_STATE_METHOD_RELATIVE",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_UNIT_STATE_METHOD_DEFAULTS",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_UNIT_STATE_METHOD_MAXIMUM",
            },
            "type": "integer",
            "value": 3,
          },
          EmptyLine {},
          Comment {
            "value": " Gate operations",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GATEOPERATION_CLOSE",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GATEOPERATION_OPEN",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GATEOPERATION_DESTROY",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Game cache value types",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GAMECACHE_BOOLEAN",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GAMECACHE_INTEGER",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GAMECACHE_REAL",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GAMECACHE_UNIT",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_GAMECACHE_STRING",
            },
            "type": "integer",
            "value": 4,
          },
          EmptyLine {},
          Comment {
            "value": " Hashtable value types",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HASHTABLE_BOOLEAN",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HASHTABLE_INTEGER",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HASHTABLE_REAL",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HASHTABLE_STRING",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_HASHTABLE_HANDLE",
            },
            "type": "integer",
            "value": 4,
          },
          EmptyLine {},
          Comment {
            "value": " Item status types",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEM_STATUS_HIDDEN",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEM_STATUS_OWNED",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEM_STATUS_INVULNERABLE",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEM_STATUS_POWERUP",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEM_STATUS_SELLABLE",
            },
            "type": "integer",
            "value": 4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEM_STATUS_PAWNABLE",
            },
            "type": "integer",
            "value": 5,
          },
          EmptyLine {},
          Comment {
            "value": " Itemcode status types",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEMCODE_STATUS_POWERUP",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEMCODE_STATUS_SELLABLE",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ITEMCODE_STATUS_PAWNABLE",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Minimap ping styles",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MINIMAPPINGSTYLE_SIMPLE",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MINIMAPPINGSTYLE_FLASHY",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_MINIMAPPINGSTYLE_ATTACK",
            },
            "type": "integer",
            "value": 2,
          },
          EmptyLine {},
          Comment {
            "value": " Campaign Minimap icon styles",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_PRIMARY",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_PRIMARY_GREEN",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_PRIMARY_RED",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_BONUS",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_TURNIN",
            },
            "type": "integer",
            "value": 4,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_BOSS",
            },
            "type": "integer",
            "value": 5,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_CONTROL_ALLY",
            },
            "type": "integer",
            "value": 6,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_CONTROL_NEUTRAL",
            },
            "type": "integer",
            "value": 7,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CAMPPINGSTYLE_CONTROL_ENEMY",
            },
            "type": "integer",
            "value": 8,
          },
          EmptyLine {},
          Comment {
            "value": " Corpse creation settings",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CORPSE_MAX_DEATH_TIME",
            },
            "type": "real",
            "value": 8,
          },
          EmptyLine {},
          Comment {
            "value": " Corpse creation styles",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CORPSETYPE_FLESH",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_CORPSETYPE_BONE",
            },
            "type": "integer",
            "value": 1,
          },
          EmptyLine {},
          Comment {
            "value": " Elevator pathing-blocker destructable code",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ELEVATOR_BLOCKER_CODE",
            },
            "type": "integer",
            "value": FourCC {
              "value": "DTep",
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ELEVATOR_CODE01",
            },
            "type": "integer",
            "value": FourCC {
              "value": "DTrf",
            },
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ELEVATOR_CODE02",
            },
            "type": "integer",
            "value": FourCC {
              "value": "DTrx",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Elevator wall codes",
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ELEVATOR_WALL_TYPE_ALL",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ELEVATOR_WALL_TYPE_EAST",
            },
            "type": "integer",
            "value": 1,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ELEVATOR_WALL_TYPE_NORTH",
            },
            "type": "integer",
            "value": 2,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ELEVATOR_WALL_TYPE_SOUTH",
            },
            "type": "integer",
            "value": 3,
          },
          Variable {
            "constant": true,
            "name": Name {
              "value": "bj_ELEVATOR_WALL_TYPE_WEST",
            },
            "type": "integer",
            "value": 4,
          },
          EmptyLine {},
          Comment {
            "value": "-----------------------------------------------------------------------",
          },
          Comment {
            "value": " Variables",
          },
          Comment {
            "value": "",
          },
          EmptyLine {},
          Comment {
            "value": " Force predefs",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_FORCE_ALL_PLAYERS",
            },
            "type": Name {
              "value": "force",
            },
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_FORCE_PLAYER",
            },
            "type": Name {
              "value": "force",
            },
          },
          EmptyLine {},
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_MELEE_MAX_TWINKED_HEROES",
            },
            "type": "integer",
            "value": 0,
          },
          EmptyLine {},
          Comment {
            "value": " Map area rects",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_mapInitialPlayableArea",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_mapInitialCameraBounds",
            },
            "type": Name {
              "value": "rect",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Utility function vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_forLoopAIndex",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_forLoopBIndex",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_forLoopAIndexEnd",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_forLoopBIndexEnd",
            },
            "type": "integer",
            "value": 0,
          },
          EmptyLine {},
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_slotControlReady",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_slotControlUsed",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_slotControl",
            },
            "type": Name {
              "value": "mapcontrol",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Game started detection vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_gameStartedTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_gameStarted",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_volumeGroupsTimer",
            },
            "type": Name {
              "value": "timer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Singleplayer check",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_isSinglePlayer",
            },
            "type": "boolean",
            "value": false,
          },
          EmptyLine {},
          Comment {
            "value": " Day/Night Cycle vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_dncSoundsDay",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_dncSoundsNight",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_dayAmbientSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_nightAmbientSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_dncSoundsDawn",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_dncSoundsDusk",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_dawnSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_duskSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_useDawnDuskSounds",
            },
            "type": "boolean",
            "value": true,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_dncIsDaytime",
            },
            "type": "boolean",
            "value": false,
          },
          EmptyLine {},
          Comment {
            "value": " Triggered sounds",
          },
          Comment {
            "value": "sound              bj_pingMinimapSound         = null",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_rescueSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_questDiscoveredSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_questUpdatedSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_questCompletedSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_questFailedSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_questHintSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_questSecretSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_questItemAcquiredSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_questWarningSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_victoryDialogSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_defeatDialogSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Marketplace vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_stockItemPurchased",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_stockUpdateTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_stockAllowedPermanent",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_stockAllowedCharged",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_stockAllowedArtifact",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_stockPickedItemLevel",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_stockPickedItemType",
            },
            "type": Name {
              "value": "itemtype",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Melee vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_meleeVisibilityTrained",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_meleeVisibilityIsDay",
            },
            "type": "boolean",
            "value": true,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_meleeGrantHeroItems",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_meleeNearestMineToLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_meleeNearestMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_meleeNearestMineDist",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_meleeGameOver",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_meleeDefeated",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_meleeVictoried",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_ghoul",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_crippledTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_crippledTimerWindows",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_playerIsCrippled",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_playerIsExposed",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_finishSoonAllExposed",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_finishSoonTimerDialog",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_meleeTwinkedHeroes",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " Rescue behavior vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_rescueUnitBehavior",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_rescueChangeColorUnit",
            },
            "type": "boolean",
            "value": true,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_rescueChangeColorBldg",
            },
            "type": "boolean",
            "value": true,
          },
          EmptyLine {},
          Comment {
            "value": " Transmission vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineSceneEndingTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineSceneLastSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineSceneBeingSkipped",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Cinematic mode vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineModePriorSpeed",
            },
            "type": Name {
              "value": "gamespeed",
            },
            "value": Name {
              "value": "MAP_SPEED_NORMAL",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineModePriorFogSetting",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineModePriorMaskSetting",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineModeAlreadyIn",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineModePriorDawnDusk",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineModeSavedSeed",
            },
            "type": "integer",
            "value": 0,
          },
          EmptyLine {},
          Comment {
            "value": " Cinematic fade vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineFadeFinishTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineFadeContinueTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineFadeContinueRed",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineFadeContinueGreen",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineFadeContinueBlue",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineFadeContinueTrans",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineFadeContinueDuration",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_cineFadeContinueTex",
            },
            "type": "string",
            "value": "",
          },
          EmptyLine {},
          Comment {
            "value": " QueuedTriggerExecute vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_queuedExecTotal",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_queuedExecTriggers",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_queuedExecUseConds",
            },
            "type": "boolean",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_queuedExecTimeoutTimer",
            },
            "type": Name {
              "value": "timer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_queuedExecTimeout",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Helper vars (for Filter and Enum funcs)",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_destInRegionDiesCount",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_destInRegionDiesTrig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_groupCountUnits",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_forceCountPlayers",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_groupEnumTypeId",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_groupEnumOwningPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_groupAddGroupDest",
            },
            "type": Name {
              "value": "group",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_groupRemoveGroupDest",
            },
            "type": Name {
              "value": "group",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_groupRandomConsidered",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_groupRandomCurrentPick",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_groupLastCreatedDest",
            },
            "type": Name {
              "value": "group",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_randomSubGroupGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_randomSubGroupWant",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_randomSubGroupTotal",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_randomSubGroupChance",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_destRandomConsidered",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_destRandomCurrentPick",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_elevatorWallBlocker",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_elevatorNeighbor",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_itemRandomConsidered",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_itemRandomCurrentPick",
            },
            "type": Name {
              "value": "item",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_forceRandomConsidered",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_forceRandomCurrentPick",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_makeUnitRescuableUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_makeUnitRescuableFlag",
            },
            "type": "boolean",
            "value": true,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_pauseAllUnitsFlag",
            },
            "type": "boolean",
            "value": true,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_enumDestructableCenter",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_enumDestructableRadius",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_setPlayerTargetColor",
            },
            "type": Name {
              "value": "playercolor",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_isUnitGroupDeadResult",
            },
            "type": "boolean",
            "value": true,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_isUnitGroupEmptyResult",
            },
            "type": "boolean",
            "value": true,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_isUnitGroupInRectResult",
            },
            "type": "boolean",
            "value": true,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_isUnitGroupInRectRect",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_changeLevelShowScores",
            },
            "type": "boolean",
            "value": false,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_changeLevelMapName",
            },
            "type": "string",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_suspendDecayFleshGroup",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_suspendDecayBoneGroup",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_delayedSuspendDecayTimer",
            },
            "type": Name {
              "value": "timer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_delayedSuspendDecayTrig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_livingPlayerUnitsTypeId",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastDyingWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Random distribution vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_randDistCount",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_randDistID",
            },
            "type": "integer",
          },
          Variable {
            "access": "global",
            "array": true,
            "name": Name {
              "value": "bj_randDistChance",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " Last X'd vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastRemovedItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastHauntedGoldMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedDestructable",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedGroup",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedFogModifier",
            },
            "type": Name {
              "value": "fogmodifier",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedEffect",
            },
            "type": Name {
              "value": "effect",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedWeatherEffect",
            },
            "type": Name {
              "value": "weathereffect",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedTerrainDeformation",
            },
            "type": Name {
              "value": "terraindeformation",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedQuestItem",
            },
            "type": Name {
              "value": "questitem",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedDefeatCondition",
            },
            "type": Name {
              "value": "defeatcondition",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastStartedTimer",
            },
            "type": Name {
              "value": "timer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedTimerDialog",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedLeaderboard",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedMultiboard",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastPlayedSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastPlayedMusic",
            },
            "type": "string",
            "value": "",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastTransmissionDuration",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedGameCache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedHashtable",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastLoadedUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedButton",
            },
            "type": Name {
              "value": "button",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastReplacedUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedTextTag",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedLightning",
            },
            "type": Name {
              "value": "lightning",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedImage",
            },
            "type": Name {
              "value": "image",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedUbersplat",
            },
            "type": Name {
              "value": "ubersplat",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedMinimapIcon",
            },
            "type": Name {
              "value": "minimapicon",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastCreatedCommandButtonEffect",
            },
            "type": Name {
              "value": "commandbuttoneffect",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Filter function vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "filterIssueHauntOrderAtLocBJ",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "filterEnumDestructablesInCircleBJ",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "filterGetUnitsInRectOfPlayer",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "filterGetUnitsOfTypeIdAll",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "filterGetUnitsOfPlayerAndTypeId",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "filterMeleeTrainedUnitIsHeroBJ",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "filterLivingPlayerUnitsOfTypeId",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Memory cleanup vars",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_wantDestroyGroup",
            },
            "type": "boolean",
            "value": false,
          },
          EmptyLine {},
          Comment {
            "value": " Instanced Operation Results",
          },
          Variable {
            "access": "global",
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "type": "boolean",
            "value": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Debugging Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BJDebugMsg",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "msg",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "i",
            },
            "type": "integer",
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "i",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      0,
                      0,
                      60,
                      Name {
                        "value": "msg",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DisplayTimedTextToPlayer",
                  },
                  "statement": true,
                },
                JASSSet {
                  "name": Name {
                    "value": "i",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "i",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "i",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Math Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RMinBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "b",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "a",
                  },
                  "operator": "<",
                  "right": Name {
                    "value": "b",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "b",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "a",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RMaxBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "b",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "a",
                  },
                  "operator": "<",
                  "right": Name {
                    "value": "b",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "a",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "b",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RAbsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "a",
                  },
                  "operator": ">=",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        UnaryOp {
                          "expr": Name {
                            "value": "a",
                          },
                          "operator": "-",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "a",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RSignBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "a",
                  },
                  "operator": ">=",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        UnaryOp {
                          "expr": 1,
                          "operator": "-",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    1,
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IMinBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "b",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "a",
                  },
                  "operator": "<",
                  "right": Name {
                    "value": "b",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "b",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "a",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IMaxBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "b",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "a",
                  },
                  "operator": "<",
                  "right": Name {
                    "value": "b",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "a",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "b",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IAbsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "a",
                  },
                  "operator": ">=",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        UnaryOp {
                          "expr": Name {
                            "value": "a",
                          },
                          "operator": "-",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "a",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ISignBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "a",
                  },
                  "operator": ">=",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        UnaryOp {
                          "expr": 1,
                          "operator": "-",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    1,
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SinBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "degrees",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "degrees",
                      },
                      "operator": "*",
                      "right": Name {
                        "value": "bj_DEGTORAD",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Sin",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CosBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "degrees",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "degrees",
                      },
                      "operator": "*",
                      "right": Name {
                        "value": "bj_DEGTORAD",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Cos",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TanBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "degrees",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "degrees",
                      },
                      "operator": "*",
                      "right": Name {
                        "value": "bj_DEGTORAD",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Tan",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AsinBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "degrees",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "degrees",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Asin",
                  },
                },
                "operator": "*",
                "right": Name {
                  "value": "bj_RADTODEG",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AcosBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "degrees",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "degrees",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Acos",
                  },
                },
                "operator": "*",
                "right": Name {
                  "value": "bj_RADTODEG",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AtanBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "degrees",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "degrees",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Atan",
                  },
                },
                "operator": "*",
                "right": Name {
                  "value": "bj_RADTODEG",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "Atan2BJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "y",
                      },
                      Name {
                        "value": "x",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Atan2",
                  },
                },
                "operator": "*",
                "right": Name {
                  "value": "bj_RADTODEG",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AngleBetweenPoints",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "locA",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "locB",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Name {
                  "value": "bj_RADTODEG",
                },
                "operator": "*",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "locB",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationY",
                          },
                        },
                        "operator": "-",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "locA",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationY",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "locB",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationX",
                          },
                        },
                        "operator": "-",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "locA",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationX",
                          },
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Atan2",
                  },
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DistanceBetweenPoints",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "locA",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "locB",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "dx",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "locB",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLocationX",
                },
              },
              "operator": "-",
              "right": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "locA",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLocationX",
                },
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "dy",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "locB",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLocationY",
                },
              },
              "operator": "-",
              "right": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "locA",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLocationY",
                },
              },
            },
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": BinaryOp {
                        "left": Name {
                          "value": "dx",
                        },
                        "operator": "*",
                        "right": Name {
                          "value": "dx",
                        },
                      },
                      "operator": "+",
                      "right": BinaryOp {
                        "left": Name {
                          "value": "dy",
                        },
                        "operator": "*",
                        "right": Name {
                          "value": "dy",
                        },
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "SquareRoot",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PolarProjectionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "source",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "dist",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "angle",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "x",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "source",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLocationX",
                },
              },
              "operator": "+",
              "right": BinaryOp {
                "left": Name {
                  "value": "dist",
                },
                "operator": "*",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "angle",
                        },
                        "operator": "*",
                        "right": Name {
                          "value": "bj_DEGTORAD",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Cos",
                  },
                },
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "y",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "source",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLocationY",
                },
              },
              "operator": "+",
              "right": BinaryOp {
                "left": Name {
                  "value": "dist",
                },
                "operator": "*",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "angle",
                        },
                        "operator": "*",
                        "right": Name {
                          "value": "bj_DEGTORAD",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Sin",
                  },
                },
              },
            },
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "x",
                    },
                    Name {
                      "value": "y",
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRandomDirectionDeg",
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    0,
                    360,
                  ],
                },
                "name": Name {
                  "value": "GetRandomReal",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRandomPercentageBJ",
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    0,
                    100,
                  ],
                },
                "name": Name {
                  "value": "GetRandomReal",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRandomLocInRect",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichRect",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichRect",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetRectMinX",
                            },
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichRect",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetRectMaxX",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetRandomReal",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichRect",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetRectMinY",
                            },
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichRect",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetRectMaxY",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetRandomReal",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ModuloInteger",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "dividend",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "divisor",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "modulus",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": Name {
                "value": "dividend",
              },
              "operator": "-",
              "right": BinaryOp {
                "left": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "dividend",
                      },
                      "operator": "/",
                      "right": Name {
                        "value": "divisor",
                      },
                    },
                  ],
                },
                "operator": "*",
                "right": Name {
                  "value": "divisor",
                },
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " If the dividend was negative, the above modulus calculation will",
          },
          Comment {
            "value": " be negative, but within (-divisor..0).  We can add (divisor) to",
          },
          Comment {
            "value": " shift this result into the desired range of (0..divisor).",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "modulus",
                  },
                  "operator": "<",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "modulus",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "modulus",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "divisor",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "modulus",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Calculate the modulus/remainder of (dividend) divided by (divisor).",
    },
    Comment {
      "value": " Examples:  13.000 mod 2.500 = 0.500.  -6.000 mod 2.500 = 1.500.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ModuloReal",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "dividend",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "divisor",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "modulus",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Name {
                "value": "dividend",
              },
              "operator": "-",
              "right": BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            BinaryOp {
                              "left": Name {
                                "value": "dividend",
                              },
                              "operator": "/",
                              "right": Name {
                                "value": "divisor",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "R2I",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "I2R",
                  },
                },
                "operator": "*",
                "right": Name {
                  "value": "divisor",
                },
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " If the dividend was negative, the above modulus calculation will",
          },
          Comment {
            "value": " be negative, but within (-divisor..0).  We can add (divisor) to",
          },
          Comment {
            "value": " shift this result into the desired range of (0..divisor).",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "modulus",
                  },
                  "operator": "<",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "modulus",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "modulus",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "divisor",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "modulus",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "OffsetLocation",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "dx",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "dy",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      "operator": "+",
                      "right": Name {
                        "value": "dx",
                      },
                    },
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                      "operator": "+",
                      "right": Name {
                        "value": "dy",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "OffsetRectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "dx",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "dy",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "rect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "r",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMinX",
                        },
                      },
                      "operator": "+",
                      "right": Name {
                        "value": "dx",
                      },
                    },
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "r",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMinY",
                        },
                      },
                      "operator": "+",
                      "right": Name {
                        "value": "dy",
                      },
                    },
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "r",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMaxX",
                        },
                      },
                      "operator": "+",
                      "right": Name {
                        "value": "dx",
                      },
                    },
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "r",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMaxY",
                        },
                      },
                      "operator": "+",
                      "right": Name {
                        "value": "dy",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Rect",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RectFromCenterSizeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "center",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "width",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "height",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "rect",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "x",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "center",
                  },
                ],
              },
              "name": Name {
                "value": "GetLocationX",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "y",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "center",
                  },
                ],
              },
              "name": Name {
                "value": "GetLocationY",
              },
            },
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "x",
                      },
                      "operator": "-",
                      "right": BinaryOp {
                        "left": Name {
                          "value": "width",
                        },
                        "operator": "*",
                        "right": 0.5,
                      },
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "y",
                      },
                      "operator": "-",
                      "right": BinaryOp {
                        "left": Name {
                          "value": "height",
                        },
                        "operator": "*",
                        "right": 0.5,
                      },
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "x",
                      },
                      "operator": "+",
                      "right": BinaryOp {
                        "left": Name {
                          "value": "width",
                        },
                        "operator": "*",
                        "right": 0.5,
                      },
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "y",
                      },
                      "operator": "+",
                      "right": BinaryOp {
                        "left": Name {
                          "value": "height",
                        },
                        "operator": "*",
                        "right": 0.5,
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Rect",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RectContainsCoords",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": BinaryOp {
                  "left": BinaryOp {
                    "left": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "r",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetRectMinX",
                            },
                          },
                          "operator": "<=",
                          "right": Name {
                            "value": "x",
                          },
                        },
                      ],
                    },
                    "operator": "and",
                    "right": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "x",
                          },
                          "operator": "<=",
                          "right": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "r",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetRectMaxX",
                            },
                          },
                        },
                      ],
                    },
                  },
                  "operator": "and",
                  "right": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "r",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetRectMinY",
                          },
                        },
                        "operator": "<=",
                        "right": Name {
                          "value": "y",
                        },
                      },
                    ],
                  },
                },
                "operator": "and",
                "right": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "y",
                      },
                      "operator": "<=",
                      "right": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "r",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMaxY",
                        },
                      },
                    },
                  ],
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RectContainsLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "RectContainsCoords",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RectContainsUnit",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetUnitX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetUnitY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "RectContainsCoords",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RectContainsItem",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "whichItem",
                  },
                  "operator": "==",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichItem",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsItemOwned",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichItem",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetItemX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichItem",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetItemY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "RectContainsCoords",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Utility Constructs",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Runs the trigger's actions if the trigger's conditions evaluate to true.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ConditionalTriggerExecute",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "trig",
                  },
                ],
              },
              "name": Name {
                "value": "TriggerEvaluate",
              },
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "trig",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerExecute",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Runs the trigger's actions if the trigger's conditions evaluate to true.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerExecuteBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "checkConditions",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "checkConditions",
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": UnaryOp {
                    "expr": Parens {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "trig",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "TriggerEvaluate",
                          },
                        },
                      ],
                    },
                    "operator": "not",
                  },
                  "then": Statements {
                    "body": Array [
                      Return {
                        "data": Array [
                          false,
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
              ],
            },
            "name": Name {
              "value": "TriggerExecute",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              true,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Arranges for a trigger to fire almost immediately, except that the calling",
    },
    Comment {
      "value": " trigger is not interrupted as is the case with a TriggerExecute call.",
    },
    Comment {
      "value": " Since the trigger executes normally, its conditions are still evaluated.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PostTriggerExecuteBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "checkConditions",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "checkConditions",
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": UnaryOp {
                    "expr": Parens {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "trig",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "TriggerEvaluate",
                          },
                        },
                      ],
                    },
                    "operator": "not",
                  },
                  "then": Statements {
                    "body": Array [
                      Return {
                        "data": Array [
                          false,
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                0,
                false,
              ],
            },
            "name": Name {
              "value": "TriggerRegisterTimerEvent",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              true,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Debug - Display the contents of the trigger queue (as either null or \\"x\\"",
    },
    Comment {
      "value": " for each entry).",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerCheck",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "s",
            },
            "type": "string",
            "value": "TrigQueue Check ",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "i",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "i",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "i",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_queuedExecTotal",
                      },
                    },
                  ],
                },
                JASSSet {
                  "name": Name {
                    "value": "s",
                  },
                  "value": BinaryOp {
                    "left": BinaryOp {
                      "left": BinaryOp {
                        "left": Name {
                          "value": "s",
                        },
                        "operator": "+",
                        "right": "q[",
                      },
                      "operator": "+",
                      "right": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "i",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "I2S",
                        },
                      },
                    },
                    "operator": "+",
                    "right": "]=",
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": ArrayRef {
                          "name": Name {
                            "value": "bj_queuedExecTriggers",
                          },
                          "prop": Name {
                            "value": "i",
                          },
                        },
                        "operator": "==",
                      },
                    ],
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          JASSSet {
                            "name": Name {
                              "value": "s",
                            },
                            "value": BinaryOp {
                              "left": Name {
                                "value": "s",
                              },
                              "operator": "+",
                              "right": "x ",
                            },
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "s",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "s",
                          },
                          "operator": "+",
                          "right": "null ",
                        },
                      },
                    ],
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "i",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "i",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
              ],
            },
          },
          JASSSet {
            "name": Name {
              "value": "s",
            },
            "value": BinaryOp {
              "left": BinaryOp {
                "left": BinaryOp {
                  "left": Name {
                    "value": "s",
                  },
                  "operator": "+",
                  "right": "(",
                },
                "operator": "+",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_queuedExecTotal",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "I2S",
                  },
                },
              },
              "operator": "+",
              "right": " total)",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetLocalPlayer",
                  },
                },
                0,
                0,
                600,
                Name {
                  "value": "s",
                },
              ],
            },
            "name": Name {
              "value": "DisplayTimedTextToPlayer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Searches the queue for a given trigger, returning the index of the",
    },
    Comment {
      "value": " trigger within the queue if it is found, or -1 if it is not found.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerGetIndex",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Determine which, if any, of the queued triggers is being removed.",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_queuedExecTotal",
                      },
                    },
                  ],
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": ArrayRef {
                          "name": Name {
                            "value": "bj_queuedExecTriggers",
                          },
                          "prop": Name {
                            "value": "index",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "trig",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Return {
                        "data": Array [
                          Name {
                            "value": "index",
                          },
                        ],
                      },
                    ],
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
              ],
            },
          },
          Return {
            "data": Array [
              UnaryOp {
                "expr": 1,
                "operator": "-",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Removes a trigger from the trigger queue, shifting other triggers down",
    },
    Comment {
      "value": " to fill the unused space.  If the currently running trigger is removed",
    },
    Comment {
      "value": " in this manner, this function does NOT attempt to run the next trigger.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerRemoveByIndex",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trigIndex",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " If the to-be-removed index is out of range, fail.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "trigIndex",
                  },
                  "operator": ">=",
                  "right": Name {
                    "value": "bj_queuedExecTotal",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Shift all queue entries down to fill in the gap.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_queuedExecTotal",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_queuedExecTotal",
              },
              "operator": "-",
              "right": 1,
            },
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": Name {
              "value": "trigIndex",
            },
          },
          Loop {
            "statements": Statements {
              "body": Array [
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_queuedExecTotal",
                      },
                    },
                  ],
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_queuedExecTriggers",
                  },
                  "prop": Name {
                    "value": "index",
                  },
                  "value": ArrayRef {
                    "name": Name {
                      "value": "bj_queuedExecTriggers",
                    },
                    "prop": BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "+",
                      "right": 1,
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_queuedExecUseConds",
                  },
                  "prop": Name {
                    "value": "index",
                  },
                  "value": ArrayRef {
                    "name": Name {
                      "value": "bj_queuedExecUseConds",
                    },
                    "prop": BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "+",
                      "right": 1,
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
              ],
            },
          },
          Return {
            "data": Array [
              true,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Attempt to execute the first trigger in the queue.  If it fails, remove",
    },
    Comment {
      "value": " it and execute the next one.  Continue this cycle until a trigger runs,",
    },
    Comment {
      "value": " or until the queue is empty.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerAttemptExec",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Loop {
            "statements": Statements {
              "body": Array [
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "bj_queuedExecTotal",
                      },
                      "operator": "==",
                      "right": 0,
                    },
                  ],
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Call {
                    "args": Args {
                      "body": Array [
                        ArrayRef {
                          "name": Name {
                            "value": "bj_queuedExecTriggers",
                          },
                          "prop": 0,
                        },
                        ArrayRef {
                          "name": Name {
                            "value": "bj_queuedExecUseConds",
                          },
                          "prop": 0,
                        },
                      ],
                    },
                    "name": Name {
                      "value": "TriggerExecuteBJ",
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Timeout the queue if it sits at the front of the queue for too long.",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "bj_queuedExecTimeoutTimer",
                            },
                            Name {
                              "value": "bj_QUEUED_TRIGGER_TIMEOUT",
                            },
                            false,
                            null,
                          ],
                        },
                        "name": Name {
                          "value": "TimerStart",
                        },
                        "statement": true,
                      },
                      Return {
                        "data": Array [
                          true,
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      0,
                    ],
                  },
                  "name": Name {
                    "value": "QueuedTriggerRemoveByIndex",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              false,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Queues a trigger to be executed, assuring that such triggers are not",
    },
    Comment {
      "value": " executed at the same time.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerAddBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "checkConditions",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Make sure our queue isn't full.  If it is, return failure.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_queuedExecTotal",
                  },
                  "operator": ">=",
                  "right": Name {
                    "value": "bj_MAX_QUEUED_TRIGGERS",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Add the trigger to an array of to-be-executed triggers.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_queuedExecTriggers",
            },
            "prop": Name {
              "value": "bj_queuedExecTotal",
            },
            "value": Name {
              "value": "trig",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_queuedExecUseConds",
            },
            "prop": Name {
              "value": "bj_queuedExecTotal",
            },
            "value": Name {
              "value": "checkConditions",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_queuedExecTotal",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_queuedExecTotal",
              },
              "operator": "+",
              "right": 1,
            },
          },
          EmptyLine {},
          Comment {
            "value": " If this is the only trigger in the queue, run it.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_queuedExecTotal",
                  },
                  "operator": "==",
                  "right": 1,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "QueuedTriggerAttemptExec",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              true,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Denotes the end of a queued trigger. Be sure to call this only once per",
    },
    Comment {
      "value": " queued trigger, or risk stepping on the toes of other queued triggers.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerRemoveBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "trigIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "trigExecuted",
            },
            "type": "boolean",
          },
          EmptyLine {},
          Comment {
            "value": " Find the trigger's index.",
          },
          JASSSet {
            "name": Name {
              "value": "trigIndex",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "trig",
                  },
                ],
              },
              "name": Name {
                "value": "QueuedTriggerGetIndex",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "trigIndex",
                  },
                  "operator": "==",
                  "right": UnaryOp {
                    "expr": 1,
                    "operator": "-",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Shuffle the other trigger entries down to fill in the gap.",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trigIndex",
                },
              ],
            },
            "name": Name {
              "value": "QueuedTriggerRemoveByIndex",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If we just axed the currently running trigger, run the next one.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "trigIndex",
                  },
                  "operator": "==",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_queuedExecTimeoutTimer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PauseTimer",
                  },
                  "statement": true,
                },
                Call {
                  "name": Name {
                    "value": "QueuedTriggerAttemptExec",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Denotes the end of a queued trigger. Be sure to call this only once per",
    },
    Comment {
      "value": " queued trigger, lest you step on the toes of other queued triggers.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerDoneBJ",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " Make sure there's something on the queue to remove.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_queuedExecTotal",
                  },
                  "operator": "<=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Remove the currently running trigger from the array.",
          },
          Call {
            "args": Args {
              "body": Array [
                0,
              ],
            },
            "name": Name {
              "value": "QueuedTriggerRemoveByIndex",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If other triggers are waiting to run, run one of them.",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_queuedExecTimeoutTimer",
                },
              ],
            },
            "name": Name {
              "value": "PauseTimer",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "QueuedTriggerAttemptExec",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Empty the trigger queue.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerClearBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_queuedExecTimeoutTimer",
                },
              ],
            },
            "name": Name {
              "value": "PauseTimer",
            },
            "statement": true,
          },
          JASSSet {
            "name": Name {
              "value": "bj_queuedExecTotal",
            },
            "value": 0,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Remove all but the currently executing trigger from the trigger queue.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerClearInactiveBJ",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_queuedExecTotal",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "bj_queuedExecTotal",
                  },
                  1,
                ],
              },
              "name": Name {
                "value": "IMinBJ",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueuedTriggerCountBJ",
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_queuedExecTotal",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsTriggerQueueEmptyBJ",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Name {
                  "value": "bj_queuedExecTotal",
                },
                "operator": "<=",
                "right": 0,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsTriggerQueuedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "trig",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "QueuedTriggerGetIndex",
                  },
                },
                "operator": "!=",
                "right": UnaryOp {
                  "expr": 1,
                  "operator": "-",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetForLoopIndexA",
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_forLoopAIndex",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetForLoopIndexA",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "newIndex",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_forLoopAIndex",
            },
            "value": Name {
              "value": "newIndex",
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetForLoopIndexB",
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_forLoopBIndex",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetForLoopIndexB",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "newIndex",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_forLoopBIndex",
            },
            "value": Name {
              "value": "newIndex",
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " We can't do game-time waits, so this simulates one by starting a timer",
    },
    Comment {
      "value": " and polling until the timer expires.",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PolledWait",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "timeRemaining",
            },
            "type": "real",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "duration",
                  },
                  "operator": ">",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "t",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "CreateTimer",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "t",
                      },
                      Name {
                        "value": "duration",
                      },
                      false,
                      null,
                    ],
                  },
                  "name": Name {
                    "value": "TimerStart",
                  },
                  "statement": true,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "timeRemaining",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "t",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "TimerGetRemaining",
                          },
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "timeRemaining",
                            },
                            "operator": "<=",
                            "right": 0,
                          },
                        ],
                      },
                      EmptyLine {},
                      Comment {
                        "value": " If we have a bit of time left, skip past 10% of the remaining",
                      },
                      Comment {
                        "value": " duration instead of checking every interval, to minimize the",
                      },
                      Comment {
                        "value": " polling on long waits.",
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Name {
                                "value": "timeRemaining",
                              },
                              "operator": ">",
                              "right": Name {
                                "value": "bj_POLLED_WAIT_SKIP_THRESHOLD",
                              },
                            },
                          ],
                        },
                        "elses": Array [
                          Else {
                            "statements": Statements {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "bj_POLLED_WAIT_INTERVAL",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "TriggerSleepAction",
                                  },
                                  "statement": true,
                                },
                              ],
                            },
                          },
                        ],
                        "then": Statements {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  BinaryOp {
                                    "left": 0.1,
                                    "operator": "*",
                                    "right": Name {
                                      "value": "timeRemaining",
                                    },
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "TriggerSleepAction",
                              },
                              "statement": true,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "t",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyTimer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IntegerTertiaryOp",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "valueA",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "valueB",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "flag",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "valueB",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "valueA",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  General Utility Functions",
    },
    Comment {
      "value": "*  These functions exist purely to make the trigger dialogs cleaner and",
    },
    Comment {
      "value": "*  more comprehensible.",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DoNothing",
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " This function does nothing.  WorldEdit should should eventually ignore",
    },
    Comment {
      "value": " CommentString triggers during script generation, but until such a time,",
    },
    Comment {
      "value": " this function will serve as a stub.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CommentString",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "commentString",
            },
            "type": "string",
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " This function returns the input string, converting it from the localized text, if necessary",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StringIdentity",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "theString",
            },
            "type": "string",
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "theString",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLocalizedString",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetBooleanAnd",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "valueA",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "valueB",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Name {
                  "value": "valueA",
                },
                "operator": "and",
                "right": Name {
                  "value": "valueB",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetBooleanOr",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "valueA",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "valueB",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Name {
                  "value": "valueA",
                },
                "operator": "or",
                "right": Name {
                  "value": "valueB",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Converts a percentage (real, 0..100) into a scaled integer (0..max),",
    },
    Comment {
      "value": " clipping the result to 0..max in case the input is invalid.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PercentToInt",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "percentage",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "max",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "realpercent",
            },
            "type": "real",
            "value": BinaryOp {
              "left": BinaryOp {
                "left": Name {
                  "value": "percentage",
                },
                "operator": "*",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "max",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "I2R",
                  },
                },
              },
              "operator": "*",
              "right": 0.01,
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "result",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "realpercent",
                  },
                ],
              },
              "name": Name {
                "value": "MathRound",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "result",
                  },
                  "operator": "<",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "result",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "max",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "result",
                      },
                      "value": Name {
                        "value": "max",
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "result",
                  },
                  "value": 0,
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "result",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PercentTo255",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "percentage",
            },
            "type": "real",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "percentage",
                    },
                    255,
                  ],
                },
                "name": Name {
                  "value": "PercentToInt",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetTimeOfDay",
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "GAME_STATE_TIME_OF_DAY",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetFloatGameState",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTimeOfDay",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whatTime",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "GAME_STATE_TIME_OF_DAY",
                },
                Name {
                  "value": "whatTime",
                },
              ],
            },
            "name": Name {
              "value": "SetFloatGameState",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTimeOfDayScalePercentBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "scalePercent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                BinaryOp {
                  "left": Name {
                    "value": "scalePercent",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetTimeOfDayScale",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetTimeOfDayScalePercentBJ",
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "name": Name {
                    "value": "GetTimeOfDayScale",
                  },
                },
                "operator": "*",
                "right": 100,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlaySound",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundName",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "soundName",
                  },
                  false,
                  false,
                  true,
                  12700,
                  12700,
                  "",
                ],
              },
              "name": Name {
                "value": "CreateSound",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
              ],
            },
            "name": Name {
              "value": "StartSound",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
              ],
            },
            "name": Name {
              "value": "KillSoundWhenDone",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CompareLocationsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "A",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "B",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "A",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  "operator": "==",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "B",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                },
                "operator": "and",
                "right": BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "A",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  "operator": "==",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "B",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CompareRectsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "A",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "B",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": BinaryOp {
                  "left": BinaryOp {
                    "left": BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "A",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMinX",
                        },
                      },
                      "operator": "==",
                      "right": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "B",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMinX",
                        },
                      },
                    },
                    "operator": "and",
                    "right": BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "A",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMinY",
                        },
                      },
                      "operator": "==",
                      "right": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "B",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetRectMinY",
                        },
                      },
                    },
                  },
                  "operator": "and",
                  "right": BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "A",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetRectMaxX",
                      },
                    },
                    "operator": "==",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "B",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetRectMaxX",
                      },
                    },
                  },
                },
                "operator": "and",
                "right": BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "A",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRectMaxY",
                    },
                  },
                  "operator": "==",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "B",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRectMaxY",
                    },
                  },
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns a square rect that exactly encompasses the specified circle.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRectFromCircleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "center",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "rect",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "centerX",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "center",
                  },
                ],
              },
              "name": Name {
                "value": "GetLocationX",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "centerY",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "center",
                  },
                ],
              },
              "name": Name {
                "value": "GetLocationY",
              },
            },
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "centerX",
                      },
                      "operator": "-",
                      "right": Name {
                        "value": "radius",
                      },
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "centerY",
                      },
                      "operator": "-",
                      "right": Name {
                        "value": "radius",
                      },
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "centerX",
                      },
                      "operator": "+",
                      "right": Name {
                        "value": "radius",
                      },
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "centerY",
                      },
                      "operator": "+",
                      "right": Name {
                        "value": "radius",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Rect",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Camera Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetCurrentCameraSetup",
      },
      "returns": Name {
        "value": "camerasetup",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "theCam",
            },
            "type": Name {
              "value": "camerasetup",
            },
            "value": Call {
              "name": Name {
                "value": "CreateCameraSetup",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "duration",
            },
            "type": "real",
            "value": 0,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_TARGET_DISTANCE",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "CAMERA_FIELD_TARGET_DISTANCE",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetCameraField",
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_FARZ",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "CAMERA_FIELD_FARZ",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetCameraField",
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_ZOFFSET",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "CAMERA_FIELD_ZOFFSET",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetCameraField",
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_ANGLE_OF_ATTACK",
                },
                BinaryOp {
                  "left": Name {
                    "value": "bj_RADTODEG",
                  },
                  "operator": "*",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "CAMERA_FIELD_ANGLE_OF_ATTACK",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetCameraField",
                    },
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_FIELD_OF_VIEW",
                },
                BinaryOp {
                  "left": Name {
                    "value": "bj_RADTODEG",
                  },
                  "operator": "*",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "CAMERA_FIELD_FIELD_OF_VIEW",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetCameraField",
                    },
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_ROLL",
                },
                BinaryOp {
                  "left": Name {
                    "value": "bj_RADTODEG",
                  },
                  "operator": "*",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "CAMERA_FIELD_ROLL",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetCameraField",
                    },
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_ROTATION",
                },
                BinaryOp {
                  "left": Name {
                    "value": "bj_RADTODEG",
                  },
                  "operator": "*",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "CAMERA_FIELD_ROTATION",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetCameraField",
                    },
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_LOCAL_PITCH",
                },
                BinaryOp {
                  "left": Name {
                    "value": "bj_RADTODEG",
                  },
                  "operator": "*",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "CAMERA_FIELD_LOCAL_PITCH",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetCameraField",
                    },
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_LOCAL_YAW",
                },
                BinaryOp {
                  "left": Name {
                    "value": "bj_RADTODEG",
                  },
                  "operator": "*",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "CAMERA_FIELD_LOCAL_YAW",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetCameraField",
                    },
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Name {
                  "value": "CAMERA_FIELD_LOCAL_ROLL",
                },
                BinaryOp {
                  "left": Name {
                    "value": "bj_RADTODEG",
                  },
                  "operator": "*",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "CAMERA_FIELD_LOCAL_ROLL",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetCameraField",
                    },
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetField",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "theCam",
                },
                Call {
                  "name": Name {
                    "value": "GetCameraTargetPositionX",
                  },
                },
                Call {
                  "name": Name {
                    "value": "GetCameraTargetPositionY",
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetupSetDestPosition",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "theCam",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraSetupApplyForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "doPan",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichSetup",
            },
            "type": Name {
              "value": "camerasetup",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichSetup",
                      },
                      Name {
                        "value": "doPan",
                      },
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CameraSetupApplyForceDuration",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraSetupApplyForPlayerSmooth",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "doPan",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichSetup",
            },
            "type": Name {
              "value": "camerasetup",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "forcedDuration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "easeInDuration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "easeOutDuration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "smoothFactor",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichSetup",
                      },
                      Name {
                        "value": "doPan",
                      },
                      Name {
                        "value": "forcedDuration",
                      },
                      Name {
                        "value": "easeInDuration",
                      },
                      Name {
                        "value": "easeOutDuration",
                      },
                      Name {
                        "value": "smoothFactor",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "BlzCameraSetupApplyForceDurationSmooth",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraSetupGetFieldSwap",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "camerafield",
            },
          },
          Param {
            "name": Name {
              "value": "whichSetup",
            },
            "type": Name {
              "value": "camerasetup",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichSetup",
                    },
                    Name {
                      "value": "whichField",
                    },
                  ],
                },
                "name": Name {
                  "value": "CameraSetupGetField",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraFieldForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "camerafield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichField",
                      },
                      Name {
                        "value": "value",
                      },
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraField",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraTargetControllerNoZForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "xoffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "yoffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "inheritOrientation",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      Name {
                        "value": "xoffset",
                      },
                      Name {
                        "value": "yoffset",
                      },
                      Name {
                        "value": "inheritOrientation",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraTargetController",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraPositionForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "x",
                      },
                      Name {
                        "value": "y",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraPosition",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraPositionLocForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraPosition",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RotateCameraAroundLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "degrees",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "bj_DEGTORAD",
                        },
                        "operator": "*",
                        "right": Name {
                          "value": "degrees",
                        },
                      },
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraRotateMode",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PanCameraToForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "x",
                      },
                      Name {
                        "value": "y",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PanCameraTo",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PanCameraToLocForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PanCameraTo",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PanCameraToTimedForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "x",
                      },
                      Name {
                        "value": "y",
                      },
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PanCameraToTimed",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PanCameraToTimedLocForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PanCameraToTimed",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PanCameraToTimedLocWithZForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "zOffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                      Name {
                        "value": "zOffset",
                      },
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PanCameraToTimedWithZ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SmartCameraPanBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "dist",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "cameraLoc",
            },
            "type": Name {
              "value": "location",
            },
            "value": Call {
              "name": Name {
                "value": "GetCameraTargetPositionLoc",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "dist",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                        Name {
                          "value": "cameraLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "DistanceBetweenPoints",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "dist",
                        },
                        "operator": ">=",
                        "right": Name {
                          "value": "bj_SMARTPAN_TRESHOLD_SNAP",
                        },
                      },
                    ],
                  },
                  "elses": Array [
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "dist",
                            },
                            "operator": ">=",
                            "right": Name {
                              "value": "bj_SMARTPAN_TRESHOLD_PAN",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Comment {
                            "value": " If the user is moderately close, pan the camera.",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "loc",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetLocationX",
                                  },
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "loc",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetLocationY",
                                  },
                                },
                                Name {
                                  "value": "duration",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "PanCameraToTimed",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Comment {
                            "value": " User is close enough, so don't touch the camera.",
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " If the user is too far away, snap the camera.",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "loc",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetLocationX",
                              },
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "loc",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetLocationY",
                              },
                            },
                            0,
                          ],
                        },
                        "name": Name {
                          "value": "PanCameraToTimed",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "cameraLoc",
                },
              ],
            },
            "name": Name {
              "value": "RemoveLocation",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCinematicCameraForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "cameraModelFile",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "cameraModelFile",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCinematicCamera",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ResetToGameCameraForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ResetToGameCamera",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraSetSourceNoiseForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "magnitude",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "velocity",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "magnitude",
                      },
                      Name {
                        "value": "velocity",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CameraSetSourceNoise",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraSetTargetNoiseForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "magnitude",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "velocity",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "magnitude",
                      },
                      Name {
                        "value": "velocity",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CameraSetTargetNoise",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraSetEQNoiseForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "magnitude",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "richter",
            },
            "type": "real",
            "value": Name {
              "value": "magnitude",
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "richter",
                  },
                  "operator": ">",
                  "right": 5,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "richter",
                  },
                  "value": 5,
                },
              ],
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "richter",
                  },
                  "operator": "<",
                  "right": 2,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "richter",
                  },
                  "value": 2,
                },
              ],
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "magnitude",
                        },
                        "operator": "*",
                        "right": 2,
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "magnitude",
                        },
                        "operator": "*",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              10,
                              Name {
                                "value": "richter",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "Pow",
                          },
                        },
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "CameraSetTargetNoiseEx",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "magnitude",
                        },
                        "operator": "*",
                        "right": 2,
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "magnitude",
                        },
                        "operator": "*",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              10,
                              Name {
                                "value": "richter",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "Pow",
                          },
                        },
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "CameraSetSourceNoiseEx",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraClearNoiseForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      0,
                      0,
                    ],
                  },
                  "name": Name {
                    "value": "CameraSetSourceNoise",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      0,
                      0,
                    ],
                  },
                  "name": Name {
                    "value": "CameraSetTargetNoise",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Query the current camera bounds.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetCurrentCameraBoundsMapRectBJ",
      },
      "returns": Name {
        "value": "rect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "name": Name {
                        "value": "GetCameraBoundMinX",
                      },
                    },
                    Call {
                      "name": Name {
                        "value": "GetCameraBoundMinY",
                      },
                    },
                    Call {
                      "name": Name {
                        "value": "GetCameraBoundMaxX",
                      },
                    },
                    Call {
                      "name": Name {
                        "value": "GetCameraBoundMaxY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Rect",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Query the initial camera bounds, as defined at map init.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetCameraBoundsMapRect",
      },
      "returns": Name {
        "value": "rect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_mapInitialCameraBounds",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Query the playable map area, as defined at map init.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayableMapRect",
      },
      "returns": Name {
        "value": "rect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_mapInitialPlayableArea",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Query the entire map area, as defined at map init.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetEntireMapRect",
      },
      "returns": Name {
        "value": "rect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetWorldBounds",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraBoundsToRect",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "minX",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "r",
                  },
                ],
              },
              "name": Name {
                "value": "GetRectMinX",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "minY",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "r",
                  },
                ],
              },
              "name": Name {
                "value": "GetRectMinY",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "maxX",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "r",
                  },
                ],
              },
              "name": Name {
                "value": "GetRectMaxX",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "maxY",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "r",
                  },
                ],
              },
              "name": Name {
                "value": "GetRectMaxY",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "minX",
                },
                Name {
                  "value": "minY",
                },
                Name {
                  "value": "minX",
                },
                Name {
                  "value": "maxY",
                },
                Name {
                  "value": "maxX",
                },
                Name {
                  "value": "maxY",
                },
                Name {
                  "value": "maxX",
                },
                Name {
                  "value": "minY",
                },
              ],
            },
            "name": Name {
              "value": "SetCameraBounds",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraBoundsToRectForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraBoundsToRect",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AdjustCameraBoundsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "adjustMethod",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "dxWest",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "dxEast",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "dyNorth",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "dySouth",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "minX",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "minY",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "maxX",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "maxY",
            },
            "type": "real",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "scale",
            },
            "type": "real",
            "value": 0,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "adjustMethod",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CAMERABOUNDS_ADJUST_ADD",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "adjustMethod",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMERABOUNDS_ADJUST_SUB",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "scale",
                      },
                      "value": UnaryOp {
                        "expr": 1,
                        "operator": "-",
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized adjustment method - ignore the request.",
                    },
                    Return {
                      "data": Array [
                        undefined,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "scale",
                  },
                  "value": 1,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Adjust the actual camera values",
          },
          JASSSet {
            "name": Name {
              "value": "minX",
            },
            "value": BinaryOp {
              "left": Call {
                "name": Name {
                  "value": "GetCameraBoundMinX",
                },
              },
              "operator": "-",
              "right": BinaryOp {
                "left": Name {
                  "value": "scale",
                },
                "operator": "*",
                "right": Name {
                  "value": "dxWest",
                },
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "maxX",
            },
            "value": BinaryOp {
              "left": Call {
                "name": Name {
                  "value": "GetCameraBoundMaxX",
                },
              },
              "operator": "+",
              "right": BinaryOp {
                "left": Name {
                  "value": "scale",
                },
                "operator": "*",
                "right": Name {
                  "value": "dxEast",
                },
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "minY",
            },
            "value": BinaryOp {
              "left": Call {
                "name": Name {
                  "value": "GetCameraBoundMinY",
                },
              },
              "operator": "-",
              "right": BinaryOp {
                "left": Name {
                  "value": "scale",
                },
                "operator": "*",
                "right": Name {
                  "value": "dySouth",
                },
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "maxY",
            },
            "value": BinaryOp {
              "left": Call {
                "name": Name {
                  "value": "GetCameraBoundMaxY",
                },
              },
              "operator": "+",
              "right": BinaryOp {
                "left": Name {
                  "value": "scale",
                },
                "operator": "*",
                "right": Name {
                  "value": "dyNorth",
                },
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Make sure the camera bounds are still valid.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "maxX",
                  },
                  "operator": "<",
                  "right": Name {
                    "value": "minX",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "minX",
                  },
                  "value": BinaryOp {
                    "left": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "minX",
                          },
                          "operator": "+",
                          "right": Name {
                            "value": "maxX",
                          },
                        },
                      ],
                    },
                    "operator": "*",
                    "right": 0.5,
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "maxX",
                  },
                  "value": Name {
                    "value": "minX",
                  },
                },
              ],
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "maxY",
                  },
                  "operator": "<",
                  "right": Name {
                    "value": "minY",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "minY",
                  },
                  "value": BinaryOp {
                    "left": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "minY",
                          },
                          "operator": "+",
                          "right": Name {
                            "value": "maxY",
                          },
                        },
                      ],
                    },
                    "operator": "*",
                    "right": 0.5,
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "maxY",
                  },
                  "value": Name {
                    "value": "minY",
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Apply the new camera values.",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "minX",
                },
                Name {
                  "value": "minY",
                },
                Name {
                  "value": "minX",
                },
                Name {
                  "value": "maxY",
                },
                Name {
                  "value": "maxX",
                },
                Name {
                  "value": "maxY",
                },
                Name {
                  "value": "maxX",
                },
                Name {
                  "value": "minY",
                },
              ],
            },
            "name": Name {
              "value": "SetCameraBounds",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AdjustCameraBoundsForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "adjustMethod",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "dxWest",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "dxEast",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "dyNorth",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "dySouth",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "adjustMethod",
                      },
                      Name {
                        "value": "dxWest",
                      },
                      Name {
                        "value": "dxEast",
                      },
                      Name {
                        "value": "dyNorth",
                      },
                      Name {
                        "value": "dySouth",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "AdjustCameraBoundsBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraQuickPositionForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "x",
                      },
                      Name {
                        "value": "y",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraQuickPosition",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraQuickPositionLocForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraQuickPosition",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraQuickPositionLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetCameraQuickPosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StopCameraForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "name": Name {
                    "value": "StopCamera",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCameraOrientControllerForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "xoffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "yoffset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      Name {
                        "value": "xoffset",
                      },
                      Name {
                        "value": "yoffset",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraOrientController",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraSetSmoothingFactorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "factor",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "factor",
                },
              ],
            },
            "name": Name {
              "value": "CameraSetSmoothingFactor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CameraResetSmoothingFactorBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                0,
              ],
            },
            "name": Name {
              "value": "CameraSetSmoothingFactor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Text Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DisplayTextToForce",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "toForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      0,
                      0,
                      Name {
                        "value": "message",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DisplayTextToPlayer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DisplayTimedTextToForce",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "toForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      0,
                      0,
                      Name {
                        "value": "duration",
                      },
                      Name {
                        "value": "message",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DisplayTimedTextToPlayer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ClearTextMessagesBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "toForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "name": Name {
                    "value": "ClearTextMessages",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " The parameters for the API Substring function are unintuitive, so this",
    },
    Comment {
      "value": " merely performs a translation for the starting index.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SubStringBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "source",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "start",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "end",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "source",
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "start",
                      },
                      "operator": "-",
                      "right": 1,
                    },
                    Name {
                      "value": "end",
                    },
                  ],
                },
                "name": Name {
                  "value": "SubString",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetHandleIdBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "h",
            },
            "type": "handle",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "h",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetHandleId",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StringHashBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "s",
            },
            "type": "string",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "s",
                    },
                  ],
                },
                "name": Name {
                  "value": "StringHash",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Event Registration Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterTimerEventPeriodic",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "timeout",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "timeout",
                    },
                    true,
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterTimerEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterTimerEventSingle",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "timeout",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "timeout",
                    },
                    false,
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterTimerEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterTimerExpireEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "timer",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "t",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterTimerExpireEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerUnitEventSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichEvent",
            },
            "type": Name {
              "value": "playerunitevent",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "whichEvent",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterPlayerUnitEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterAnyUnitEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichEvent",
            },
            "type": Name {
              "value": "playerunitevent",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "trig",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      Name {
                        "value": "whichEvent",
                      },
                      null,
                    ],
                  },
                  "name": Name {
                    "value": "TriggerRegisterPlayerUnitEvent",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYER_SLOTS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerSelectionEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "selected",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "selected",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "trig",
                              },
                              Name {
                                "value": "whichPlayer",
                              },
                              Name {
                                "value": "EVENT_PLAYER_UNIT_DESELECTED",
                              },
                              null,
                            ],
                          },
                          "name": Name {
                            "value": "TriggerRegisterPlayerUnitEvent",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "trig",
                          },
                          Name {
                            "value": "whichPlayer",
                          },
                          Name {
                            "value": "EVENT_PLAYER_UNIT_SELECTED",
                          },
                          null,
                        ],
                      },
                      "name": Name {
                        "value": "TriggerRegisterPlayerUnitEvent",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerKeyEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "keType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "keKey",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "keType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_KEYEVENTTYPE_DEPRESS",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "keType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_KEYEVENTTYPE_RELEASE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Release event - find out what key",
                    },
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "keKey",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_KEYEVENTKEY_LEFT",
                            },
                          },
                        ],
                      },
                      "elses": Array [
                        ElseIf {
                          "condition": Parens {
                            "data": Array [
                              BinaryOp {
                                "left": Name {
                                  "value": "keKey",
                                },
                                "operator": "==",
                                "right": Name {
                                  "value": "bj_KEYEVENTKEY_RIGHT",
                                },
                              },
                            ],
                          },
                          "statements": Statements {
                            "body": Array [
                              Return {
                                "data": Array [
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "trig",
                                        },
                                        Name {
                                          "value": "whichPlayer",
                                        },
                                        Name {
                                          "value": "EVENT_PLAYER_ARROW_RIGHT_UP",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "TriggerRegisterPlayerEvent",
                                    },
                                  },
                                ],
                              },
                            ],
                          },
                        },
                        ElseIf {
                          "condition": Parens {
                            "data": Array [
                              BinaryOp {
                                "left": Name {
                                  "value": "keKey",
                                },
                                "operator": "==",
                                "right": Name {
                                  "value": "bj_KEYEVENTKEY_DOWN",
                                },
                              },
                            ],
                          },
                          "statements": Statements {
                            "body": Array [
                              Return {
                                "data": Array [
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "trig",
                                        },
                                        Name {
                                          "value": "whichPlayer",
                                        },
                                        Name {
                                          "value": "EVENT_PLAYER_ARROW_DOWN_UP",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "TriggerRegisterPlayerEvent",
                                    },
                                  },
                                ],
                              },
                            ],
                          },
                        },
                        ElseIf {
                          "condition": Parens {
                            "data": Array [
                              BinaryOp {
                                "left": Name {
                                  "value": "keKey",
                                },
                                "operator": "==",
                                "right": Name {
                                  "value": "bj_KEYEVENTKEY_UP",
                                },
                              },
                            ],
                          },
                          "statements": Statements {
                            "body": Array [
                              Return {
                                "data": Array [
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "trig",
                                        },
                                        Name {
                                          "value": "whichPlayer",
                                        },
                                        Name {
                                          "value": "EVENT_PLAYER_ARROW_UP_UP",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "TriggerRegisterPlayerEvent",
                                    },
                                  },
                                ],
                              },
                            ],
                          },
                        },
                        Else {
                          "statements": Statements {
                            "body": Array [
                              Comment {
                                "value": " Unrecognized key - ignore the request and return failure.",
                              },
                              Return {
                                "data": Array [
                                  null,
                                ],
                              },
                            ],
                          },
                        },
                      ],
                      "then": Statements {
                        "body": Array [
                          Return {
                            "data": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "trig",
                                    },
                                    Name {
                                      "value": "whichPlayer",
                                    },
                                    Name {
                                      "value": "EVENT_PLAYER_ARROW_LEFT_UP",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "TriggerRegisterPlayerEvent",
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized type - ignore the request and return failure.",
                    },
                    Return {
                      "data": Array [
                        null,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Depress event - find out what key",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "keKey",
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "bj_KEYEVENTKEY_LEFT",
                        },
                      },
                    ],
                  },
                  "elses": Array [
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "keKey",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_KEYEVENTKEY_RIGHT",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Return {
                            "data": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "trig",
                                    },
                                    Name {
                                      "value": "whichPlayer",
                                    },
                                    Name {
                                      "value": "EVENT_PLAYER_ARROW_RIGHT_DOWN",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "TriggerRegisterPlayerEvent",
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "keKey",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_KEYEVENTKEY_DOWN",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Return {
                            "data": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "trig",
                                    },
                                    Name {
                                      "value": "whichPlayer",
                                    },
                                    Name {
                                      "value": "EVENT_PLAYER_ARROW_DOWN_DOWN",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "TriggerRegisterPlayerEvent",
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "keKey",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_KEYEVENTKEY_UP",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Return {
                            "data": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "trig",
                                    },
                                    Name {
                                      "value": "whichPlayer",
                                    },
                                    Name {
                                      "value": "EVENT_PLAYER_ARROW_UP_DOWN",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "TriggerRegisterPlayerEvent",
                                },
                              },
                            ],
                          },
                        ],
                      },
                    },
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Comment {
                            "value": " Unrecognized key - ignore the request and return failure.",
                          },
                          Return {
                            "data": Array [
                              null,
                            ],
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Return {
                        "data": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "trig",
                                },
                                Name {
                                  "value": "whichPlayer",
                                },
                                Name {
                                  "value": "EVENT_PLAYER_ARROW_LEFT_DOWN",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "TriggerRegisterPlayerEvent",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerMouseEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "meType",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "meType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_MOUSEEVENTTYPE_DOWN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "meType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MOUSEEVENTTYPE_UP",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Mouse up event",
                    },
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "trig",
                              },
                              Name {
                                "value": "whichPlayer",
                              },
                              Name {
                                "value": "EVENT_PLAYER_MOUSE_UP",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "TriggerRegisterPlayerEvent",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "meType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MOUSEEVENTTYPE_MOVE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Mouse move event",
                    },
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "trig",
                              },
                              Name {
                                "value": "whichPlayer",
                              },
                              Name {
                                "value": "EVENT_PLAYER_MOUSE_MOVE",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "TriggerRegisterPlayerEvent",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized type - ignore the request and return failure.",
                    },
                    Return {
                      "data": Array [
                        null,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Mouse down event",
                },
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "trig",
                          },
                          Name {
                            "value": "whichPlayer",
                          },
                          Name {
                            "value": "EVENT_PLAYER_MOUSE_DOWN",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "TriggerRegisterPlayerEvent",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerEventVictory",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "EVENT_PLAYER_VICTORY",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterPlayerEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerEventDefeat",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "EVENT_PLAYER_DEFEAT",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterPlayerEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerEventLeave",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "EVENT_PLAYER_LEAVE",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterPlayerEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerEventAllianceChanged",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "EVENT_PLAYER_ALLIANCE_CHANGED",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterPlayerEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterPlayerEventEndCinematic",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "EVENT_PLAYER_END_CINEMATIC",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterPlayerEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterGameStateEventTimeOfDay",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "opcode",
            },
            "type": Name {
              "value": "limitop",
            },
          },
          Param {
            "name": Name {
              "value": "limitval",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "GAME_STATE_TIME_OF_DAY",
                    },
                    Name {
                      "value": "opcode",
                    },
                    Name {
                      "value": "limitval",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterGameStateEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterEnterRegionSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichRegion",
            },
            "type": Name {
              "value": "region",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichRegion",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterEnterRegion",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterLeaveRegionSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichRegion",
            },
            "type": Name {
              "value": "region",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichRegion",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterLeaveRegion",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterEnterRectSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "rectRegion",
            },
            "type": Name {
              "value": "region",
            },
            "value": Call {
              "name": Name {
                "value": "CreateRegion",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "rectRegion",
                },
                Name {
                  "value": "r",
                },
              ],
            },
            "name": Name {
              "value": "RegionAddRect",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "rectRegion",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterEnterRegion",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterLeaveRectSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "rectRegion",
            },
            "type": Name {
              "value": "region",
            },
            "value": Call {
              "name": Name {
                "value": "CreateRegion",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "rectRegion",
                },
                Name {
                  "value": "r",
                },
              ],
            },
            "name": Name {
              "value": "RegionAddRect",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "rectRegion",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterLeaveRegion",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterDistanceBetweenUnits",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "condition",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Param {
            "name": Name {
              "value": "range",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "range",
                    },
                    Name {
                      "value": "condition",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterUnitInRange",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterUnitInRangeSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "range",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "range",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterUnitInRange",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterUnitLifeEvent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "opcode",
            },
            "type": Name {
              "value": "limitop",
            },
          },
          Param {
            "name": Name {
              "value": "limitval",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "UNIT_STATE_LIFE",
                    },
                    Name {
                      "value": "opcode",
                    },
                    Name {
                      "value": "limitval",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterUnitStateEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterUnitManaEvent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "opcode",
            },
            "type": Name {
              "value": "limitop",
            },
          },
          Param {
            "name": Name {
              "value": "limitval",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "UNIT_STATE_MANA",
                    },
                    Name {
                      "value": "opcode",
                    },
                    Name {
                      "value": "limitval",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterUnitStateEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterDialogEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "whichDialog",
            },
            "type": Name {
              "value": "dialog",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "whichDialog",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterDialogEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterShowSkillEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "EVENT_GAME_SHOW_SKILL",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterGameEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterBuildSubmenuEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "EVENT_GAME_BUILD_SUBMENU",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterGameEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterBuildCommandEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                FourCC {
                  "value": "ANbu",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "unitId",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitId2String",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterCommandEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                FourCC {
                  "value": "AHbu",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "unitId",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitId2String",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterCommandEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                FourCC {
                  "value": "AEbu",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "unitId",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitId2String",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterCommandEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                FourCC {
                  "value": "AObu",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "unitId",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitId2String",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterCommandEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                FourCC {
                  "value": "AUbu",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "unitId",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitId2String",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterCommandEvent",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    FourCC {
                      "value": "AGbu",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "unitId",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "UnitId2String",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterCommandEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterTrainCommandEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    FourCC {
                      "value": "Aque",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "unitId",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "UnitId2String",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterCommandEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterUpgradeCommandEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "techId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "techId",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterUpgradeCommandEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterCommonCommandEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    0,
                    Name {
                      "value": "order",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterCommandEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterGameLoadedEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "EVENT_GAME_LOADED",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterGameEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterGameSavedEventBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "trig",
                    },
                    Name {
                      "value": "EVENT_GAME_SAVE",
                    },
                  ],
                },
                "name": Name {
                  "value": "TriggerRegisterGameEvent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RegisterDestDeathInRegionEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_destInRegionDiesCount",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_destInRegionDiesCount",
              },
              "operator": "+",
              "right": 1,
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_destInRegionDiesCount",
                  },
                  "operator": "<=",
                  "right": Name {
                    "value": "bj_MAX_DEST_IN_REGION_EVENTS",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_destInRegionDiesTrig",
                      },
                      Call {
                        "name": Name {
                          "value": "GetEnumDestructable",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerRegisterDeathEvent",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerRegisterDestDeathInRegionEvent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_destInRegionDiesTrig",
            },
            "value": Name {
              "value": "trig",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_destInRegionDiesCount",
            },
            "value": 0,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
                null,
                FuncRef {
                  "data": Name {
                    "value": "RegisterDestDeathInRegionEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "EnumDestructablesInRect",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Environment Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddWeatherEffectSaveLast",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "effectID",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "weathereffect",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedWeatherEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "where",
                  },
                  Name {
                    "value": "effectID",
                  },
                ],
              },
              "name": Name {
                "value": "AddWeatherEffect",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedWeatherEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedWeatherEffect",
      },
      "returns": Name {
        "value": "weathereffect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedWeatherEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RemoveWeatherEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichWeatherEffect",
            },
            "type": Name {
              "value": "weathereffect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichWeatherEffect",
                },
              ],
            },
            "name": Name {
              "value": "RemoveWeatherEffect",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TerrainDeformationCraterBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "permanent",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "depth",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "terraindeformation",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedTerrainDeformation",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "radius",
                  },
                  Name {
                    "value": "depth",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "duration",
                          },
                          "operator": "*",
                          "right": 1000,
                        },
                      ],
                    },
                    "name": Name {
                      "value": "R2I",
                    },
                  },
                  Name {
                    "value": "permanent",
                  },
                ],
              },
              "name": Name {
                "value": "TerrainDeformCrater",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTerrainDeformation",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TerrainDeformationRippleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "limitNeg",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "startRadius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "endRadius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "depth",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "wavePeriod",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "waveWidth",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "terraindeformation",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "spaceWave",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "timeWave",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "radiusRatio",
            },
            "type": "real",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": BinaryOp {
                    "left": BinaryOp {
                      "left": Name {
                        "value": "endRadius",
                      },
                      "operator": "<=",
                      "right": 0,
                    },
                    "operator": "or",
                    "right": BinaryOp {
                      "left": Name {
                        "value": "waveWidth",
                      },
                      "operator": "<=",
                      "right": 0,
                    },
                  },
                  "operator": "or",
                  "right": BinaryOp {
                    "left": Name {
                      "value": "wavePeriod",
                    },
                    "operator": "<=",
                    "right": 0,
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    null,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "timeWave",
            },
            "value": BinaryOp {
              "left": BinaryOp {
                "left": 2,
                "operator": "*",
                "right": Name {
                  "value": "duration",
                },
              },
              "operator": "/",
              "right": Name {
                "value": "wavePeriod",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "spaceWave",
            },
            "value": BinaryOp {
              "left": BinaryOp {
                "left": 2,
                "operator": "*",
                "right": Name {
                  "value": "endRadius",
                },
              },
              "operator": "/",
              "right": Name {
                "value": "waveWidth",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "radiusRatio",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "startRadius",
              },
              "operator": "/",
              "right": Name {
                "value": "endRadius",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedTerrainDeformation",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "endRadius",
                  },
                  Name {
                    "value": "depth",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "duration",
                          },
                          "operator": "*",
                          "right": 1000,
                        },
                      ],
                    },
                    "name": Name {
                      "value": "R2I",
                    },
                  },
                  1,
                  Name {
                    "value": "spaceWave",
                  },
                  Name {
                    "value": "timeWave",
                  },
                  Name {
                    "value": "radiusRatio",
                  },
                  Name {
                    "value": "limitNeg",
                  },
                ],
              },
              "name": Name {
                "value": "TerrainDeformRipple",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTerrainDeformation",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TerrainDeformationWaveBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "source",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "target",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "depth",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "trailDelay",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "terraindeformation",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "distance",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "dirX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "dirY",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "speed",
            },
            "type": "real",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "distance",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "source",
                  },
                  Name {
                    "value": "target",
                  },
                ],
              },
              "name": Name {
                "value": "DistanceBetweenPoints",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": BinaryOp {
                    "left": Name {
                      "value": "distance",
                    },
                    "operator": "==",
                    "right": 0,
                  },
                  "operator": "or",
                  "right": BinaryOp {
                    "left": Name {
                      "value": "duration",
                    },
                    "operator": "<=",
                    "right": 0,
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    null,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "dirX",
            },
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "target",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    "operator": "-",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "source",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                  },
                ],
              },
              "operator": "/",
              "right": Name {
                "value": "distance",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "dirY",
            },
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "target",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                    "operator": "-",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "source",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                  },
                ],
              },
              "operator": "/",
              "right": Name {
                "value": "distance",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "speed",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "distance",
              },
              "operator": "/",
              "right": Name {
                "value": "duration",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedTerrainDeformation",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "source",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "source",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "dirX",
                  },
                  Name {
                    "value": "dirY",
                  },
                  Name {
                    "value": "distance",
                  },
                  Name {
                    "value": "speed",
                  },
                  Name {
                    "value": "radius",
                  },
                  Name {
                    "value": "depth",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "trailDelay",
                          },
                          "operator": "*",
                          "right": 1000,
                        },
                      ],
                    },
                    "name": Name {
                      "value": "R2I",
                    },
                  },
                  1,
                ],
              },
              "name": Name {
                "value": "TerrainDeformWave",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTerrainDeformation",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TerrainDeformationRandomBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "minDelta",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "maxDelta",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "updateInterval",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "terraindeformation",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedTerrainDeformation",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "radius",
                  },
                  Name {
                    "value": "minDelta",
                  },
                  Name {
                    "value": "maxDelta",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "duration",
                          },
                          "operator": "*",
                          "right": 1000,
                        },
                      ],
                    },
                    "name": Name {
                      "value": "R2I",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "updateInterval",
                          },
                          "operator": "*",
                          "right": 1000,
                        },
                      ],
                    },
                    "name": Name {
                      "value": "R2I",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "TerrainDeformRandom",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTerrainDeformation",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TerrainDeformationStopBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "deformation",
            },
            "type": Name {
              "value": "terraindeformation",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "deformation",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "duration",
                        },
                        "operator": "*",
                        "right": 1000,
                      },
                    ],
                  },
                  "name": Name {
                    "value": "R2I",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TerrainDeformStop",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedTerrainDeformation",
      },
      "returns": Name {
        "value": "terraindeformation",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTerrainDeformation",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddLightningLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "codeName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "where1",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "where2",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": Name {
        "value": "lightning",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedLightning",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "codeName",
                  },
                  true,
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where1",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where1",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where1",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationZ",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where2",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where2",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where2",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationZ",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "AddLightningEx",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedLightning",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyLightningBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichBolt",
            },
            "type": Name {
              "value": "lightning",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichBolt",
                    },
                  ],
                },
                "name": Name {
                  "value": "DestroyLightning",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MoveLightningLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichBolt",
            },
            "type": Name {
              "value": "lightning",
            },
          },
          Param {
            "name": Name {
              "value": "where1",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "where2",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichBolt",
                    },
                    true,
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where1",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where1",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where1",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationZ",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where2",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where2",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where2",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationZ",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "MoveLightningEx",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLightningColorABJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichBolt",
            },
            "type": Name {
              "value": "lightning",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichBolt",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLightningColorA",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLightningColorRBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichBolt",
            },
            "type": Name {
              "value": "lightning",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichBolt",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLightningColorR",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLightningColorGBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichBolt",
            },
            "type": Name {
              "value": "lightning",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichBolt",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLightningColorG",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLightningColorBBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichBolt",
            },
            "type": Name {
              "value": "lightning",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichBolt",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetLightningColorB",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetLightningColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichBolt",
            },
            "type": Name {
              "value": "lightning",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "g",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "b",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "a",
            },
            "type": "real",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichBolt",
                    },
                    Name {
                      "value": "r",
                    },
                    Name {
                      "value": "g",
                    },
                    Name {
                      "value": "b",
                    },
                    Name {
                      "value": "a",
                    },
                  ],
                },
                "name": Name {
                  "value": "SetLightningColor",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedLightningBJ",
      },
      "returns": Name {
        "value": "lightning",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedLightning",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetAbilityEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilcode",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "effecttype",
            },
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "abilcode",
                    },
                    Name {
                      "value": "t",
                    },
                    Name {
                      "value": "index",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetAbilityEffectById",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetAbilitySoundBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilcode",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "soundtype",
            },
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "abilcode",
                    },
                    Name {
                      "value": "t",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetAbilitySoundById",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetTerrainCliffLevelBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "GetTerrainCliffLevel",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetTerrainTypeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "GetTerrainType",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetTerrainVarianceBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "GetTerrainVariance",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTerrainTypeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "terrainType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "variation",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "area",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "shape",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "where",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "where",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "terrainType",
                },
                Name {
                  "value": "variation",
                },
                Name {
                  "value": "area",
                },
                Name {
                  "value": "shape",
                },
              ],
            },
            "name": Name {
              "value": "SetTerrainType",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsTerrainPathableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "pathingtype",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                    Name {
                      "value": "t",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsTerrainPathable",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTerrainPathableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "pathingtype",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "where",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "where",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "t",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetTerrainPathable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetWaterBaseColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetWaterBaseColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateFogModifierRectSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichFogState",
            },
            "type": Name {
              "value": "fogstate",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "afterUnits",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": Name {
        "value": "fogmodifier",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedFogModifier",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "whichFogState",
                  },
                  Name {
                    "value": "r",
                  },
                  true,
                  Name {
                    "value": "afterUnits",
                  },
                ],
              },
              "name": Name {
                "value": "CreateFogModifierRect",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedFogModifier",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateFogModifierRadiusLocSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichFogState",
            },
            "type": Name {
              "value": "fogstate",
            },
          },
          Param {
            "name": Name {
              "value": "center",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "afterUnits",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": Name {
        "value": "fogmodifier",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedFogModifier",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "whichFogState",
                  },
                  Name {
                    "value": "center",
                  },
                  Name {
                    "value": "radius",
                  },
                  true,
                  Name {
                    "value": "afterUnits",
                  },
                ],
              },
              "name": Name {
                "value": "CreateFogModifierRadiusLoc",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedFogModifier",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Version of CreateFogModifierRect that assumes use of sharedVision and",
    },
    Comment {
      "value": " gives the option of immediately enabling the modifier, so that triggers",
    },
    Comment {
      "value": " can default to modifiers that are immediately enabled.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateFogModifierRectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "enabled",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichFogState",
            },
            "type": Name {
              "value": "fogstate",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "fogmodifier",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedFogModifier",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "whichFogState",
                  },
                  Name {
                    "value": "r",
                  },
                  true,
                  false,
                ],
              },
              "name": Name {
                "value": "CreateFogModifierRect",
              },
            },
          },
          IfThenElse {
            "condition": Name {
              "value": "enabled",
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_lastCreatedFogModifier",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "FogModifierStart",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedFogModifier",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Version of CreateFogModifierRadius that assumes use of sharedVision and",
    },
    Comment {
      "value": " gives the option of immediately enabling the modifier, so that triggers",
    },
    Comment {
      "value": " can default to modifiers that are immediately enabled.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateFogModifierRadiusLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "enabled",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichFogState",
            },
            "type": Name {
              "value": "fogstate",
            },
          },
          Param {
            "name": Name {
              "value": "center",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "fogmodifier",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedFogModifier",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "whichFogState",
                  },
                  Name {
                    "value": "center",
                  },
                  Name {
                    "value": "radius",
                  },
                  true,
                  false,
                ],
              },
              "name": Name {
                "value": "CreateFogModifierRadiusLoc",
              },
            },
          },
          IfThenElse {
            "condition": Name {
              "value": "enabled",
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_lastCreatedFogModifier",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "FogModifierStart",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedFogModifier",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedFogModifier",
      },
      "returns": Name {
        "value": "fogmodifier",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedFogModifier",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FogEnableOn",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "FogEnable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FogEnableOff",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                false,
              ],
            },
            "name": Name {
              "value": "FogEnable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FogMaskEnableOn",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "FogMaskEnable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FogMaskEnableOff",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                false,
              ],
            },
            "name": Name {
              "value": "FogMaskEnable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UseTimeOfDayBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                UnaryOp {
                  "expr": Name {
                    "value": "flag",
                  },
                  "operator": "not",
                },
              ],
            },
            "name": Name {
              "value": "SuspendTimeOfDay",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTerrainFogExBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "style",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "zstart",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "zend",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "density",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "style",
                },
                Name {
                  "value": "zstart",
                },
                Name {
                  "value": "zend",
                },
                Name {
                  "value": "density",
                },
                BinaryOp {
                  "left": Name {
                    "value": "red",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
                BinaryOp {
                  "left": Name {
                    "value": "green",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
                BinaryOp {
                  "left": Name {
                    "value": "blue",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetTerrainFogEx",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ResetTerrainFogBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "ResetTerrainFog",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDoodadAnimationBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "animName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "doodadID",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "center",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "center",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "center",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "radius",
                },
                Name {
                  "value": "doodadID",
                },
                false,
                Name {
                  "value": "animName",
                },
                false,
              ],
            },
            "name": Name {
              "value": "SetDoodadAnimation",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDoodadAnimationRectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "animName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "doodadID",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
                Name {
                  "value": "doodadID",
                },
                Name {
                  "value": "animName",
                },
                false,
              ],
            },
            "name": Name {
              "value": "SetDoodadAnimationRect",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddUnitAnimationPropertiesBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "add",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "animProperties",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "animProperties",
                },
                Name {
                  "value": "add",
                },
              ],
            },
            "name": Name {
              "value": "AddUnitAnimationProperties",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateImageBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "file",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "size",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "zOffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "imageType",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "image",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedImage",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "file",
                  },
                  Name {
                    "value": "size",
                  },
                  Name {
                    "value": "size",
                  },
                  Name {
                    "value": "size",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "zOffset",
                  },
                  0,
                  0,
                  0,
                  Name {
                    "value": "imageType",
                  },
                ],
              },
              "name": Name {
                "value": "CreateImage",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedImage",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowImageBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichImage",
            },
            "type": Name {
              "value": "image",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichImage",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "ShowImage",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetImagePositionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichImage",
            },
            "type": Name {
              "value": "image",
            },
          },
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "zOffset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichImage",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "where",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "where",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "zOffset",
                },
              ],
            },
            "name": Name {
              "value": "SetImagePosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetImageColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichImage",
            },
            "type": Name {
              "value": "image",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "alpha",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichImage",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "alpha",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetImageColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedImage",
      },
      "returns": Name {
        "value": "image",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedImage",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateUbersplatBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "name",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "alpha",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "forcePaused",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "noBirthTime",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": Name {
        "value": "ubersplat",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedUbersplat",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "where",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "name",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "red",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "PercentTo255",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "green",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "PercentTo255",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "blue",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "PercentTo255",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        BinaryOp {
                          "left": 100,
                          "operator": "-",
                          "right": Name {
                            "value": "alpha",
                          },
                        },
                      ],
                    },
                    "name": Name {
                      "value": "PercentTo255",
                    },
                  },
                  Name {
                    "value": "forcePaused",
                  },
                  Name {
                    "value": "noBirthTime",
                  },
                ],
              },
              "name": Name {
                "value": "CreateUbersplat",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedUbersplat",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowUbersplatBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichSplat",
            },
            "type": Name {
              "value": "ubersplat",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichSplat",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "ShowUbersplat",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedUbersplat",
      },
      "returns": Name {
        "value": "ubersplat",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedUbersplat",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedMinimapIcon",
      },
      "returns": Name {
        "value": "minimapicon",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedMinimapIcon",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateMinimapIconOnUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "pingPath",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "fogVisibility",
            },
            "type": Name {
              "value": "fogstate",
            },
          },
        ],
      },
      "returns": Name {
        "value": "minimapicon",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedMinimapIcon",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "red",
                  },
                  Name {
                    "value": "green",
                  },
                  Name {
                    "value": "blue",
                  },
                  Name {
                    "value": "pingPath",
                  },
                  Name {
                    "value": "fogVisibility",
                  },
                ],
              },
              "name": Name {
                "value": "CreateMinimapIconOnUnit",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedMinimapIcon",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateMinimapIconAtLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "pingPath",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "fogVisibility",
            },
            "type": Name {
              "value": "fogstate",
            },
          },
        ],
      },
      "returns": Name {
        "value": "minimapicon",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedMinimapIcon",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "where",
                  },
                  Name {
                    "value": "red",
                  },
                  Name {
                    "value": "green",
                  },
                  Name {
                    "value": "blue",
                  },
                  Name {
                    "value": "pingPath",
                  },
                  Name {
                    "value": "fogVisibility",
                  },
                ],
              },
              "name": Name {
                "value": "CreateMinimapIconAtLoc",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedMinimapIcon",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateMinimapIconBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "pingPath",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "fogVisibility",
            },
            "type": Name {
              "value": "fogstate",
            },
          },
        ],
      },
      "returns": Name {
        "value": "minimapicon",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedMinimapIcon",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "x",
                  },
                  Name {
                    "value": "y",
                  },
                  Name {
                    "value": "red",
                  },
                  Name {
                    "value": "green",
                  },
                  Name {
                    "value": "blue",
                  },
                  Name {
                    "value": "pingPath",
                  },
                  Name {
                    "value": "fogVisibility",
                  },
                ],
              },
              "name": Name {
                "value": "CreateMinimapIcon",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedMinimapIcon",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CampaignMinimapIconUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "style",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "red",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "green",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "blue",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "path",
            },
            "type": "string",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "style",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CAMPPINGSTYLE_PRIMARY",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_PRIMARY_GREEN",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " green",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestObjectivePrimary",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_PRIMARY_RED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " green",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestObjectivePrimary",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_BONUS",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " yellow",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestObjectiveBonus",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_TURNIN",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " yellow",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestTurnIn",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_BOSS",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " red",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestBoss",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_CONTROL_ALLY",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " green",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestControlPoint",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_CONTROL_NEUTRAL",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " white",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestControlPoint",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_CONTROL_ENEMY",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " red",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestControlPoint",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " green",
                },
                JASSSet {
                  "name": Name {
                    "value": "red",
                  },
                  "value": 255,
                },
                JASSSet {
                  "name": Name {
                    "value": "green",
                  },
                  "value": 0,
                },
                JASSSet {
                  "name": Name {
                    "value": "blue",
                  },
                  "value": 0,
                },
                JASSSet {
                  "name": Name {
                    "value": "path",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        "MinimapQuestObjectivePrimary",
                      ],
                    },
                    "name": Name {
                      "value": "SkinManagerGetLocalPath",
                    },
                  },
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "red",
                },
                Name {
                  "value": "green",
                },
                Name {
                  "value": "blue",
                },
                Name {
                  "value": "path",
                },
                Name {
                  "value": "FOG_OF_WAR_MASKED",
                },
              ],
            },
            "name": Name {
              "value": "CreateMinimapIconOnUnitBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedMinimapIcon",
                },
                true,
              ],
            },
            "name": Name {
              "value": "SetMinimapIconOrphanDestroy",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "============================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CampaignMinimapIconLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "style",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "red",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "green",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "blue",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "path",
            },
            "type": "string",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "style",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CAMPPINGSTYLE_PRIMARY",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_PRIMARY_GREEN",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " green (different from the unit version)",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestObjectivePrimary",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_PRIMARY_RED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " green (different from the unit version)",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestObjectivePrimary",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_BONUS",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " yellow",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestObjectiveBonus",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_TURNIN",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " yellow",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestTurnIn",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_BOSS",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " red",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestBoss",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_CONTROL_ALLY",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " green",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestControlPoint",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_CONTROL_NEUTRAL",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " white",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestControlPoint",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPPINGSTYLE_CONTROL_ENEMY",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " red",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "red",
                      },
                      "value": 255,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "green",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "blue",
                      },
                      "value": 0,
                    },
                    JASSSet {
                      "name": Name {
                        "value": "path",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "MinimapQuestControlPoint",
                          ],
                        },
                        "name": Name {
                          "value": "SkinManagerGetLocalPath",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " green (different from the unit version)",
                },
                JASSSet {
                  "name": Name {
                    "value": "red",
                  },
                  "value": 0,
                },
                JASSSet {
                  "name": Name {
                    "value": "green",
                  },
                  "value": 255,
                },
                JASSSet {
                  "name": Name {
                    "value": "blue",
                  },
                  "value": 0,
                },
                JASSSet {
                  "name": Name {
                    "value": "path",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        "MinimapQuestObjectivePrimary",
                      ],
                    },
                    "name": Name {
                      "value": "SkinManagerGetLocalPath",
                    },
                  },
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "where",
                },
                Name {
                  "value": "red",
                },
                Name {
                  "value": "green",
                },
                Name {
                  "value": "blue",
                },
                Name {
                  "value": "path",
                },
                Name {
                  "value": "FOG_OF_WAR_MASKED",
                },
              ],
            },
            "name": Name {
              "value": "CreateMinimapIconAtLocBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Sound Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlaySoundBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastPlayedSound",
            },
            "value": Name {
              "value": "soundHandle",
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "soundHandle",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StopSoundBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "fadeOut",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                false,
                Name {
                  "value": "fadeOut",
                },
              ],
            },
            "name": Name {
              "value": "StopSound",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetSoundVolumeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "volumePercent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "volumePercent",
                      },
                      127,
                    ],
                  },
                  "name": Name {
                    "value": "PercentToInt",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetSoundVolume",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetSoundOffsetBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "newOffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "newOffset",
                        },
                        "operator": "*",
                        "right": 1000,
                      },
                    ],
                  },
                  "name": Name {
                    "value": "R2I",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetSoundPlayPosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetSoundDistanceCutoffBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "cutoff",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "cutoff",
                },
              ],
            },
            "name": Name {
              "value": "SetSoundDistanceCutoff",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetSoundPitchBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "pitch",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "pitch",
                },
              ],
            },
            "name": Name {
              "value": "SetSoundPitch",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetSoundPositionLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "z",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "z",
                },
              ],
            },
            "name": Name {
              "value": "SetSoundPosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AttachSoundToUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "whichUnit",
                },
              ],
            },
            "name": Name {
              "value": "AttachSoundToUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetSoundConeAnglesBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "inside",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "outside",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "outsideVolumePercent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "inside",
                },
                Name {
                  "value": "outside",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "outsideVolumePercent",
                      },
                      127,
                    ],
                  },
                  "name": Name {
                    "value": "PercentToInt",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetSoundConeAngles",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "KillSoundWhenDoneBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
              ],
            },
            "name": Name {
              "value": "KillSoundWhenDone",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlaySoundAtPointBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "volumePercent",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "z",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "loc",
                },
                Name {
                  "value": "z",
                },
              ],
            },
            "name": Name {
              "value": "SetSoundPositionLocBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "volumePercent",
                },
              ],
            },
            "name": Name {
              "value": "SetSoundVolumeBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
              ],
            },
            "name": Name {
              "value": "PlaySoundBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlaySoundOnUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "volumePercent",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "whichUnit",
                },
              ],
            },
            "name": Name {
              "value": "AttachSoundToUnitBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "volumePercent",
                },
              ],
            },
            "name": Name {
              "value": "SetSoundVolumeBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
              ],
            },
            "name": Name {
              "value": "PlaySoundBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlaySoundFromOffsetBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "volumePercent",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "startingOffset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "volumePercent",
                },
              ],
            },
            "name": Name {
              "value": "SetSoundVolumeBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
              ],
            },
            "name": Name {
              "value": "PlaySoundBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "startingOffset",
                },
                Name {
                  "value": "soundHandle",
                },
              ],
            },
            "name": Name {
              "value": "SetSoundOffsetBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlayMusicBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "musicFileName",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastPlayedMusic",
            },
            "value": Name {
              "value": "musicFileName",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "musicFileName",
                },
              ],
            },
            "name": Name {
              "value": "PlayMusic",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlayMusicExBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "musicFileName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "startingOffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "fadeInTime",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastPlayedMusic",
            },
            "value": Name {
              "value": "musicFileName",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "musicFileName",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "startingOffset",
                        },
                        "operator": "*",
                        "right": 1000,
                      },
                    ],
                  },
                  "name": Name {
                    "value": "R2I",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "fadeInTime",
                        },
                        "operator": "*",
                        "right": 1000,
                      },
                    ],
                  },
                  "name": Name {
                    "value": "R2I",
                  },
                },
              ],
            },
            "name": Name {
              "value": "PlayMusicEx",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetMusicOffsetBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "newOffset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "newOffset",
                        },
                        "operator": "*",
                        "right": 1000,
                      },
                    ],
                  },
                  "name": Name {
                    "value": "R2I",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetMusicPlayPosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlayThematicMusicBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "musicName",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "musicName",
                },
              ],
            },
            "name": Name {
              "value": "PlayThematicMusic",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlayThematicMusicExBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "musicName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "startingOffset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "musicName",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "startingOffset",
                        },
                        "operator": "*",
                        "right": 1000,
                      },
                    ],
                  },
                  "name": Name {
                    "value": "R2I",
                  },
                },
              ],
            },
            "name": Name {
              "value": "PlayThematicMusicEx",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetThematicMusicOffsetBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "newOffset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "newOffset",
                        },
                        "operator": "*",
                        "right": 1000,
                      },
                    ],
                  },
                  "name": Name {
                    "value": "R2I",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetThematicMusicPlayPosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EndThematicMusicBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "EndThematicMusic",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StopMusicBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "fadeOut",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "fadeOut",
                },
              ],
            },
            "name": Name {
              "value": "StopMusic",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ResumeMusicBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "ResumeMusic",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetMusicVolumeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "volumePercent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "volumePercent",
                      },
                      127,
                    ],
                  },
                  "name": Name {
                    "value": "PercentToInt",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetMusicVolume",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetSoundDurationBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "soundHandle",
                  },
                  "operator": "==",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "soundHandle",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetSoundDuration",
                                  },
                                },
                              ],
                            },
                            "name": Name {
                              "value": "I2R",
                            },
                          },
                          "operator": "*",
                          "right": 0.001,
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "bj_NOTHING_SOUND_DURATION",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetSoundFileDurationBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "musicFileName",
            },
            "type": "string",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "musicFileName",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetSoundFileDuration",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "I2R",
                  },
                },
                "operator": "*",
                "right": 0.001,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastPlayedSound",
      },
      "returns": Name {
        "value": "sound",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastPlayedSound",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastPlayedMusic",
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastPlayedMusic",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "VolumeGroupSetVolumeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "vgroup",
            },
            "type": Name {
              "value": "volumegroup",
            },
          },
          Param {
            "name": Name {
              "value": "percent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "vgroup",
                },
                BinaryOp {
                  "left": Name {
                    "value": "percent",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCineModeVolumeGroupsImmediateBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_UNITMOVEMENT",
                },
                Name {
                  "value": "bj_CINEMODE_VOLUME_UNITMOVEMENT",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_UNITSOUNDS",
                },
                Name {
                  "value": "bj_CINEMODE_VOLUME_UNITSOUNDS",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_COMBAT",
                },
                Name {
                  "value": "bj_CINEMODE_VOLUME_COMBAT",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_SPELLS",
                },
                Name {
                  "value": "bj_CINEMODE_VOLUME_SPELLS",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_UI",
                },
                Name {
                  "value": "bj_CINEMODE_VOLUME_UI",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_MUSIC",
                },
                Name {
                  "value": "bj_CINEMODE_VOLUME_MUSIC",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_AMBIENTSOUNDS",
                },
                Name {
                  "value": "bj_CINEMODE_VOLUME_AMBIENTSOUNDS",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_FIRE",
                },
                Name {
                  "value": "bj_CINEMODE_VOLUME_FIRE",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCineModeVolumeGroupsBJ",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Delay the request if it occurs at map init.",
          },
          IfThenElse {
            "condition": Name {
              "value": "bj_gameStarted",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_volumeGroupsTimer",
                          },
                          Name {
                            "value": "bj_GAME_STARTED_THRESHOLD",
                          },
                          false,
                          FuncRef {
                            "data": Name {
                              "value": "SetCineModeVolumeGroupsImmediateBJ",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "TimerStart",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "SetCineModeVolumeGroupsImmediateBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetSpeechVolumeGroupsImmediateBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_UNITMOVEMENT",
                },
                Name {
                  "value": "bj_SPEECH_VOLUME_UNITMOVEMENT",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_UNITSOUNDS",
                },
                Name {
                  "value": "bj_SPEECH_VOLUME_UNITSOUNDS",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_COMBAT",
                },
                Name {
                  "value": "bj_SPEECH_VOLUME_COMBAT",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_SPELLS",
                },
                Name {
                  "value": "bj_SPEECH_VOLUME_SPELLS",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_UI",
                },
                Name {
                  "value": "bj_SPEECH_VOLUME_UI",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_MUSIC",
                },
                Name {
                  "value": "bj_SPEECH_VOLUME_MUSIC",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_AMBIENTSOUNDS",
                },
                Name {
                  "value": "bj_SPEECH_VOLUME_AMBIENTSOUNDS",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "SOUND_VOLUMEGROUP_FIRE",
                },
                Name {
                  "value": "bj_SPEECH_VOLUME_FIRE",
                },
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolume",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetSpeechVolumeGroupsBJ",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Delay the request if it occurs at map init.",
          },
          IfThenElse {
            "condition": Name {
              "value": "bj_gameStarted",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_volumeGroupsTimer",
                          },
                          Name {
                            "value": "bj_GAME_STARTED_THRESHOLD",
                          },
                          false,
                          FuncRef {
                            "data": Name {
                              "value": "SetSpeechVolumeGroupsImmediateBJ",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "TimerStart",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "SetSpeechVolumeGroupsImmediateBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "VolumeGroupResetImmediateBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "VolumeGroupReset",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "VolumeGroupResetBJ",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Delay the request if it occurs at map init.",
          },
          IfThenElse {
            "condition": Name {
              "value": "bj_gameStarted",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_volumeGroupsTimer",
                          },
                          Name {
                            "value": "bj_GAME_STARTED_THRESHOLD",
                          },
                          false,
                          FuncRef {
                            "data": Name {
                              "value": "VolumeGroupResetImmediateBJ",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "TimerStart",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "VolumeGroupResetImmediateBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetSoundIsPlayingBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetSoundIsLoading",
                  },
                },
                "operator": "or",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetSoundIsPlaying",
                  },
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WaitForSoundBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "offset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "offset",
                },
              ],
            },
            "name": Name {
              "value": "TriggerWaitForSound",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetMapMusicIndexedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "musicName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "musicName",
                },
                false,
                Name {
                  "value": "index",
                },
              ],
            },
            "name": Name {
              "value": "SetMapMusic",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetMapMusicRandomBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "musicName",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "musicName",
                },
                true,
                0,
              ],
            },
            "name": Name {
              "value": "SetMapMusic",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ClearMapMusicBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "ClearMapMusic",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetStackedSoundBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "add",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "width",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetRectMaxX",
                },
              },
              "operator": "-",
              "right": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetRectMinX",
                },
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "height",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetRectMaxY",
                },
              },
              "operator": "-",
              "right": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetRectMinY",
                },
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetRectCenterX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetRectCenterY",
                  },
                },
                0,
              ],
            },
            "name": Name {
              "value": "SetSoundPosition",
            },
            "statement": true,
          },
          IfThenElse {
            "condition": Name {
              "value": "add",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "soundHandle",
                          },
                          true,
                          Name {
                            "value": "width",
                          },
                          Name {
                            "value": "height",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "UnregisterStackedSound",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                      true,
                      Name {
                        "value": "width",
                      },
                      Name {
                        "value": "height",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RegisterStackedSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StartSoundForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "whichPlayer",
                  },
                  "operator": "==",
                  "right": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "VolumeGroupSetVolumeForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "vgroup",
            },
            "type": Name {
              "value": "volumegroup",
            },
          },
          Param {
            "name": Name {
              "value": "scale",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "vgroup",
                      },
                      Name {
                        "value": "scale",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "VolumeGroupSetVolume",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnableDawnDusk",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_useDawnDuskSounds",
            },
            "value": Name {
              "value": "flag",
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsDawnDuskEnabled",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_useDawnDuskSounds",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Day/Night ambient sounds",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetAmbientDaySound",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "inLabel",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "ToD",
            },
            "type": "real",
          },
          EmptyLine {},
          Comment {
            "value": " Stop old sound, if necessary",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_dayAmbientSound",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_dayAmbientSound",
                      },
                      true,
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "StopSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Create new sound",
          },
          JASSSet {
            "name": Name {
              "value": "bj_dayAmbientSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "inLabel",
                  },
                  20,
                  20,
                ],
              },
              "name": Name {
                "value": "CreateMIDISound",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Start the sound if necessary, based on current time",
          },
          JASSSet {
            "name": Name {
              "value": "ToD",
            },
            "value": Call {
              "name": Name {
                "value": "GetTimeOfDay",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": BinaryOp {
                    "left": Name {
                      "value": "ToD",
                    },
                    "operator": ">=",
                    "right": Name {
                      "value": "bj_TOD_DAWN",
                    },
                  },
                  "operator": "and",
                  "right": BinaryOp {
                    "left": Name {
                      "value": "ToD",
                    },
                    "operator": "<",
                    "right": Name {
                      "value": "bj_TOD_DUSK",
                    },
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_dayAmbientSound",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetAmbientNightSound",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "inLabel",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "ToD",
            },
            "type": "real",
          },
          EmptyLine {},
          Comment {
            "value": " Stop old sound, if necessary",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_nightAmbientSound",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_nightAmbientSound",
                      },
                      true,
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "StopSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Create new sound",
          },
          JASSSet {
            "name": Name {
              "value": "bj_nightAmbientSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "inLabel",
                  },
                  20,
                  20,
                ],
              },
              "name": Name {
                "value": "CreateMIDISound",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Start the sound if necessary, based on current time",
          },
          JASSSet {
            "name": Name {
              "value": "ToD",
            },
            "value": Call {
              "name": Name {
                "value": "GetTimeOfDay",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": BinaryOp {
                    "left": Name {
                      "value": "ToD",
                    },
                    "operator": "<",
                    "right": Name {
                      "value": "bj_TOD_DAWN",
                    },
                  },
                  "operator": "or",
                  "right": BinaryOp {
                    "left": Name {
                      "value": "ToD",
                    },
                    "operator": ">=",
                    "right": Name {
                      "value": "bj_TOD_DUSK",
                    },
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_nightAmbientSound",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Special Effect Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddSpecialEffectLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "modelName",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "effect",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "modelName",
                  },
                  Name {
                    "value": "where",
                  },
                ],
              },
              "name": Name {
                "value": "AddSpecialEffectLoc",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddSpecialEffectTargetUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "attachPointName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "targetWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
          Param {
            "name": Name {
              "value": "modelName",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "effect",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "modelName",
                  },
                  Name {
                    "value": "targetWidget",
                  },
                  Name {
                    "value": "attachPointName",
                  },
                ],
              },
              "name": Name {
                "value": "AddSpecialEffectTarget",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Two distinct trigger actions can't share the same function name, so this",
    },
    Comment {
      "value": " dummy function simply mimics the behavior of an existing call.",
    },
    Comment {
      "value": "",
    },
    Comment {
      "value": " Commented out - Destructibles have no attachment points.",
    },
    Comment {
      "value": "",
    },
    Comment {
      "value": "function AddSpecialEffectTargetDestructableBJ takes string attachPointName, widget targetWidget, string modelName returns effect",
    },
    Comment {
      "value": "    return AddSpecialEffectTargetUnitBJ(attachPointName, targetWidget, modelName)",
    },
    Comment {
      "value": "endfunction",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Two distinct trigger actions can't share the same function name, so this",
    },
    Comment {
      "value": " dummy function simply mimics the behavior of an existing call.",
    },
    Comment {
      "value": "",
    },
    Comment {
      "value": " Commented out - Items have no attachment points.",
    },
    Comment {
      "value": "",
    },
    Comment {
      "value": "function AddSpecialEffectTargetItemBJ takes string attachPointName, widget targetWidget, string modelName returns effect",
    },
    Comment {
      "value": "    return AddSpecialEffectTargetUnitBJ(attachPointName, targetWidget, modelName)",
    },
    Comment {
      "value": "endfunction",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichEffect",
            },
            "type": Name {
              "value": "effect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichEffect",
                },
              ],
            },
            "name": Name {
              "value": "DestroyEffect",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedEffectBJ",
      },
      "returns": Name {
        "value": "effect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Command Button Effect Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateCommandButtonEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilityId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "commandbuttoneffect",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedCommandButtonEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "abilityId",
                  },
                  Name {
                    "value": "order",
                  },
                ],
              },
              "name": Name {
                "value": "CreateCommandButtonEffect",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedCommandButtonEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateTrainCommandButtonEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "commandbuttoneffect",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedCommandButtonEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  FourCC {
                    "value": "Aque",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "unitId",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "UnitId2String",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "CreateCommandButtonEffect",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedCommandButtonEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateUpgradeCommandButtonEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "techId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "commandbuttoneffect",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedCommandButtonEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "techId",
                  },
                ],
              },
              "name": Name {
                "value": "CreateUpgradeCommandButtonEffect",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedCommandButtonEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateCommonCommandButtonEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "commandbuttoneffect",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedCommandButtonEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  0,
                  Name {
                    "value": "order",
                  },
                ],
              },
              "name": Name {
                "value": "CreateCommandButtonEffect",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedCommandButtonEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateLearnCommandButtonEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilityId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "commandbuttoneffect",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedCommandButtonEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "abilityId",
                  },
                ],
              },
              "name": Name {
                "value": "CreateLearnCommandButtonEffect",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedCommandButtonEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateBuildCommandButtonEffectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "commandbuttoneffect",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "race",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerRace",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "abilityId",
            },
            "type": "integer",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "r",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "RACE_HUMAN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_ORC",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "abilityId",
                      },
                      "value": FourCC {
                        "value": "AObu",
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_UNDEAD",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "abilityId",
                      },
                      "value": FourCC {
                        "value": "AUbu",
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_NIGHTELF",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "abilityId",
                      },
                      "value": FourCC {
                        "value": "AEbu",
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "abilityId",
                      },
                      "value": FourCC {
                        "value": "ANbu",
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "abilityId",
                  },
                  "value": FourCC {
                    "value": "AHbu",
                  },
                },
              ],
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedCommandButtonEffect",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "abilityId",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "unitId",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "UnitId2String",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "CreateCommandButtonEffect",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedCommandButtonEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedCommandButtonEffectBJ",
      },
      "returns": Name {
        "value": "commandbuttoneffect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedCommandButtonEffect",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Hero and Item Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetItemLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichItem",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetItemX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichItem",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetItemY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetItemLifeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichWidget",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetWidgetLife",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetItemLifeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
          Param {
            "name": Name {
              "value": "life",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichWidget",
                },
                Name {
                  "value": "life",
                },
              ],
            },
            "name": Name {
              "value": "SetWidgetLife",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddHeroXPSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "xpToAdd",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "showEyeCandy",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichHero",
                },
                Name {
                  "value": "xpToAdd",
                },
                Name {
                  "value": "showEyeCandy",
                },
              ],
            },
            "name": Name {
              "value": "AddHeroXP",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetHeroLevelBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "newLevel",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "showEyeCandy",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "oldLevel",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichHero",
                  },
                ],
              },
              "name": Name {
                "value": "GetHeroLevel",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "newLevel",
                  },
                  "operator": ">",
                  "right": Name {
                    "value": "oldLevel",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "newLevel",
                      },
                      "operator": "<",
                      "right": Name {
                        "value": "oldLevel",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichHero",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "oldLevel",
                            },
                            "operator": "-",
                            "right": Name {
                              "value": "newLevel",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "UnitStripHeroLevel",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " No change in level - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichHero",
                      },
                      Name {
                        "value": "newLevel",
                      },
                      Name {
                        "value": "showEyeCandy",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetHeroLevel",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DecUnitAbilityLevelSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilcode",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "abilcode",
                    },
                  ],
                },
                "name": Name {
                  "value": "DecUnitAbilityLevel",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IncUnitAbilityLevelSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilcode",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "abilcode",
                    },
                  ],
                },
                "name": Name {
                  "value": "IncUnitAbilityLevel",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitAbilityLevelSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilcode",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "abilcode",
                    },
                    Name {
                      "value": "level",
                    },
                  ],
                },
                "name": Name {
                  "value": "SetUnitAbilityLevel",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitAbilityLevelSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilcode",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "abilcode",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetUnitAbilityLevel",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitHasBuffBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "buffcode",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Parens {
                "data": Array [
                  BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                          Name {
                            "value": "buffcode",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetUnitAbilityLevel",
                      },
                    },
                    "operator": ">",
                    "right": 0,
                  },
                ],
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitRemoveBuffBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "buffcode",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "buffcode",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitRemoveAbility",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitAddItemSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichHero",
                    },
                    Name {
                      "value": "whichItem",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitAddItem",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitAddItemByIdSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "itemId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Create the item at the hero's feet first, and then give it to him.",
          },
          Comment {
            "value": " This is to ensure that the item will be left at the hero's feet if",
          },
          Comment {
            "value": " his inventory is full. ",
          },
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedItem",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "itemId",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichHero",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetUnitX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichHero",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetUnitY",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "CreateItem",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichHero",
                },
                Name {
                  "value": "bj_lastCreatedItem",
                },
              ],
            },
            "name": Name {
              "value": "UnitAddItem",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedItem",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitRemoveItemSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastRemovedItem",
            },
            "value": Name {
              "value": "whichItem",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichHero",
                },
                Name {
                  "value": "whichItem",
                },
              ],
            },
            "name": Name {
              "value": "UnitRemoveItem",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Translates 0-based slot indices to 1-based slot indices.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitRemoveItemFromSlotSwapped",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "itemSlot",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastRemovedItem",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichHero",
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "itemSlot",
                    },
                    "operator": "-",
                    "right": 1,
                  },
                ],
              },
              "name": Name {
                "value": "UnitRemoveItemFromSlot",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastRemovedItem",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateItemLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "itemId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedItem",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "itemId",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "CreateItem",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedItem",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedItem",
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedItem",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastRemovedItem",
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastRemovedItem",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetItemPositionLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichItem",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetItemPosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLearnedSkillBJ",
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetLearnedSkill",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SuspendHeroXPBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichHero",
                },
                UnaryOp {
                  "expr": Name {
                    "value": "flag",
                  },
                  "operator": "not",
                },
              ],
            },
            "name": Name {
              "value": "SuspendHeroXP",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerHandicapDamageBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "handicapPercent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                BinaryOp {
                  "left": Name {
                    "value": "handicapPercent",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerHandicapDamage",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerHandicapDamageBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetPlayerHandicapDamage",
                  },
                },
                "operator": "*",
                "right": 100,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerHandicapReviveTimeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "handicapPercent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                BinaryOp {
                  "left": Name {
                    "value": "handicapPercent",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerHandicapReviveTime",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerHandicapReviveTimeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetPlayerHandicapReviveTime",
                  },
                },
                "operator": "*",
                "right": 100,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerHandicapXPBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "handicapPercent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                BinaryOp {
                  "left": Name {
                    "value": "handicapPercent",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerHandicapXP",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerHandicapXPBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetPlayerHandicapXP",
                  },
                },
                "operator": "*",
                "right": 100,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerHandicapBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "handicapPercent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                BinaryOp {
                  "left": Name {
                    "value": "handicapPercent",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerHandicap",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerHandicapBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetPlayerHandicap",
                  },
                },
                "operator": "*",
                "right": 100,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetHeroStatBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichStat",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "includeBonuses",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "whichStat",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_HEROSTAT_STR",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "whichStat",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_HEROSTAT_AGI",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichHero",
                              },
                              Name {
                                "value": "includeBonuses",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetHeroAgi",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "whichStat",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_HEROSTAT_INT",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichHero",
                              },
                              Name {
                                "value": "includeBonuses",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetHeroInt",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized hero stat - return 0",
                    },
                    Return {
                      "data": Array [
                        0,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichHero",
                          },
                          Name {
                            "value": "includeBonuses",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetHeroStr",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetHeroStat",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichStat",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Ignore requests for negative hero stats.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "value",
                  },
                  "operator": "<=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "whichStat",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_HEROSTAT_STR",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "whichStat",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_HEROSTAT_AGI",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichHero",
                          },
                          Name {
                            "value": "value",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetHeroAgi",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "whichStat",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_HEROSTAT_INT",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichHero",
                          },
                          Name {
                            "value": "value",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetHeroInt",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized hero stat - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichHero",
                      },
                      Name {
                        "value": "value",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "SetHeroStr",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ModifyHeroStat",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichStat",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "modifyMethod",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "modifyMethod",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_MODIFYMETHOD_ADD",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "modifyMethod",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MODIFYMETHOD_SUB",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichHero",
                          },
                          Name {
                            "value": "whichStat",
                          },
                          BinaryOp {
                            "left": Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "whichStat",
                                  },
                                  Name {
                                    "value": "whichHero",
                                  },
                                  false,
                                ],
                              },
                              "name": Name {
                                "value": "GetHeroStatBJ",
                              },
                            },
                            "operator": "-",
                            "right": Name {
                              "value": "value",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetHeroStat",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "modifyMethod",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MODIFYMETHOD_SET",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichHero",
                          },
                          Name {
                            "value": "whichStat",
                          },
                          Name {
                            "value": "value",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetHeroStat",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized modification method - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichHero",
                      },
                      Name {
                        "value": "whichStat",
                      },
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichStat",
                              },
                              Name {
                                "value": "whichHero",
                              },
                              false,
                            ],
                          },
                          "name": Name {
                            "value": "GetHeroStatBJ",
                          },
                        },
                        "operator": "+",
                        "right": Name {
                          "value": "value",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetHeroStat",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ModifyHeroSkillPoints",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichHero",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "modifyMethod",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "modifyMethod",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_MODIFYMETHOD_ADD",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "modifyMethod",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MODIFYMETHOD_SUB",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichHero",
                              },
                              UnaryOp {
                                "expr": Name {
                                  "value": "value",
                                },
                                "operator": "-",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "UnitModifySkillPoints",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "modifyMethod",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MODIFYMETHOD_SET",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichHero",
                              },
                              BinaryOp {
                                "left": Name {
                                  "value": "value",
                                },
                                "operator": "-",
                                "right": Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "whichHero",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetHeroSkillPoints",
                                  },
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "UnitModifySkillPoints",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized modification method - ignore the request and return failure.",
                    },
                    Return {
                      "data": Array [
                        false,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichHero",
                          },
                          Name {
                            "value": "value",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "UnitModifySkillPoints",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitDropItemPointBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichItem",
                    },
                    Name {
                      "value": "x",
                    },
                    Name {
                      "value": "y",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitDropItemPoint",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitDropItemPointLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichItem",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitDropItemPoint",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitDropItemSlotBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "slot",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichItem",
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "slot",
                      },
                      "operator": "-",
                      "right": 1,
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitDropItemSlot",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitDropItemTargetBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "target",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichItem",
                    },
                    Name {
                      "value": "target",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitDropItemTarget",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Two distinct trigger actions can't share the same function name, so this",
    },
    Comment {
      "value": " dummy function simply mimics the behavior of an existing call.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitUseItemDestructable",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "target",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichItem",
                    },
                    Name {
                      "value": "target",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitUseItemTarget",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitUseItemPointLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichItem",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitUseItemPoint",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Translates 0-based slot indices to 1-based slot indices.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitItemInSlotBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "itemSlot",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "itemSlot",
                      },
                      "operator": "-",
                      "right": 1,
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitItemInSlot",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Translates 0-based slot indices to 1-based slot indices.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetInventoryIndexOfItemTypeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "itemId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexItem",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichUnit",
                        },
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "UnitItemInSlot",
                    },
                  },
                },
                IfThenElse {
                  "condition": BinaryOp {
                    "left": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "indexItem",
                          },
                          "operator": "!=",
                        },
                      ],
                    },
                    "operator": "and",
                    "right": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "indexItem",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetItemTypeId",
                            },
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "itemId",
                          },
                        },
                      ],
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      Return {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "index",
                            },
                            "operator": "+",
                            "right": 1,
                          },
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_MAX_INVENTORY",
                      },
                    },
                  ],
                },
              ],
            },
          },
          Return {
            "data": Array [
              0,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetItemOfTypeFromUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "itemId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "itemId",
                  },
                ],
              },
              "name": Name {
                "value": "GetInventoryIndexOfItemTypeBJ",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "index",
                  },
                  "operator": "==",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichUnit",
                              },
                              BinaryOp {
                                "left": Name {
                                  "value": "index",
                                },
                                "operator": "-",
                                "right": 1,
                              },
                            ],
                          },
                          "name": Name {
                            "value": "UnitItemInSlot",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    null,
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitHasItemOfTypeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "itemId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      Name {
                        "value": "itemId",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetInventoryIndexOfItemTypeBJ",
                  },
                },
                "operator": ">",
                "right": 0,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitInventoryCount",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "count",
            },
            "type": "integer",
            "value": 0,
          },
          EmptyLine {},
          Loop {
            "statements": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichUnit",
                              },
                              Name {
                                "value": "index",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "UnitItemInSlot",
                          },
                        },
                        "operator": "!=",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "count",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "count",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_MAX_INVENTORY",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "count",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitInventorySizeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitInventorySize",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetItemInvulnerableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichItem",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetItemInvulnerable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetItemDropOnDeathBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichItem",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetItemDropOnDeath",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetItemDroppableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichItem",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetItemDroppable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetItemPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "changeColor",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichItem",
                },
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "changeColor",
                },
              ],
            },
            "name": Name {
              "value": "SetItemPlayer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetItemVisibleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "show",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichItem",
                },
                Name {
                  "value": "show",
                },
              ],
            },
            "name": Name {
              "value": "SetItemVisible",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsItemHiddenBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              UnaryOp {
                "expr": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichItem",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsItemVisible",
                  },
                },
                "operator": "not",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ChooseRandomItemBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "level",
                    },
                  ],
                },
                "name": Name {
                  "value": "ChooseRandomItem",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ChooseRandomItemExBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichType",
            },
            "type": Name {
              "value": "itemtype",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichType",
                    },
                    Name {
                      "value": "level",
                    },
                  ],
                },
                "name": Name {
                  "value": "ChooseRandomItemEx",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ChooseRandomNPBuildingBJ",
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "ChooseRandomNPBuilding",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ChooseRandomCreepBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "level",
                    },
                  ],
                },
                "name": Name {
                  "value": "ChooseRandomCreep",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnumItemsInRectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "actionFunc",
            },
            "type": "code",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
                null,
                Name {
                  "value": "actionFunc",
                },
              ],
            },
            "name": Name {
              "value": "EnumItemsInRect",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " See GroupPickRandomUnitEnum for the details of this algorithm.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomItemInRectBJEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_itemRandomConsidered",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_itemRandomConsidered",
              },
              "operator": "+",
              "right": 1,
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        1,
                        Name {
                          "value": "bj_itemRandomConsidered",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRandomInt",
                    },
                  },
                  "operator": "==",
                  "right": 1,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_itemRandomCurrentPick",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "GetEnumItem",
                    },
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Picks a random item from within a rect, matching a condition",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomItemInRectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "filter",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_itemRandomConsidered",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "bj_itemRandomCurrentPick",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
                Name {
                  "value": "filter",
                },
                FuncRef {
                  "data": Name {
                    "value": "RandomItemInRectBJEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "EnumItemsInRect",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "DestroyBoolExpr",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_itemRandomCurrentPick",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Picks a random item from within a rect",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomItemInRectSimpleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "RandomItemInRectBJ",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CheckItemStatus",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "status",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "status",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ITEM_STATUS_HIDDEN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "status",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_ITEM_STATUS_OWNED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichItem",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsItemOwned",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "status",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_ITEM_STATUS_INVULNERABLE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichItem",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsItemInvulnerable",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "status",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_ITEM_STATUS_POWERUP",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichItem",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsItemPowerup",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "status",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_ITEM_STATUS_SELLABLE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichItem",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsItemSellable",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "status",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_ITEM_STATUS_PAWNABLE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichItem",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsItemPawnable",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized status - return false",
                    },
                    Return {
                      "data": Array [
                        false,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    UnaryOp {
                      "expr": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichItem",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "IsItemVisible",
                        },
                      },
                      "operator": "not",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CheckItemcodeStatus",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "itemId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "status",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "status",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ITEMCODE_STATUS_POWERUP",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "status",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_ITEMCODE_STATUS_SELLABLE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "itemId",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsItemIdSellable",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "status",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_ITEMCODE_STATUS_PAWNABLE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "itemId",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsItemIdPawnable",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized status - return false",
                    },
                    Return {
                      "data": Array [
                        false,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "itemId",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "IsItemIdPowerup",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Unit Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitId2OrderIdBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "unitId",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "String2UnitIdBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitIdString",
            },
            "type": "string",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "unitIdString",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitId",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitId2StringBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitString",
            },
            "type": "string",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "unitId",
                  },
                ],
              },
              "name": Name {
                "value": "UnitId2String",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "unitString",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "unitString",
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " The unitId was not recognized - return an empty string.",
          },
          Return {
            "data": Array [
              "",
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "String2OrderIdBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "orderIdString",
            },
            "type": "string",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "orderId",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " Check to see if it's a generic order.",
          },
          JASSSet {
            "name": Name {
              "value": "orderId",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "orderIdString",
                  },
                ],
              },
              "name": Name {
                "value": "OrderId",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "orderId",
                  },
                  "operator": "!=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "orderId",
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Check to see if it's a (train) unit order.",
          },
          JASSSet {
            "name": Name {
              "value": "orderId",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "orderIdString",
                  },
                ],
              },
              "name": Name {
                "value": "UnitId",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "orderId",
                  },
                  "operator": "!=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "orderId",
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Unrecognized - return 0",
          },
          Return {
            "data": Array [
              0,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "OrderId2StringBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "orderId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "orderString",
            },
            "type": "string",
          },
          EmptyLine {},
          Comment {
            "value": " Check to see if it's a generic order.",
          },
          JASSSet {
            "name": Name {
              "value": "orderString",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "orderId",
                  },
                ],
              },
              "name": Name {
                "value": "OrderId2String",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "orderString",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "orderString",
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Check to see if it's a (train) unit order.",
          },
          JASSSet {
            "name": Name {
              "value": "orderString",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "orderId",
                  },
                ],
              },
              "name": Name {
                "value": "UnitId2String",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "orderString",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "orderString",
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Unrecognized - return an empty string.",
          },
          Return {
            "data": Array [
              "",
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetIssuedOrderIdBJ",
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetIssuedOrderId",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetKillingUnitBJ",
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetKillingUnit",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateUnitAtLocSaveLast",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "id",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "unitid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "face",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "unitid",
                  },
                  "operator": "==",
                  "right": FourCC {
                    "value": "ugol",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "bj_lastCreatedUnit",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "id",
                            },
                            Name {
                              "value": "unitid",
                            },
                            Name {
                              "value": "loc",
                            },
                            Name {
                              "value": "face",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "CreateUnitAtLoc",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_lastCreatedUnit",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "id",
                        },
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "loc",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationX",
                          },
                        },
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "loc",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationY",
                          },
                        },
                        Name {
                          "value": "face",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "CreateBlightedGoldmine",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedUnit",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedUnit",
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedUnit",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateNUnitsAtLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "count",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "face",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedGroup",
                },
              ],
            },
            "name": Name {
              "value": "GroupClear",
            },
            "statement": true,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "count",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "count",
                    },
                    "operator": "-",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "count",
                      },
                      "operator": "<",
                      "right": 0,
                    },
                  ],
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "unitId",
                      },
                      Name {
                        "value": "loc",
                      },
                      Name {
                        "value": "face",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnitAtLocSaveLast",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_lastCreatedGroup",
                      },
                      Name {
                        "value": "bj_lastCreatedUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GroupAddUnit",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedGroup",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateNUnitsAtLocFacingLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "count",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "lookAt",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "count",
                    },
                    Name {
                      "value": "unitId",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "loc",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                          Name {
                            "value": "lookAt",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "AngleBetweenPoints",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "CreateNUnitsAtLoc",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedGroupEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_groupLastCreatedDest",
                },
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
              ],
            },
            "name": Name {
              "value": "GroupAddUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedGroup",
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_groupLastCreatedDest",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "GetLastCreatedGroupEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_groupLastCreatedDest",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateCorpseLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedUnit",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "unitid",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        0,
                        360,
                      ],
                    },
                    "name": Name {
                      "value": "GetRandomReal",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "CreateCorpse",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedUnit",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitSuspendDecayBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "suspend",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "suspend",
                },
              ],
            },
            "name": Name {
              "value": "UnitSuspendDecay",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DelayedSuspendDecayStopAnimEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "enumUnit",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumUnit",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "enumUnit",
                        },
                        Name {
                          "value": "UNIT_STATE_LIFE",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetUnitState",
                    },
                  },
                  "operator": "<=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enumUnit",
                      },
                      0.0001,
                    ],
                  },
                  "name": Name {
                    "value": "SetUnitTimeScale",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DelayedSuspendDecayBoneEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "enumUnit",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumUnit",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "enumUnit",
                        },
                        Name {
                          "value": "UNIT_STATE_LIFE",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetUnitState",
                    },
                  },
                  "operator": "<=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enumUnit",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "UnitSuspendDecay",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enumUnit",
                      },
                      0.0001,
                    ],
                  },
                  "name": Name {
                    "value": "SetUnitTimeScale",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Game code explicitly sets the animation back to \\"decay bone\\" after the",
    },
    Comment {
      "value": " initial corpse fades away, so we reset it now.  It's best not to show",
    },
    Comment {
      "value": " off corpses thus created until after this grace period has passed.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DelayedSuspendDecayFleshEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "enumUnit",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumUnit",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "enumUnit",
                        },
                        Name {
                          "value": "UNIT_STATE_LIFE",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetUnitState",
                    },
                  },
                  "operator": "<=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enumUnit",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "UnitSuspendDecay",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enumUnit",
                      },
                      10,
                    ],
                  },
                  "name": Name {
                    "value": "SetUnitTimeScale",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enumUnit",
                      },
                      "decay flesh",
                    ],
                  },
                  "name": Name {
                    "value": "SetUnitAnimation",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Waits a short period of time to ensure that the corpse is decaying, and",
    },
    Comment {
      "value": " then suspend the animation and corpse decay.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DelayedSuspendDecay",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "boneGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "fleshGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Switch the global unit groups over to local variables and recreate",
          },
          Comment {
            "value": " the global versions, so that this function can handle overlapping",
          },
          Comment {
            "value": " calls.",
          },
          JASSSet {
            "name": Name {
              "value": "boneGroup",
            },
            "value": Name {
              "value": "bj_suspendDecayBoneGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "fleshGroup",
            },
            "value": Name {
              "value": "bj_suspendDecayFleshGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_suspendDecayBoneGroup",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_suspendDecayFleshGroup",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "fleshGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "DelayedSuspendDecayStopAnimEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "boneGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "DelayedSuspendDecayStopAnimEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_CORPSE_MAX_DEATH_TIME",
                },
              ],
            },
            "name": Name {
              "value": "TriggerSleepAction",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "fleshGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "DelayedSuspendDecayFleshEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "boneGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "DelayedSuspendDecayBoneEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                0.05,
              ],
            },
            "name": Name {
              "value": "TriggerSleepAction",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "fleshGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "DelayedSuspendDecayStopAnimEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "boneGroup",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "fleshGroup",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DelayedSuspendDecayCreate",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_delayedSuspendDecayTrig",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_delayedSuspendDecayTrig",
                },
                Name {
                  "value": "bj_delayedSuspendDecayTimer",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterTimerExpireEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_delayedSuspendDecayTrig",
                },
                FuncRef {
                  "data": Name {
                    "value": "DelayedSuspendDecay",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreatePermanentCorpseLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "style",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "unitid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "facing",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedUnit",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "unitid",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "facing",
                  },
                ],
              },
              "name": Name {
                "value": "CreateCorpse",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedUnit",
                },
                0,
              ],
            },
            "name": Name {
              "value": "SetUnitBlendTime",
            },
            "statement": true,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "style",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CORPSETYPE_FLESH",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "style",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CORPSETYPE_BONE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_lastCreatedUnit",
                          },
                          "decay bone",
                        ],
                      },
                      "name": Name {
                        "value": "SetUnitAnimation",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_suspendDecayBoneGroup",
                          },
                          Name {
                            "value": "bj_lastCreatedUnit",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GroupAddUnit",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unknown decay style - treat as skeletal.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_lastCreatedUnit",
                          },
                          "decay bone",
                        ],
                      },
                      "name": Name {
                        "value": "SetUnitAnimation",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_suspendDecayBoneGroup",
                          },
                          Name {
                            "value": "bj_lastCreatedUnit",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GroupAddUnit",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_lastCreatedUnit",
                      },
                      "decay flesh",
                    ],
                  },
                  "name": Name {
                    "value": "SetUnitAnimation",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_suspendDecayFleshGroup",
                      },
                      Name {
                        "value": "bj_lastCreatedUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GroupAddUnit",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_delayedSuspendDecayTimer",
                },
                0.05,
                false,
                null,
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedUnit",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitStateSwap",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichState",
            },
            "type": Name {
              "value": "unitstate",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichState",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetUnitState",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitStatePercent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichState",
            },
            "type": Name {
              "value": "unitstate",
            },
          },
          Param {
            "name": Name {
              "value": "whichMaxState",
            },
            "type": Name {
              "value": "unitstate",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "value",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichState",
                  },
                ],
              },
              "name": Name {
                "value": "GetUnitState",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "maxValue",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichMaxState",
                  },
                ],
              },
              "name": Name {
                "value": "GetUnitState",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Return 0 for null units.",
          },
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "whichUnit",
                    },
                    "operator": "==",
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "maxValue",
                    },
                    "operator": "==",
                    "right": 0,
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    0,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              BinaryOp {
                "left": BinaryOp {
                  "left": Name {
                    "value": "value",
                  },
                  "operator": "/",
                  "right": Name {
                    "value": "maxValue",
                  },
                },
                "operator": "*",
                "right": 100,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitLifePercent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "UNIT_STATE_LIFE",
                    },
                    Name {
                      "value": "UNIT_STATE_MAX_LIFE",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetUnitStatePercent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitManaPercent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "UNIT_STATE_MANA",
                    },
                    Name {
                      "value": "UNIT_STATE_MAX_MANA",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetUnitStatePercent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectUnitSingle",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "ClearSelection",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                true,
              ],
            },
            "name": Name {
              "value": "SelectUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectGroupBJEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
                true,
              ],
            },
            "name": Name {
              "value": "SelectUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectGroupBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "ClearSelection",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                FuncRef {
                  "data": Name {
                    "value": "SelectGroupBJEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectUnitAdd",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                true,
              ],
            },
            "name": Name {
              "value": "SelectUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectUnitRemove",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                false,
              ],
            },
            "name": Name {
              "value": "SelectUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ClearSelectionForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "name": Name {
                    "value": "ClearSelection",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectUnitForPlayerSingle",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "name": Name {
                    "value": "ClearSelection",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "SelectUnit",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectGroupForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "name": Name {
                    "value": "ClearSelection",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                      FuncRef {
                        "data": Name {
                          "value": "SelectGroupBJEnum",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ForGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectUnitAddForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "SelectUnit",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SelectUnitRemoveForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "SelectUnit",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitLifeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "newValue",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "UNIT_STATE_LIFE",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      0,
                      Name {
                        "value": "newValue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RMaxBJ",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetUnitState",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitManaBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "newValue",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "UNIT_STATE_MANA",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      0,
                      Name {
                        "value": "newValue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RMaxBJ",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetUnitState",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitLifePercentBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "percent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "UNIT_STATE_LIFE",
                },
                BinaryOp {
                  "left": BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                          Name {
                            "value": "UNIT_STATE_MAX_LIFE",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetUnitState",
                      },
                    },
                    "operator": "*",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          0,
                          Name {
                            "value": "percent",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "RMaxBJ",
                      },
                    },
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetUnitState",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitManaPercentBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "percent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "UNIT_STATE_MANA",
                },
                BinaryOp {
                  "left": BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                          Name {
                            "value": "UNIT_STATE_MAX_MANA",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetUnitState",
                      },
                    },
                    "operator": "*",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          0,
                          Name {
                            "value": "percent",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "RMaxBJ",
                      },
                    },
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetUnitState",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitDeadBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      Name {
                        "value": "UNIT_STATE_LIFE",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitState",
                  },
                },
                "operator": "<=",
                "right": 0,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitAliveBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              UnaryOp {
                "expr": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsUnitDeadBJ",
                  },
                },
                "operator": "not",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitGroupDeadBJEnum",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": UnaryOp {
              "expr": Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "name": Name {
                        "value": "GetEnumUnit",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "IsUnitDeadBJ",
                },
              },
              "operator": "not",
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_isUnitGroupDeadResult",
                  },
                  "value": false,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns true if every unit of the group is dead.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitGroupDeadBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the user wants the group destroyed, remember that fact and clear",
          },
          Comment {
            "value": " the flag, in case it is used again in the callback.",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wantDestroy",
            },
            "type": "boolean",
            "value": Name {
              "value": "bj_wantDestroyGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_wantDestroyGroup",
            },
            "value": false,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_isUnitGroupDeadResult",
            },
            "value": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                FuncRef {
                  "data": Name {
                    "value": "IsUnitGroupDeadBJEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If the user wants the group destroyed, do so now.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "wantDestroy",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_isUnitGroupDeadResult",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitGroupEmptyBJEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_isUnitGroupEmptyResult",
            },
            "value": false,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns true if the group contains no units.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitGroupEmptyBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the user wants the group destroyed, remember that fact and clear",
          },
          Comment {
            "value": " the flag, in case it is used again in the callback.",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wantDestroy",
            },
            "type": "boolean",
            "value": Name {
              "value": "bj_wantDestroyGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_wantDestroyGroup",
            },
            "value": false,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_isUnitGroupEmptyResult",
            },
            "value": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                FuncRef {
                  "data": Name {
                    "value": "IsUnitGroupEmptyBJEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If the user wants the group destroyed, do so now.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "wantDestroy",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_isUnitGroupEmptyResult",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitGroupInRectBJEnum",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": UnaryOp {
              "expr": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "bj_isUnitGroupInRectRect",
                    },
                    Call {
                      "name": Name {
                        "value": "GetEnumUnit",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "RectContainsUnit",
                },
              },
              "operator": "not",
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_isUnitGroupInRectResult",
                  },
                  "value": false,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns true if every unit of the group is within the given rect.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitGroupInRectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_isUnitGroupInRectResult",
            },
            "value": true,
          },
          JASSSet {
            "name": Name {
              "value": "bj_isUnitGroupInRectRect",
            },
            "value": Name {
              "value": "r",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                FuncRef {
                  "data": Name {
                    "value": "IsUnitGroupInRectBJEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_isUnitGroupInRectResult",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitHiddenBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsUnitHidden",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowUnitHide",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                false,
              ],
            },
            "name": Name {
              "value": "ShowUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowUnitShow",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Prevent dead heroes from being unhidden.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichUnit",
                        },
                        Name {
                          "value": "UNIT_TYPE_HERO",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "IsUnitType",
                    },
                  },
                  "operator": "and",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichUnit",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "IsUnitDeadBJ",
                    },
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                true,
              ],
            },
            "name": Name {
              "value": "ShowUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueHauntOrderAtLocBJFilter",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetFilterUnit",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitTypeId",
                  },
                },
                "operator": "==",
                "right": FourCC {
                  "value": "ngol",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueHauntOrderAtLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPeon",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "goldMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Search for a gold mine within a 1-cell radius of the specified location.",
          },
          JASSSet {
            "name": Name {
              "value": "g",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "loc",
                },
                BinaryOp {
                  "left": 2,
                  "operator": "*",
                  "right": Name {
                    "value": "bj_CELLWIDTH",
                  },
                },
                Name {
                  "value": "filterIssueHauntOrderAtLocBJ",
                },
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsInRangeOfLoc",
            },
            "statement": true,
          },
          JASSSet {
            "name": Name {
              "value": "goldMine",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "g",
                  },
                ],
              },
              "name": Name {
                "value": "FirstOfGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If no mine was found, abort the request.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "goldMine",
                  },
                  "operator": "==",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Issue the Haunt Gold Mine order.",
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichPeon",
                    },
                    FourCC {
                      "value": "ugol",
                    },
                    Name {
                      "value": "goldMine",
                    },
                  ],
                },
                "name": Name {
                  "value": "IssueTargetOrderById",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueBuildOrderByIdLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPeon",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "unitId",
                  },
                  "operator": "==",
                  "right": FourCC {
                    "value": "ugol",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichPeon",
                              },
                              Name {
                                "value": "unitId",
                              },
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "loc",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetLocationX",
                                },
                              },
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "loc",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetLocationY",
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IssueBuildOrderById",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPeon",
                          },
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "IssueHauntOrderAtLocBJ",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueTrainOrderByIdBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "unitId",
                    },
                  ],
                },
                "name": Name {
                  "value": "IssueImmediateOrderById",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupTrainOrderByIdBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "g",
                    },
                    Name {
                      "value": "unitId",
                    },
                  ],
                },
                "name": Name {
                  "value": "GroupImmediateOrderById",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueUpgradeOrderByIdBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "techId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "techId",
                    },
                  ],
                },
                "name": Name {
                  "value": "IssueImmediateOrderById",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetAttackedUnitBJ",
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetTriggerUnit",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitFlyHeightBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "newHeight",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "rate",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "newHeight",
                },
                Name {
                  "value": "rate",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitFlyHeight",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitTurnSpeedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "turnSpeed",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "turnSpeed",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitTurnSpeed",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitPropWindowBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "propWindow",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "angle",
            },
            "type": "real",
            "value": Name {
              "value": "propWindow",
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "angle",
                  },
                  "operator": "<=",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "angle",
                      },
                      "operator": ">=",
                      "right": 360,
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "angle",
                      },
                      "value": 359,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "angle",
                  },
                  "value": 1,
                },
              ],
            },
          },
          JASSSet {
            "name": Name {
              "value": "angle",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "angle",
              },
              "operator": "*",
              "right": Name {
                "value": "bj_DEGTORAD",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "angle",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitPropWindow",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitPropWindowBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitPropWindow",
                  },
                },
                "operator": "*",
                "right": Name {
                  "value": "bj_RADTODEG",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitDefaultPropWindowBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetUnitDefaultPropWindow",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitBlendTimeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "blendTime",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "blendTime",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitBlendTime",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitAcquireRangeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "acquireRange",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "acquireRange",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitAcquireRange",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitSetCanSleepBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "canSleep",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "canSleep",
                },
              ],
            },
            "name": Name {
              "value": "UnitAddSleep",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitCanSleepBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitCanSleep",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitWakeUpBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
              ],
            },
            "name": Name {
              "value": "UnitWakeUp",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitIsSleepingBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitIsSleeping",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WakePlayerUnitsEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
              ],
            },
            "name": Name {
              "value": "UnitWakeUp",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WakePlayerUnits",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "whichPlayer",
                },
                null,
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsOfPlayer",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                FuncRef {
                  "data": Name {
                    "value": "WakePlayerUnitsEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnableCreepSleepBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "enable",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "PLAYER_NEUTRAL_AGGRESSIVE",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Player",
                  },
                },
                Name {
                  "value": "PLAYER_STATE_NO_CREEP_SLEEP",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enable",
                      },
                      0,
                      1,
                    ],
                  },
                  "name": Name {
                    "value": "IntegerTertiaryOp",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerState",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If we're disabling, attempt to wake any already-sleeping creeps.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                UnaryOp {
                  "expr": Name {
                    "value": "enable",
                  },
                  "operator": "not",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "PLAYER_NEUTRAL_AGGRESSIVE",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "WakePlayerUnits",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitGenerateAlarms",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "generate",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    UnaryOp {
                      "expr": Name {
                        "value": "generate",
                      },
                      "operator": "not",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitIgnoreAlarm",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DoesUnitGenerateAlarms",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              UnaryOp {
                "expr": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitIgnoreAlarmToggled",
                  },
                },
                "operator": "not",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PauseAllUnitsBJEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
                Name {
                  "value": "bj_pauseAllUnitsFlag",
                },
              ],
            },
            "name": Name {
              "value": "PauseUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Pause all units ",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PauseAllUnitsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "pause",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_pauseAllUnitsFlag",
            },
            "value": Name {
              "value": "pause",
            },
          },
          JASSSet {
            "name": Name {
              "value": "g",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " If this is a computer slot, pause/resume the AI.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerController",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "MAP_CONTROL_COMPUTER",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "pause",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "PauseCompAI",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Enumerate and unpause every unit owned by the player.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                      Name {
                        "value": "indexPlayer",
                      },
                      null,
                    ],
                  },
                  "name": Name {
                    "value": "GroupEnumUnitsOfPlayer",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                      FuncRef {
                        "data": Name {
                          "value": "PauseAllUnitsBJEnum",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ForGroup",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GroupClear",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYER_SLOTS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PauseUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "pause",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "pause",
                },
              ],
            },
            "name": Name {
              "value": "PauseUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitPausedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsUnitPaused",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitPauseTimedLifeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "UnitPauseTimedLife",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitApplyTimedLifeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "buffId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "buffId",
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "UnitApplyTimedLife",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitShareVisionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "share",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "share",
                },
              ],
            },
            "name": Name {
              "value": "UnitShareVision",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitRemoveBuffsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "buffType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "buffType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_REMOVEBUFFS_POSITIVE",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "buffType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_REMOVEBUFFS_NEGATIVE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                          false,
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "UnitRemoveBuffs",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "buffType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_REMOVEBUFFS_ALL",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                          true,
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "UnitRemoveBuffs",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "buffType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_REMOVEBUFFS_NONTLIFE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                          true,
                          true,
                          false,
                          false,
                          false,
                          true,
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "UnitRemoveBuffsEx",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized dispel type - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      true,
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "UnitRemoveBuffs",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitRemoveBuffsExBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "polarity",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "resist",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "bTLife",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "bAura",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "bPos",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "polarity",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_POLARITY_EITHER",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "polarity",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_POLARITY_POSITIVE",
                    },
                  },
                ],
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "bNeg",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "polarity",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_POLARITY_EITHER",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "polarity",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_POLARITY_NEGATIVE",
                    },
                  },
                ],
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "bMagic",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "resist",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_RESIST_BOTH",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "resist",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_RESIST_MAGIC",
                    },
                  },
                ],
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "bPhys",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "resist",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_RESIST_BOTH",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "resist",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_RESIST_PHYSICAL",
                    },
                  },
                ],
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "bPos",
                },
                Name {
                  "value": "bNeg",
                },
                Name {
                  "value": "bMagic",
                },
                Name {
                  "value": "bPhys",
                },
                Name {
                  "value": "bTLife",
                },
                Name {
                  "value": "bAura",
                },
                false,
              ],
            },
            "name": Name {
              "value": "UnitRemoveBuffsEx",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitCountBuffsExBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "polarity",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "resist",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "bTLife",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "bAura",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "bPos",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "polarity",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_POLARITY_EITHER",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "polarity",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_POLARITY_POSITIVE",
                    },
                  },
                ],
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "bNeg",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "polarity",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_POLARITY_EITHER",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "polarity",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_POLARITY_NEGATIVE",
                    },
                  },
                ],
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "bMagic",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "resist",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_RESIST_BOTH",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "resist",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_RESIST_MAGIC",
                    },
                  },
                ],
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "bPhys",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "resist",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_RESIST_BOTH",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "resist",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_BUFF_RESIST_PHYSICAL",
                    },
                  },
                ],
              },
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "bPos",
                    },
                    Name {
                      "value": "bNeg",
                    },
                    Name {
                      "value": "bMagic",
                    },
                    Name {
                      "value": "bPhys",
                    },
                    Name {
                      "value": "bTLife",
                    },
                    Name {
                      "value": "bAura",
                    },
                    false,
                  ],
                },
                "name": Name {
                  "value": "UnitCountBuffsEx",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitRemoveAbilityBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilityId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "abilityId",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitRemoveAbility",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitAddAbilityBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilityId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "abilityId",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitAddAbility",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitRemoveTypeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichType",
            },
            "type": Name {
              "value": "unittype",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichType",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitRemoveType",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitAddTypeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichType",
            },
            "type": Name {
              "value": "unittype",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichType",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitAddType",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitMakeAbilityPermanentBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "permanent",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "abilityId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "permanent",
                    },
                    Name {
                      "value": "abilityId",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitMakeAbilityPermanent",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitExplodedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "exploded",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "exploded",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitExploded",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ExplodeUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                true,
              ],
            },
            "name": Name {
              "value": "SetUnitExploded",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
              ],
            },
            "name": Name {
              "value": "KillUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetTransportUnitBJ",
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetTransportUnit",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLoadedUnitBJ",
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetLoadedUnit",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitInTransportBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichTransport",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "whichTransport",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsUnitInTransport",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitLoadedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsUnitLoaded",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsUnitIllusionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsUnitIllusion",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " This attempts to replace a unit with a new unit type by creating a new",
    },
    Comment {
      "value": " unit of the desired type using the old unit's location, facing, etc.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ReplaceUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "newUnitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "unitStateMethod",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "oldUnit",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Name {
              "value": "whichUnit",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "newUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wasHidden",
            },
            "type": "boolean",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "oldRatio",
            },
            "type": "real",
          },
          EmptyLine {},
          Comment {
            "value": " If we have bogus data, don't attempt the replace.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "oldUnit",
                  },
                  "operator": "==",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_lastReplacedUnit",
                  },
                  "value": Name {
                    "value": "oldUnit",
                  },
                },
                Return {
                  "data": Array [
                    Name {
                      "value": "oldUnit",
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Hide the original unit.",
          },
          JASSSet {
            "name": Name {
              "value": "wasHidden",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "oldUnit",
                  },
                ],
              },
              "name": Name {
                "value": "IsUnitHidden",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "oldUnit",
                },
                false,
              ],
            },
            "name": Name {
              "value": "ShowUnit",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Create the replacement unit.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "newUnitId",
                  },
                  "operator": "==",
                  "right": FourCC {
                    "value": "ugol",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "newUnit",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "oldUnit",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetOwningPlayer",
                              },
                            },
                            Name {
                              "value": "newUnitId",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "oldUnit",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetUnitX",
                              },
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "oldUnit",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetUnitY",
                              },
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "oldUnit",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetUnitFacing",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "CreateUnit",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "newUnit",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "oldUnit",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetOwningPlayer",
                          },
                        },
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "oldUnit",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitX",
                          },
                        },
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "oldUnit",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitY",
                          },
                        },
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "oldUnit",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitFacing",
                          },
                        },
                      ],
                    },
                    "name": Name {
                      "value": "CreateBlightedGoldmine",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Set the unit's life and mana according to the requested method.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "unitStateMethod",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_UNIT_STATE_METHOD_RELATIVE",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "unitStateMethod",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_UNIT_STATE_METHOD_ABSOLUTE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Set the replacement's current life to that of the old unit.",
                    },
                    Comment {
                      "value": " If the new unit has mana, do the same for mana.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "newUnit",
                          },
                          Name {
                            "value": "UNIT_STATE_LIFE",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "oldUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_LIFE",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetUnitState",
                      },
                      "statement": true,
                    },
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "newUnit",
                                  },
                                  Name {
                                    "value": "UNIT_STATE_MAX_MANA",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetUnitState",
                              },
                            },
                            "operator": ">",
                            "right": 0,
                          },
                        ],
                      },
                      "then": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "newUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_MANA",
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "oldUnit",
                                      },
                                      Name {
                                        "value": "UNIT_STATE_MANA",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetUnitState",
                                  },
                                },
                              ],
                            },
                            "name": Name {
                              "value": "SetUnitState",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "unitStateMethod",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_UNIT_STATE_METHOD_DEFAULTS",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " The newly created unit should already have default life and mana.",
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "unitStateMethod",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_UNIT_STATE_METHOD_MAXIMUM",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Use max life and mana.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "newUnit",
                          },
                          Name {
                            "value": "UNIT_STATE_LIFE",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "newUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_MAX_LIFE",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetUnitState",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "newUnit",
                          },
                          Name {
                            "value": "UNIT_STATE_MANA",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "newUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_MAX_MANA",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetUnitState",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized unit state method - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Set the replacement's current/max life ratio to that of the old unit.",
                },
                Comment {
                  "value": " If both units have mana, do the same for mana.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "oldUnit",
                              },
                              Name {
                                "value": "UNIT_STATE_MAX_LIFE",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitState",
                          },
                        },
                        "operator": ">",
                        "right": 0,
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "oldRatio",
                        },
                        "value": BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "oldUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_LIFE",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                          "operator": "/",
                          "right": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "oldUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_MAX_LIFE",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "newUnit",
                            },
                            Name {
                              "value": "UNIT_STATE_LIFE",
                            },
                            BinaryOp {
                              "left": Name {
                                "value": "oldRatio",
                              },
                              "operator": "*",
                              "right": Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "newUnit",
                                    },
                                    Name {
                                      "value": "UNIT_STATE_MAX_LIFE",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetUnitState",
                                },
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "SetUnitState",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                IfThenElse {
                  "condition": BinaryOp {
                    "left": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "oldUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_MAX_MANA",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                          "operator": ">",
                          "right": 0,
                        },
                      ],
                    },
                    "operator": "and",
                    "right": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "newUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_MAX_MANA",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                          "operator": ">",
                          "right": 0,
                        },
                      ],
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "oldRatio",
                        },
                        "value": BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "oldUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_MANA",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                          "operator": "/",
                          "right": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "oldUnit",
                                },
                                Name {
                                  "value": "UNIT_STATE_MAX_MANA",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetUnitState",
                            },
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "newUnit",
                            },
                            Name {
                              "value": "UNIT_STATE_MANA",
                            },
                            BinaryOp {
                              "left": Name {
                                "value": "oldRatio",
                              },
                              "operator": "*",
                              "right": Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "newUnit",
                                    },
                                    Name {
                                      "value": "UNIT_STATE_MAX_MANA",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetUnitState",
                                },
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "SetUnitState",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Mirror properties of the old unit onto the new unit.",
          },
          Comment {
            "value": "call PauseUnit(newUnit, IsUnitPaused(oldUnit))",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "newUnit",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "oldUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetResourceAmount",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetResourceAmount",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If both the old and new units are heroes, handle their hero info.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "oldUnit",
                        },
                        Name {
                          "value": "UNIT_TYPE_HERO",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "IsUnitType",
                    },
                  },
                  "operator": "and",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "newUnit",
                        },
                        Name {
                          "value": "UNIT_TYPE_HERO",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "IsUnitType",
                    },
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "newUnit",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "oldUnit",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetHeroXP",
                        },
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "SetHeroXP",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": 0,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "indexItem",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "oldUnit",
                              },
                              Name {
                                "value": "index",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "UnitItemInSlot",
                          },
                        },
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Name {
                                "value": "indexItem",
                              },
                              "operator": "!=",
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "oldUnit",
                                  },
                                  Name {
                                    "value": "indexItem",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "UnitRemoveItem",
                              },
                              "statement": true,
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "newUnit",
                                  },
                                  Name {
                                    "value": "indexItem",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "UnitAddItem",
                              },
                              "statement": true,
                            },
                          ],
                        },
                      },
                      EmptyLine {},
                      JASSSet {
                        "name": Name {
                          "value": "index",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "index",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "index",
                            },
                            "operator": ">=",
                            "right": Name {
                              "value": "bj_MAX_INVENTORY",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Remove or kill the original unit.  It is sometimes unsafe to remove",
          },
          Comment {
            "value": " hidden units, so kill the original unit if it was previously hidden.",
          },
          IfThenElse {
            "condition": Name {
              "value": "wasHidden",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "oldUnit",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "RemoveUnit",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "oldUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "KillUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "oldUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RemoveUnit",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_lastReplacedUnit",
            },
            "value": Name {
              "value": "newUnit",
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "newUnit",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastReplacedUnitBJ",
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastReplacedUnit",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitPositionLocFacingBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "facing",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "loc",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitPositionLoc",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "facing",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitFacing",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitPositionLocFacingLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "lookAt",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "loc",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitPositionLoc",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                      Name {
                        "value": "lookAt",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "AngleBetweenPoints",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetUnitFacing",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddItemToStockBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "itemId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "currentStock",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "stockMax",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "itemId",
                },
                Name {
                  "value": "currentStock",
                },
                Name {
                  "value": "stockMax",
                },
              ],
            },
            "name": Name {
              "value": "AddItemToStock",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddUnitToStockBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "currentStock",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "stockMax",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "unitId",
                },
                Name {
                  "value": "currentStock",
                },
                Name {
                  "value": "stockMax",
                },
              ],
            },
            "name": Name {
              "value": "AddUnitToStock",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RemoveItemFromStockBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "itemId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "itemId",
                },
              ],
            },
            "name": Name {
              "value": "RemoveItemFromStock",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RemoveUnitFromStockBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "unitId",
                },
              ],
            },
            "name": Name {
              "value": "RemoveUnitFromStock",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitUseFoodBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "enable",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "enable",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitUseFood",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitDamagePointLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "delay",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "amount",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "whichAttack",
            },
            "type": Name {
              "value": "attacktype",
            },
          },
          Param {
            "name": Name {
              "value": "whichDamage",
            },
            "type": Name {
              "value": "damagetype",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "delay",
                    },
                    Name {
                      "value": "radius",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                    Name {
                      "value": "amount",
                    },
                    true,
                    false,
                    Name {
                      "value": "whichAttack",
                    },
                    Name {
                      "value": "whichDamage",
                    },
                    Name {
                      "value": "WEAPON_TYPE_WHOKNOWS",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitDamagePoint",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitDamageTargetBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "target",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "amount",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "whichAttack",
            },
            "type": Name {
              "value": "attacktype",
            },
          },
          Param {
            "name": Name {
              "value": "whichDamage",
            },
            "type": Name {
              "value": "damagetype",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "target",
                    },
                    Name {
                      "value": "amount",
                    },
                    true,
                    false,
                    Name {
                      "value": "whichAttack",
                    },
                    Name {
                      "value": "whichDamage",
                    },
                    Name {
                      "value": "WEAPON_TYPE_WHOKNOWS",
                    },
                  ],
                },
                "name": Name {
                  "value": "UnitDamageTarget",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Destructable Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateDestructableLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "objectid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "facing",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "scale",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "variation",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "destructable",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedDestructable",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "objectid",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "facing",
                  },
                  Name {
                    "value": "scale",
                  },
                  Name {
                    "value": "variation",
                  },
                ],
              },
              "name": Name {
                "value": "CreateDestructable",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedDestructable",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateDeadDestructableLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "objectid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "facing",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "scale",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "variation",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "destructable",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedDestructable",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "objectid",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "facing",
                  },
                  Name {
                    "value": "scale",
                  },
                  Name {
                    "value": "variation",
                  },
                ],
              },
              "name": Name {
                "value": "CreateDeadDestructable",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedDestructable",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedDestructable",
      },
      "returns": Name {
        "value": "destructable",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedDestructable",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowDestructableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "ShowDestructable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDestructableInvulnerableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetDestructableInvulnerable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsDestructableInvulnerableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "d",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsDestructableInvulnerable",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetDestructableLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDestructable",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichDestructable",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetDestructableX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichDestructable",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetDestructableY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnumDestructablesInRectAll",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "actionFunc",
            },
            "type": "code",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
                null,
                Name {
                  "value": "actionFunc",
                },
              ],
            },
            "name": Name {
              "value": "EnumDestructablesInRect",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnumDestructablesInCircleBJFilter",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "destLoc",
            },
            "type": Name {
              "value": "location",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "name": Name {
                      "value": "GetFilterDestructable",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "GetDestructableLoc",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "result",
            },
            "type": "boolean",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "result",
            },
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "destLoc",
                    },
                    Name {
                      "value": "bj_enumDestructableCenter",
                    },
                  ],
                },
                "name": Name {
                  "value": "DistanceBetweenPoints",
                },
              },
              "operator": "<=",
              "right": Name {
                "value": "bj_enumDestructableRadius",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "destLoc",
                },
              ],
            },
            "name": Name {
              "value": "RemoveLocation",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "result",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsDestructableDeadBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetDestructableLife",
                  },
                },
                "operator": "<=",
                "right": 0,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsDestructableAliveBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              UnaryOp {
                "expr": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsDestructableDeadBJ",
                  },
                },
                "operator": "not",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " See GroupPickRandomUnitEnum for the details of this algorithm.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomDestructableInRectBJEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_destRandomConsidered",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_destRandomConsidered",
              },
              "operator": "+",
              "right": 1,
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        1,
                        Name {
                          "value": "bj_destRandomConsidered",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRandomInt",
                    },
                  },
                  "operator": "==",
                  "right": 1,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_destRandomCurrentPick",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "GetEnumDestructable",
                    },
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Picks a random destructable from within a rect, matching a condition",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomDestructableInRectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "filter",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
        ],
      },
      "returns": Name {
        "value": "destructable",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_destRandomConsidered",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "bj_destRandomCurrentPick",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
                Name {
                  "value": "filter",
                },
                FuncRef {
                  "data": Name {
                    "value": "RandomDestructableInRectBJEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "EnumDestructablesInRect",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "DestroyBoolExpr",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_destRandomCurrentPick",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Picks a random destructable from within a rect",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomDestructableInRectSimpleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "destructable",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "RandomDestructableInRectBJ",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Enumerates within a rect, with a filter to narrow the enumeration down",
    },
    Comment {
      "value": " objects within a circular area.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnumDestructablesInCircleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "actionFunc",
            },
            "type": "code",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "radius",
                  },
                  "operator": ">=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_enumDestructableCenter",
                  },
                  "value": Name {
                    "value": "loc",
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_enumDestructableRadius",
                  },
                  "value": Name {
                    "value": "radius",
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "r",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                        Name {
                          "value": "radius",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRectFromCircleBJ",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                      Name {
                        "value": "filterEnumDestructablesInCircleBJ",
                      },
                      Name {
                        "value": "actionFunc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "EnumDestructablesInRect",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RemoveRect",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDestructableLifePercentBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "percent",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                BinaryOp {
                  "left": BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "d",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetDestructableMaxLife",
                      },
                    },
                    "operator": "*",
                    "right": Name {
                      "value": "percent",
                    },
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetDestructableLife",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDestructableMaxLifeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "max",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Name {
                  "value": "max",
                },
              ],
            },
            "name": Name {
              "value": "SetDestructableMaxLife",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ModifyGateBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "gateOperation",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "gateOperation",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_GATEOPERATION_CLOSE",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "gateOperation",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_GATEOPERATION_OPEN",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "d",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetDestructableLife",
                              },
                            },
                            "operator": ">",
                            "right": 0,
                          },
                        ],
                      },
                      "then": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "KillDestructable",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "d",
                          },
                          "death alternate",
                        ],
                      },
                      "name": Name {
                        "value": "SetDestructableAnimation",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "gateOperation",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_GATEOPERATION_DESTROY",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "d",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetDestructableLife",
                              },
                            },
                            "operator": ">",
                            "right": 0,
                          },
                        ],
                      },
                      "then": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "KillDestructable",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "d",
                          },
                          "death",
                        ],
                      },
                      "name": Name {
                        "value": "SetDestructableAnimation",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized gate state - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "d",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetDestructableLife",
                          },
                        },
                        "operator": "<=",
                        "right": 0,
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "d",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "d",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetDestructableMaxLife",
                              },
                            },
                            true,
                          ],
                        },
                        "name": Name {
                          "value": "DestructableRestoreLife",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                      "stand",
                    ],
                  },
                  "name": Name {
                    "value": "SetDestructableAnimation",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Determine the elevator's height from its occlusion height.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetElevatorHeight",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "height",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "height",
            },
            "value": BinaryOp {
              "left": 1,
              "operator": "+",
              "right": Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "d",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetDestructableOccluderHeight",
                        },
                      },
                      "operator": "/",
                      "right": Name {
                        "value": "bj_CLIFFHEIGHT",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "R2I",
                },
              },
            },
          },
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "height",
                    },
                    "operator": "<",
                    "right": 1,
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "height",
                    },
                    "operator": ">",
                    "right": 3,
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "height",
                  },
                  "value": 1,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "height",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " To properly animate an elevator, we must know not only what height we",
    },
    Comment {
      "value": " want to change to, but also what height we are currently at.  This code",
    },
    Comment {
      "value": " determines the elevator's current height from its occlusion height.",
    },
    Comment {
      "value": " Arbitrarily changing an elevator's occlusion height is thus inadvisable.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ChangeElevatorHeight",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "newHeight",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "oldHeight",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " Cap the new height within the supported range.",
          },
          JASSSet {
            "name": Name {
              "value": "newHeight",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  1,
                  Name {
                    "value": "newHeight",
                  },
                ],
              },
              "name": Name {
                "value": "IMaxBJ",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "newHeight",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  3,
                  Name {
                    "value": "newHeight",
                  },
                ],
              },
              "name": Name {
                "value": "IMinBJ",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Find out what height the elevator is already at.",
          },
          JASSSet {
            "name": Name {
              "value": "oldHeight",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "d",
                  },
                ],
              },
              "name": Name {
                "value": "GetElevatorHeight",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Set the elevator's occlusion height.",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                BinaryOp {
                  "left": Name {
                    "value": "bj_CLIFFHEIGHT",
                  },
                  "operator": "*",
                  "right": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "newHeight",
                        },
                        "operator": "-",
                        "right": 1,
                      },
                    ],
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetDestructableOccluderHeight",
            },
            "statement": true,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "newHeight",
                  },
                  "operator": "==",
                  "right": 1,
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "newHeight",
                      },
                      "operator": "==",
                      "right": 2,
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "oldHeight",
                            },
                            "operator": "==",
                            "right": 1,
                          },
                        ],
                      },
                      "elses": Array [
                        ElseIf {
                          "condition": Parens {
                            "data": Array [
                              BinaryOp {
                                "left": Name {
                                  "value": "oldHeight",
                                },
                                "operator": "==",
                                "right": 3,
                              },
                            ],
                          },
                          "statements": Statements {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "d",
                                    },
                                    "birth second",
                                  ],
                                },
                                "name": Name {
                                  "value": "SetDestructableAnimation",
                                },
                                "statement": true,
                              },
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "d",
                                    },
                                    "stand second",
                                  ],
                                },
                                "name": Name {
                                  "value": "QueueDestructableAnimation",
                                },
                                "statement": true,
                              },
                            ],
                          },
                        },
                        Else {
                          "statements": Statements {
                            "body": Array [
                              Comment {
                                "value": " Unrecognized old height - snap to new height.",
                              },
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "d",
                                    },
                                    "stand second",
                                  ],
                                },
                                "name": Name {
                                  "value": "SetDestructableAnimation",
                                },
                                "statement": true,
                              },
                            ],
                          },
                        },
                      ],
                      "then": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                                "death",
                              ],
                            },
                            "name": Name {
                              "value": "SetDestructableAnimation",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                                "stand second",
                              ],
                            },
                            "name": Name {
                              "value": "QueueDestructableAnimation",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "newHeight",
                      },
                      "operator": "==",
                      "right": 3,
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "oldHeight",
                            },
                            "operator": "==",
                            "right": 1,
                          },
                        ],
                      },
                      "elses": Array [
                        ElseIf {
                          "condition": Parens {
                            "data": Array [
                              BinaryOp {
                                "left": Name {
                                  "value": "oldHeight",
                                },
                                "operator": "==",
                                "right": 2,
                              },
                            ],
                          },
                          "statements": Statements {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "d",
                                    },
                                    "death second",
                                  ],
                                },
                                "name": Name {
                                  "value": "SetDestructableAnimation",
                                },
                                "statement": true,
                              },
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "d",
                                    },
                                    "stand third",
                                  ],
                                },
                                "name": Name {
                                  "value": "QueueDestructableAnimation",
                                },
                                "statement": true,
                              },
                            ],
                          },
                        },
                        Else {
                          "statements": Statements {
                            "body": Array [
                              Comment {
                                "value": " Unrecognized old height - snap to new height.",
                              },
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "d",
                                    },
                                    "stand third",
                                  ],
                                },
                                "name": Name {
                                  "value": "SetDestructableAnimation",
                                },
                                "statement": true,
                              },
                            ],
                          },
                        },
                      ],
                      "then": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                                "death third",
                              ],
                            },
                            "name": Name {
                              "value": "SetDestructableAnimation",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                                "stand third",
                              ],
                            },
                            "name": Name {
                              "value": "QueueDestructableAnimation",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized new height - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "oldHeight",
                        },
                        "operator": "==",
                        "right": 2,
                      },
                    ],
                  },
                  "elses": Array [
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "oldHeight",
                            },
                            "operator": "==",
                            "right": 3,
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                                "birth third",
                              ],
                            },
                            "name": Name {
                              "value": "SetDestructableAnimation",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                                "stand",
                              ],
                            },
                            "name": Name {
                              "value": "QueueDestructableAnimation",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Comment {
                            "value": " Unrecognized old height - snap to new height.",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "d",
                                },
                                "stand",
                              ],
                            },
                            "name": Name {
                              "value": "SetDestructableAnimation",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "d",
                            },
                            "birth",
                          ],
                        },
                        "name": Name {
                          "value": "SetDestructableAnimation",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "d",
                            },
                            "stand",
                          ],
                        },
                        "name": Name {
                          "value": "QueueDestructableAnimation",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Grab the unit and throw his own coords in his face, forcing him to push",
    },
    Comment {
      "value": " and shove until he finds a spot where noone will bother him.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "NudgeUnitsInRectEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "nudgee",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumUnit",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nudgee",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "nudgee",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "nudgee",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitY",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetUnitPosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "NudgeItemsInRectEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "nudgee",
            },
            "type": Name {
              "value": "item",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumItem",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nudgee",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "nudgee",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetItemX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "nudgee",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetItemY",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetItemPosition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Nudge the items and units within a given rect ever so gently, so as to",
    },
    Comment {
      "value": " encourage them to find locations where they can peacefully coexist with",
    },
    Comment {
      "value": " pathing restrictions and live happy, fruitful lives.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "NudgeObjectsInRect",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "nudgeArea",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "g",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "nudgeArea",
                },
                null,
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsInRect",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                FuncRef {
                  "data": Name {
                    "value": "NudgeUnitsInRectEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nudgeArea",
                },
                null,
                FuncRef {
                  "data": Name {
                    "value": "NudgeItemsInRectEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "EnumItemsInRect",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "NearbyElevatorExistsEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumDestructable",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "dType",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "d",
                  },
                ],
              },
              "name": Name {
                "value": "GetDestructableTypeId",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "dType",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_CODE01",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "dType",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_CODE02",
                    },
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_elevatorNeighbor",
                  },
                  "value": Name {
                    "value": "d",
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "NearbyElevatorExists",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "findThreshold",
            },
            "type": "real",
            "value": 32,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          EmptyLine {},
          Comment {
            "value": " If another elevator is overlapping this one, ignore the wall.",
          },
          JASSSet {
            "name": Name {
              "value": "r",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "x",
                    },
                    "operator": "-",
                    "right": Name {
                      "value": "findThreshold",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "y",
                    },
                    "operator": "-",
                    "right": Name {
                      "value": "findThreshold",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "x",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "findThreshold",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "y",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "findThreshold",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Rect",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_elevatorNeighbor",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
                null,
                FuncRef {
                  "data": Name {
                    "value": "NearbyElevatorExistsEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "EnumDestructablesInRect",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
              ],
            },
            "name": Name {
              "value": "RemoveRect",
            },
            "statement": true,
          },
          EmptyLine {},
          Return {
            "data": Array [
              BinaryOp {
                "left": Name {
                  "value": "bj_elevatorNeighbor",
                },
                "operator": "!=",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FindElevatorWallBlockerEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_elevatorWallBlocker",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumDestructable",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " This toggles pathing on or off for one wall of an elevator by killing",
    },
    Comment {
      "value": " or reviving a pathing blocker at the appropriate location (and creating",
    },
    Comment {
      "value": " the pathing blocker in the first place, if it does not yet exist).",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ChangeElevatorWallBlocker",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "facing",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "open",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "blocker",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "findThreshold",
            },
            "type": "real",
            "value": 32,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nudgeLength",
            },
            "type": "real",
            "value": BinaryOp {
              "left": 4.25,
              "operator": "*",
              "right": Name {
                "value": "bj_CELLWIDTH",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nudgeWidth",
            },
            "type": "real",
            "value": BinaryOp {
              "left": 1.25,
              "operator": "*",
              "right": Name {
                "value": "bj_CELLWIDTH",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Search for the pathing blocker within the general area.",
          },
          JASSSet {
            "name": Name {
              "value": "r",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "x",
                    },
                    "operator": "-",
                    "right": Name {
                      "value": "findThreshold",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "y",
                    },
                    "operator": "-",
                    "right": Name {
                      "value": "findThreshold",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "x",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "findThreshold",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "y",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "findThreshold",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Rect",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_elevatorWallBlocker",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
                null,
                FuncRef {
                  "data": Name {
                    "value": "FindElevatorWallBlockerEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "EnumDestructablesInRect",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "r",
                },
              ],
            },
            "name": Name {
              "value": "RemoveRect",
            },
            "statement": true,
          },
          JASSSet {
            "name": Name {
              "value": "blocker",
            },
            "value": Name {
              "value": "bj_elevatorWallBlocker",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Ensure that the blocker exists.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "blocker",
                  },
                  "operator": "==",
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "blocker",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetDestructableTypeId",
                        },
                      },
                      "operator": "!=",
                      "right": Name {
                        "value": "bj_ELEVATOR_BLOCKER_CODE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " If a different destructible exists in the blocker's spot, ignore",
                    },
                    Comment {
                      "value": " the request.  (Two destructibles cannot occupy the same location",
                    },
                    Comment {
                      "value": " on the map, so we cannot create an elevator blocker here.)",
                    },
                    Return {
                      "data": Array [
                        undefined,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "blocker",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "bj_ELEVATOR_BLOCKER_CODE",
                        },
                        Name {
                          "value": "x",
                        },
                        Name {
                          "value": "y",
                        },
                        Name {
                          "value": "facing",
                        },
                        1,
                        0,
                      ],
                    },
                    "name": Name {
                      "value": "CreateDeadDestructable",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "open",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Ensure that the blocker is alive.",
                    },
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "blocker",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetDestructableLife",
                              },
                            },
                            "operator": "<=",
                            "right": 0,
                          },
                        ],
                      },
                      "then": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "blocker",
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "blocker",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetDestructableMaxLife",
                                  },
                                },
                                false,
                              ],
                            },
                            "name": Name {
                              "value": "DestructableRestoreLife",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Nudge any objects standing in the blocker's way.",
                    },
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "facing",
                            },
                            "operator": "==",
                            "right": 0,
                          },
                        ],
                      },
                      "elses": Array [
                        ElseIf {
                          "condition": Parens {
                            "data": Array [
                              BinaryOp {
                                "left": Name {
                                  "value": "facing",
                                },
                                "operator": "==",
                                "right": 90,
                              },
                            ],
                          },
                          "statements": Statements {
                            "body": Array [
                              JASSSet {
                                "name": Name {
                                  "value": "r",
                                },
                                "value": Call {
                                  "args": Args {
                                    "body": Array [
                                      BinaryOp {
                                        "left": Name {
                                          "value": "x",
                                        },
                                        "operator": "-",
                                        "right": BinaryOp {
                                          "left": Name {
                                            "value": "nudgeLength",
                                          },
                                          "operator": "/",
                                          "right": 2,
                                        },
                                      },
                                      BinaryOp {
                                        "left": Name {
                                          "value": "y",
                                        },
                                        "operator": "-",
                                        "right": BinaryOp {
                                          "left": Name {
                                            "value": "nudgeWidth",
                                          },
                                          "operator": "/",
                                          "right": 2,
                                        },
                                      },
                                      BinaryOp {
                                        "left": Name {
                                          "value": "x",
                                        },
                                        "operator": "+",
                                        "right": BinaryOp {
                                          "left": Name {
                                            "value": "nudgeLength",
                                          },
                                          "operator": "/",
                                          "right": 2,
                                        },
                                      },
                                      BinaryOp {
                                        "left": Name {
                                          "value": "y",
                                        },
                                        "operator": "+",
                                        "right": BinaryOp {
                                          "left": Name {
                                            "value": "nudgeWidth",
                                          },
                                          "operator": "/",
                                          "right": 2,
                                        },
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "Rect",
                                  },
                                },
                              },
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "r",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "NudgeObjectsInRect",
                                },
                                "statement": true,
                              },
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "r",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "RemoveRect",
                                },
                                "statement": true,
                              },
                            ],
                          },
                        },
                        Else {
                          "statements": Statements {
                            "body": Array [
                              Comment {
                                "value": " Unrecognized blocker angle - don't nudge anything.",
                              },
                            ],
                          },
                        },
                      ],
                      "then": Statements {
                        "body": Array [
                          JASSSet {
                            "name": Name {
                              "value": "r",
                            },
                            "value": Call {
                              "args": Args {
                                "body": Array [
                                  BinaryOp {
                                    "left": Name {
                                      "value": "x",
                                    },
                                    "operator": "-",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "nudgeWidth",
                                      },
                                      "operator": "/",
                                      "right": 2,
                                    },
                                  },
                                  BinaryOp {
                                    "left": Name {
                                      "value": "y",
                                    },
                                    "operator": "-",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "nudgeLength",
                                      },
                                      "operator": "/",
                                      "right": 2,
                                    },
                                  },
                                  BinaryOp {
                                    "left": Name {
                                      "value": "x",
                                    },
                                    "operator": "+",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "nudgeWidth",
                                      },
                                      "operator": "/",
                                      "right": 2,
                                    },
                                  },
                                  BinaryOp {
                                    "left": Name {
                                      "value": "y",
                                    },
                                    "operator": "+",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "nudgeLength",
                                      },
                                      "operator": "/",
                                      "right": 2,
                                    },
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "Rect",
                              },
                            },
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "r",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "NudgeObjectsInRect",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "r",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "RemoveRect",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Ensure that the blocker is dead.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "blocker",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetDestructableLife",
                          },
                        },
                        "operator": ">",
                        "right": 0,
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "blocker",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "KillDestructable",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ChangeElevatorWalls",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "open",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "walls",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "x",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "d",
                  },
                ],
              },
              "name": Name {
                "value": "GetDestructableX",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "y",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "d",
                  },
                ],
              },
              "name": Name {
                "value": "GetDestructableY",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "distToBlocker",
            },
            "type": "real",
            "value": 192,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "distToNeighbor",
            },
            "type": "real",
            "value": 256,
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "walls",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_WALL_TYPE_ALL",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "walls",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_WALL_TYPE_EAST",
                    },
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": Call {
                          "args": Args {
                            "body": Array [
                              BinaryOp {
                                "left": Name {
                                  "value": "x",
                                },
                                "operator": "+",
                                "right": Name {
                                  "value": "distToNeighbor",
                                },
                              },
                              Name {
                                "value": "y",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "NearbyElevatorExists",
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            BinaryOp {
                              "left": Name {
                                "value": "x",
                              },
                              "operator": "+",
                              "right": Name {
                                "value": "distToBlocker",
                              },
                            },
                            Name {
                              "value": "y",
                            },
                            0,
                            Name {
                              "value": "open",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "ChangeElevatorWallBlocker",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "walls",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_WALL_TYPE_ALL",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "walls",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_WALL_TYPE_NORTH",
                    },
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "x",
                              },
                              BinaryOp {
                                "left": Name {
                                  "value": "y",
                                },
                                "operator": "+",
                                "right": Name {
                                  "value": "distToNeighbor",
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "NearbyElevatorExists",
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "x",
                            },
                            BinaryOp {
                              "left": Name {
                                "value": "y",
                              },
                              "operator": "+",
                              "right": Name {
                                "value": "distToBlocker",
                              },
                            },
                            90,
                            Name {
                              "value": "open",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "ChangeElevatorWallBlocker",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "walls",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_WALL_TYPE_ALL",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "walls",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_WALL_TYPE_SOUTH",
                    },
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "x",
                              },
                              BinaryOp {
                                "left": Name {
                                  "value": "y",
                                },
                                "operator": "-",
                                "right": Name {
                                  "value": "distToNeighbor",
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "NearbyElevatorExists",
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "x",
                            },
                            BinaryOp {
                              "left": Name {
                                "value": "y",
                              },
                              "operator": "-",
                              "right": Name {
                                "value": "distToBlocker",
                              },
                            },
                            90,
                            Name {
                              "value": "open",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "ChangeElevatorWallBlocker",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "walls",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_WALL_TYPE_ALL",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "walls",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_ELEVATOR_WALL_TYPE_WEST",
                    },
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": Call {
                          "args": Args {
                            "body": Array [
                              BinaryOp {
                                "left": Name {
                                  "value": "x",
                                },
                                "operator": "-",
                                "right": Name {
                                  "value": "distToNeighbor",
                                },
                              },
                              Name {
                                "value": "y",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "NearbyElevatorExists",
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            BinaryOp {
                              "left": Name {
                                "value": "x",
                              },
                              "operator": "-",
                              "right": Name {
                                "value": "distToBlocker",
                              },
                            },
                            Name {
                              "value": "y",
                            },
                            0,
                            Name {
                              "value": "open",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "ChangeElevatorWallBlocker",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Neutral Building Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WaygateActivateBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "activate",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "waygate",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "waygate",
                },
                Name {
                  "value": "activate",
                },
              ],
            },
            "name": Name {
              "value": "WaygateActivate",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WaygateIsActiveBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "waygate",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "waygate",
                    },
                  ],
                },
                "name": Name {
                  "value": "WaygateIsActive",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WaygateSetDestinationLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "waygate",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "waygate",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
              ],
            },
            "name": Name {
              "value": "WaygateSetDestination",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WaygateGetDestinationLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "waygate",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "waygate",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "WaygateGetDestinationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "waygate",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "WaygateGetDestinationY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitSetUsesAltIconBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "UnitSetUsesAltIcon",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  UI Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForceUIKeyBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "key",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ForceUIKey",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForceUICancelBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "name": Name {
                    "value": "ForceUICancel",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Group and Force Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForGroupBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "callback",
            },
            "type": "code",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the user wants the group destroyed, remember that fact and clear",
          },
          Comment {
            "value": " the flag, in case it is used again in the callback.",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wantDestroy",
            },
            "type": "boolean",
            "value": Name {
              "value": "bj_wantDestroyGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_wantDestroyGroup",
            },
            "value": false,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichGroup",
                },
                Name {
                  "value": "callback",
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If the user wants the group destroyed, do so now.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "wantDestroy",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichGroup",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupAddUnitSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichGroup",
                },
                Name {
                  "value": "whichUnit",
                },
              ],
            },
            "name": Name {
              "value": "GroupAddUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupRemoveUnitSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichGroup",
                },
                Name {
                  "value": "whichUnit",
                },
              ],
            },
            "name": Name {
              "value": "GroupRemoveUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupAddGroupEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_groupAddGroupDest",
                },
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
              ],
            },
            "name": Name {
              "value": "GroupAddUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupAddGroup",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourceGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "destGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the user wants the group destroyed, remember that fact and clear",
          },
          Comment {
            "value": " the flag, in case it is used again in the callback.",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wantDestroy",
            },
            "type": "boolean",
            "value": Name {
              "value": "bj_wantDestroyGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_wantDestroyGroup",
            },
            "value": false,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_groupAddGroupDest",
            },
            "value": Name {
              "value": "destGroup",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourceGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "GroupAddGroupEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If the user wants the group destroyed, do so now.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "wantDestroy",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "sourceGroup",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupRemoveGroupEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_groupRemoveGroupDest",
                },
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
              ],
            },
            "name": Name {
              "value": "GroupRemoveUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupRemoveGroup",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourceGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "destGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the user wants the group destroyed, remember that fact and clear",
          },
          Comment {
            "value": " the flag, in case it is used again in the callback.",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wantDestroy",
            },
            "type": "boolean",
            "value": Name {
              "value": "bj_wantDestroyGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_wantDestroyGroup",
            },
            "value": false,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_groupRemoveGroupDest",
            },
            "value": Name {
              "value": "destGroup",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourceGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "GroupRemoveGroupEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If the user wants the group destroyed, do so now.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "wantDestroy",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "sourceGroup",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForceAddPlayerSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichForce",
                },
                Name {
                  "value": "whichPlayer",
                },
              ],
            },
            "name": Name {
              "value": "ForceAddPlayer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForceRemovePlayerSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichForce",
                },
                Name {
                  "value": "whichPlayer",
                },
              ],
            },
            "name": Name {
              "value": "ForceRemovePlayer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Consider each unit, one at a time, keeping a \\"current pick\\".   Once all units",
    },
    Comment {
      "value": " are considered, this \\"current pick\\" will be the resulting random unit.",
    },
    Comment {
      "value": "",
    },
    Comment {
      "value": " The chance of picking a given unit over the \\"current pick\\" is 1/N, where N is",
    },
    Comment {
      "value": " the number of units considered thusfar (including the current consideration).",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupPickRandomUnitEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_groupRandomConsidered",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_groupRandomConsidered",
              },
              "operator": "+",
              "right": 1,
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        1,
                        Name {
                          "value": "bj_groupRandomConsidered",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRandomInt",
                    },
                  },
                  "operator": "==",
                  "right": 1,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_groupRandomCurrentPick",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "GetEnumUnit",
                    },
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Picks a random unit from a group.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupPickRandomUnit",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the user wants the group destroyed, remember that fact and clear",
          },
          Comment {
            "value": " the flag, in case it is used again in the callback.",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wantDestroy",
            },
            "type": "boolean",
            "value": Name {
              "value": "bj_wantDestroyGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_wantDestroyGroup",
            },
            "value": false,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_groupRandomConsidered",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "bj_groupRandomCurrentPick",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "GroupPickRandomUnitEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If the user wants the group destroyed, do so now.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "wantDestroy",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichGroup",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_groupRandomCurrentPick",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " See GroupPickRandomUnitEnum for the details of this algorithm.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForcePickRandomPlayerEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_forceRandomConsidered",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_forceRandomConsidered",
              },
              "operator": "+",
              "right": 1,
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        1,
                        Name {
                          "value": "bj_forceRandomConsidered",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRandomInt",
                    },
                  },
                  "operator": "==",
                  "right": 1,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_forceRandomCurrentPick",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "GetEnumPlayer",
                    },
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Picks a random player from a force.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForcePickRandomPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "returns": Name {
        "value": "player",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_forceRandomConsidered",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "bj_forceRandomCurrentPick",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichForce",
                },
                FuncRef {
                  "data": Name {
                    "value": "ForcePickRandomPlayerEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForForce",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_forceRandomCurrentPick",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnumUnitsSelected",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "enumFilter",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Param {
            "name": Name {
              "value": "enumAction",
            },
            "type": "code",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "name": Name {
              "value": "SyncSelections",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "enumFilter",
                },
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsSelected",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "enumFilter",
                },
              ],
            },
            "name": Name {
              "value": "DestroyBoolExpr",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "enumAction",
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsInRectMatching",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "filter",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "r",
                },
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsInRect",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "DestroyBoolExpr",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "g",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsInRectAll",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "r",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "GetUnitsInRectMatching",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsInRectOfPlayerFilter",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetFilterUnit",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetOwningPlayer",
                  },
                },
                "operator": "==",
                "right": Name {
                  "value": "bj_groupEnumOwningPlayer",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsInRectOfPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_groupEnumOwningPlayer",
            },
            "value": Name {
              "value": "whichPlayer",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "r",
                },
                Name {
                  "value": "filterGetUnitsInRectOfPlayer",
                },
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsInRect",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "g",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsInRangeOfLocMatching",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "whichLocation",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "filter",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "whichLocation",
                },
                Name {
                  "value": "radius",
                },
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsInRangeOfLoc",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "DestroyBoolExpr",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "g",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsInRangeOfLocAll",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "whichLocation",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "radius",
                    },
                    Name {
                      "value": "whichLocation",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "GetUnitsInRangeOfLocMatching",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsOfTypeIdAllFilter",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetFilterUnit",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitTypeId",
                  },
                },
                "operator": "==",
                "right": Name {
                  "value": "bj_groupEnumTypeId",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsOfTypeIdAll",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitid",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "result",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_groupEnumTypeId",
                  },
                  "value": Name {
                    "value": "unitid",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GroupClear",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      Name {
                        "value": "filterGetUnitsOfTypeIdAll",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GroupEnumUnitsOfPlayer",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                      Name {
                        "value": "result",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GroupAddGroup",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYER_SLOTS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "result",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsOfPlayerMatching",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "filter",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsOfPlayer",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "DestroyBoolExpr",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "g",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsOfPlayerAll",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichPlayer",
                    },
                    null,
                  ],
                },
                "name": Name {
                  "value": "GetUnitsOfPlayerMatching",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsOfPlayerAndTypeIdFilter",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetFilterUnit",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitTypeId",
                  },
                },
                "operator": "==",
                "right": Name {
                  "value": "bj_groupEnumTypeId",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsOfPlayerAndTypeId",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "unitid",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_groupEnumTypeId",
            },
            "value": Name {
              "value": "unitid",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "filterGetUnitsOfPlayerAndTypeId",
                },
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsOfPlayer",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "g",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetUnitsSelectedAll",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "name": Name {
              "value": "SyncSelections",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "whichPlayer",
                },
                null,
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsSelected",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "g",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetForceOfPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "force",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "f",
                },
                Name {
                  "value": "whichPlayer",
                },
              ],
            },
            "name": Name {
              "value": "ForceAddPlayer",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "f",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayersAll",
      },
      "returns": Name {
        "value": "force",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_FORCE_ALL_PLAYERS",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayersByMapControl",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichControl",
            },
            "type": Name {
              "value": "mapcontrol",
            },
          },
        ],
      },
      "returns": Name {
        "value": "force",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "indexPlayer",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetPlayerController",
                      },
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "whichControl",
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "f",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "ForceAddPlayer",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYER_SLOTS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "f",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayersAllies",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "force",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "f",
                },
                Name {
                  "value": "whichPlayer",
                },
                null,
              ],
            },
            "name": Name {
              "value": "ForceEnumAllies",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "f",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayersEnemies",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "force",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "f",
                },
                Name {
                  "value": "whichPlayer",
                },
                null,
              ],
            },
            "name": Name {
              "value": "ForceEnumEnemies",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "f",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayersMatching",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "filter",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
        ],
      },
      "returns": Name {
        "value": "force",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "f",
                },
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "ForceEnumPlayers",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "filter",
                },
              ],
            },
            "name": Name {
              "value": "DestroyBoolExpr",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "f",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CountUnitsInGroupEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_groupCountUnits",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_groupCountUnits",
              },
              "operator": "+",
              "right": 1,
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CountUnitsInGroup",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the user wants the group destroyed, remember that fact and clear",
          },
          Comment {
            "value": " the flag, in case it is used again in the callback.",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wantDestroy",
            },
            "type": "boolean",
            "value": Name {
              "value": "bj_wantDestroyGroup",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_wantDestroyGroup",
            },
            "value": false,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_groupCountUnits",
            },
            "value": 0,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                FuncRef {
                  "data": Name {
                    "value": "CountUnitsInGroupEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If the user wants the group destroyed, do so now.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "wantDestroy",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_groupCountUnits",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CountPlayersInForceEnum",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_forceCountPlayers",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_forceCountPlayers",
              },
              "operator": "+",
              "right": 1,
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CountPlayersInForceBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_forceCountPlayers",
            },
            "value": 0,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "f",
                },
                FuncRef {
                  "data": Name {
                    "value": "CountPlayersInForceEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForForce",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_forceCountPlayers",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRandomSubGroupEnum",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_randomSubGroupWant",
                  },
                  "operator": ">",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": BinaryOp {
                    "left": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "bj_randomSubGroupWant",
                          },
                          "operator": ">=",
                          "right": Name {
                            "value": "bj_randomSubGroupTotal",
                          },
                        },
                      ],
                    },
                    "operator": "or",
                    "right": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                0,
                                1,
                              ],
                            },
                            "name": Name {
                              "value": "GetRandomReal",
                            },
                          },
                          "operator": "<",
                          "right": Name {
                            "value": "bj_randomSubGroupChance",
                          },
                        },
                      ],
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " We either need every remaining unit, or the unit passed its chance check.",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "bj_randomSubGroupGroup",
                            },
                            Call {
                              "name": Name {
                                "value": "GetEnumUnit",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GroupAddUnit",
                        },
                        "statement": true,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_randomSubGroupWant",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "bj_randomSubGroupWant",
                          },
                          "operator": "-",
                          "right": 1,
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_randomSubGroupTotal",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_randomSubGroupTotal",
              },
              "operator": "-",
              "right": 1,
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRandomSubGroup",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "count",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "sourceGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_randomSubGroupGroup",
            },
            "value": Name {
              "value": "g",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_randomSubGroupWant",
            },
            "value": Name {
              "value": "count",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_randomSubGroupTotal",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "sourceGroup",
                  },
                ],
              },
              "name": Name {
                "value": "CountUnitsInGroup",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": BinaryOp {
                    "left": Name {
                      "value": "bj_randomSubGroupWant",
                    },
                    "operator": "<=",
                    "right": 0,
                  },
                  "operator": "or",
                  "right": BinaryOp {
                    "left": Name {
                      "value": "bj_randomSubGroupTotal",
                    },
                    "operator": "<=",
                    "right": 0,
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "g",
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_randomSubGroupChance",
            },
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "bj_randomSubGroupWant",
                    },
                  ],
                },
                "name": Name {
                  "value": "I2R",
                },
              },
              "operator": "/",
              "right": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "bj_randomSubGroupTotal",
                    },
                  ],
                },
                "name": Name {
                  "value": "I2R",
                },
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourceGroup",
                },
                FuncRef {
                  "data": Name {
                    "value": "GetRandomSubGroupEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "g",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LivingPlayerUnitsOfTypeIdFilter",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "filterUnit",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Call {
              "name": Name {
                "value": "GetFilterUnit",
              },
            },
          },
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "filterUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsUnitAliveBJ",
                  },
                },
                "operator": "and",
                "right": BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "filterUnit",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetUnitTypeId",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_livingPlayerUnitsTypeId",
                  },
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CountLivingPlayerUnitsOfTypeId",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "matchedCount",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "g",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_livingPlayerUnitsTypeId",
            },
            "value": Name {
              "value": "unitId",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "filterLivingPlayerUnitsOfTypeId",
                },
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsOfPlayer",
            },
            "statement": true,
          },
          JASSSet {
            "name": Name {
              "value": "matchedCount",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "g",
                  },
                ],
              },
              "name": Name {
                "value": "CountUnitsInGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "matchedCount",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Animation Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ResetUnitAnimation",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                "stand",
              ],
            },
            "name": Name {
              "value": "SetUnitAnimation",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitTimeScalePercent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "percentScale",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                BinaryOp {
                  "left": Name {
                    "value": "percentScale",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetUnitTimeScale",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitScalePercent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "percentScaleX",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "percentScaleY",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "percentScaleZ",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                BinaryOp {
                  "left": Name {
                    "value": "percentScaleX",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
                BinaryOp {
                  "left": Name {
                    "value": "percentScaleY",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
                BinaryOp {
                  "left": Name {
                    "value": "percentScaleZ",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetUnitScale",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " This version differs from the common.j interface in that the alpha value",
    },
    Comment {
      "value": " is reversed so as to be displayed as transparency, and all four parameters",
    },
    Comment {
      "value": " are treated as percentages rather than bytes.",
    },
    Comment {
      "value": "",
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitVertexColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetUnitVertexColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitAddIndicatorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "AddIndicator",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestructableAddIndicatorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDestructable",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichDestructable",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "AddIndicator",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ItemAddIndicatorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichItem",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "AddIndicator",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Sets a unit's facing to point directly at a location.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitFacingToFaceLocTimed",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "target",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitLoc",
            },
            "type": Name {
              "value": "location",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                ],
              },
              "name": Name {
                "value": "GetUnitLoc",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "unitLoc",
                      },
                      Name {
                        "value": "target",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "AngleBetweenPoints",
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitFacingTimed",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "unitLoc",
                },
              ],
            },
            "name": Name {
              "value": "RemoveLocation",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Sets a unit's facing to point directly at another unit.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitFacingToFaceUnitTimed",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "target",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitLoc",
            },
            "type": Name {
              "value": "location",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "target",
                  },
                ],
              },
              "name": Name {
                "value": "GetUnitLoc",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "unitLoc",
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitFacingToFaceLocTimed",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "unitLoc",
                },
              ],
            },
            "name": Name {
              "value": "RemoveLocation",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueueUnitAnimationBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichAnimation",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "whichAnimation",
                },
              ],
            },
            "name": Name {
              "value": "QueueUnitAnimation",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDestructableAnimationBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "whichAnimation",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Name {
                  "value": "whichAnimation",
                },
              ],
            },
            "name": Name {
              "value": "SetDestructableAnimation",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QueueDestructableAnimationBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "whichAnimation",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Name {
                  "value": "whichAnimation",
                },
              ],
            },
            "name": Name {
              "value": "QueueDestructableAnimation",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDestAnimationSpeedPercent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "percentScale",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                BinaryOp {
                  "left": Name {
                    "value": "percentScale",
                  },
                  "operator": "*",
                  "right": 0.01,
                },
              ],
            },
            "name": Name {
              "value": "SetDestructableAnimationSpeed",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Dialog Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DialogDisplayBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichDialog",
            },
            "type": Name {
              "value": "dialog",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "whichDialog",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "DialogDisplay",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DialogSetMessageBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDialog",
            },
            "type": Name {
              "value": "dialog",
            },
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichDialog",
                },
                Name {
                  "value": "message",
                },
              ],
            },
            "name": Name {
              "value": "DialogSetMessage",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DialogAddButtonBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDialog",
            },
            "type": Name {
              "value": "dialog",
            },
          },
          Param {
            "name": Name {
              "value": "buttonText",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "button",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedButton",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichDialog",
                  },
                  Name {
                    "value": "buttonText",
                  },
                  0,
                ],
              },
              "name": Name {
                "value": "DialogAddButton",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedButton",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DialogAddButtonWithHotkeyBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDialog",
            },
            "type": Name {
              "value": "dialog",
            },
          },
          Param {
            "name": Name {
              "value": "buttonText",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "hotkey",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "button",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedButton",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichDialog",
                  },
                  Name {
                    "value": "buttonText",
                  },
                  Name {
                    "value": "hotkey",
                  },
                ],
              },
              "name": Name {
                "value": "DialogAddButton",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedButton",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DialogClearBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDialog",
            },
            "type": Name {
              "value": "dialog",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichDialog",
                },
              ],
            },
            "name": Name {
              "value": "DialogClear",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedButtonBJ",
      },
      "returns": Name {
        "value": "button",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedButton",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetClickedButtonBJ",
      },
      "returns": Name {
        "value": "button",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetClickedButton",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetClickedDialogBJ",
      },
      "returns": Name {
        "value": "dialog",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetClickedDialog",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Alliance Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerAllianceBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourcePlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichAllianceSetting",
            },
            "type": Name {
              "value": "alliancetype",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "otherPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Prevent players from attempting to ally with themselves.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "sourcePlayer",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "otherPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "whichAllianceSetting",
                },
                Name {
                  "value": "value",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Set all flags used by the in-game \\"Ally\\" checkbox.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerAllianceStateAllyBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourcePlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "otherPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "ALLIANCE_PASSIVE",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "ALLIANCE_HELP_REQUEST",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "ALLIANCE_HELP_RESPONSE",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "ALLIANCE_SHARED_XP",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "ALLIANCE_SHARED_SPELLS",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Set all flags used by the in-game \\"Shared Vision\\" checkbox.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerAllianceStateVisionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourcePlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "otherPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "ALLIANCE_SHARED_VISION",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Set all flags used by the in-game \\"Shared Units\\" checkbox.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerAllianceStateControlBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourcePlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "otherPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "ALLIANCE_SHARED_CONTROL",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Set all flags used by the in-game \\"Shared Units\\" checkbox with the Full",
    },
    Comment {
      "value": " Shared Unit Control feature enabled.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerAllianceStateFullControlBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourcePlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "otherPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "ALLIANCE_SHARED_ADVANCED_CONTROL",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerAllianceStateBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourcePlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "otherPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "allianceState",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Prevent players from attempting to ally with themselves.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "sourcePlayer",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "otherPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "allianceState",
              },
              "operator": "==",
              "right": Name {
                "value": "bj_ALLIANCE_UNALLIED",
              },
            },
            "elses": Array [
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "allianceState",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ALLIANCE_UNALLIED_VISION",
                  },
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateAllyBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateVisionBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateFullControlBJ",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "allianceState",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ALLIANCE_ALLIED",
                  },
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateAllyBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateVisionBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateFullControlBJ",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "allianceState",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ALLIANCE_ALLIED_VISION",
                  },
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateAllyBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateVisionBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateFullControlBJ",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "allianceState",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ALLIANCE_ALLIED_UNITS",
                  },
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateAllyBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateVisionBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateFullControlBJ",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "allianceState",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ALLIANCE_ALLIED_ADVUNITS",
                  },
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateAllyBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateVisionBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateFullControlBJ",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "allianceState",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ALLIANCE_NEUTRAL",
                  },
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateAllyBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateVisionBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateFullControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          Name {
                            "value": "ALLIANCE_PASSIVE",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAlliance",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "allianceState",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_ALLIANCE_NEUTRAL_VISION",
                  },
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateAllyBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateVisionBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAllianceStateFullControlBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "sourcePlayer",
                          },
                          Name {
                            "value": "otherPlayer",
                          },
                          Name {
                            "value": "ALLIANCE_PASSIVE",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerAlliance",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized alliance state - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "sourcePlayer",
                      },
                      Name {
                        "value": "otherPlayer",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerAllianceStateAllyBJ",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "sourcePlayer",
                      },
                      Name {
                        "value": "otherPlayer",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerAllianceStateVisionBJ",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "sourcePlayer",
                      },
                      Name {
                        "value": "otherPlayer",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerAllianceStateControlBJ",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "sourcePlayer",
                      },
                      Name {
                        "value": "otherPlayer",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerAllianceStateFullControlBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Set the alliance states for an entire force towards another force.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetForceAllianceStateBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourceForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "targetForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "allianceState",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "sourceIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "targetIndex",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "sourceIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": BinaryOp {
                          "left": Name {
                            "value": "sourceForce",
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "bj_FORCE_ALL_PLAYERS",
                          },
                        },
                        "operator": "or",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "sourceIndex",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "Player",
                                },
                              },
                              Name {
                                "value": "sourceForce",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsPlayerInForce",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "targetIndex",
                        },
                        "value": 0,
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": BinaryOp {
                                      "left": Name {
                                        "value": "targetForce",
                                      },
                                      "operator": "==",
                                      "right": Name {
                                        "value": "bj_FORCE_ALL_PLAYERS",
                                      },
                                    },
                                    "operator": "or",
                                    "right": Call {
                                      "args": Args {
                                        "body": Array [
                                          Call {
                                            "args": Args {
                                              "body": Array [
                                                Name {
                                                  "value": "targetIndex",
                                                },
                                              ],
                                            },
                                            "name": Name {
                                              "value": "Player",
                                            },
                                          },
                                          Name {
                                            "value": "targetForce",
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "IsPlayerInForce",
                                      },
                                    },
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Call {
                                          "args": Args {
                                            "body": Array [
                                              Name {
                                                "value": "sourceIndex",
                                              },
                                            ],
                                          },
                                          "name": Name {
                                            "value": "Player",
                                          },
                                        },
                                        Call {
                                          "args": Args {
                                            "body": Array [
                                              Name {
                                                "value": "targetIndex",
                                              },
                                            ],
                                          },
                                          "name": Name {
                                            "value": "Player",
                                          },
                                        },
                                        Name {
                                          "value": "allianceState",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "SetPlayerAllianceStateBJ",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                            EmptyLine {},
                            JASSSet {
                              "name": Name {
                                "value": "targetIndex",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "targetIndex",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "targetIndex",
                                  },
                                  "operator": "==",
                                  "right": Name {
                                    "value": "bj_MAX_PLAYER_SLOTS",
                                  },
                                },
                              ],
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "sourceIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "sourceIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "sourceIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYER_SLOTS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Test to see if two players are co-allied (allied with each other).",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlayersAreCoAllied",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "playerA",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "playerB",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Players are considered to be allied with themselves.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "playerA",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "playerB",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    true,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Co-allies are both allied with each other.",
          },
          IfThenElse {
            "condition": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "playerA",
                  },
                  Name {
                    "value": "playerB",
                  },
                  Name {
                    "value": "ALLIANCE_PASSIVE",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerAlliance",
              },
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerB",
                        },
                        Name {
                          "value": "playerA",
                        },
                        Name {
                          "value": "ALLIANCE_PASSIVE",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerAlliance",
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      Return {
                        "data": Array [
                          true,
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          },
          Return {
            "data": Array [
              false,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Force (whichPlayer) AI player to share vision and advanced unit control ",
    },
    Comment {
      "value": " with all AI players of its allies.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShareEverythingWithTeamAI",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichPlayer",
                              },
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "PlayersAreCoAllied",
                          },
                        },
                        "operator": "and",
                        "right": BinaryOp {
                          "left": Name {
                            "value": "whichPlayer",
                          },
                          "operator": "!=",
                          "right": Name {
                            "value": "indexPlayer",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "indexPlayer",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetPlayerController",
                                },
                              },
                              "operator": "==",
                              "right": Name {
                                "value": "MAP_CONTROL_COMPUTER",
                              },
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "whichPlayer",
                                  },
                                  Name {
                                    "value": "indexPlayer",
                                  },
                                  Name {
                                    "value": "ALLIANCE_SHARED_VISION",
                                  },
                                  true,
                                ],
                              },
                              "name": Name {
                                "value": "SetPlayerAlliance",
                              },
                              "statement": true,
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "whichPlayer",
                                  },
                                  Name {
                                    "value": "indexPlayer",
                                  },
                                  Name {
                                    "value": "ALLIANCE_SHARED_CONTROL",
                                  },
                                  true,
                                ],
                              },
                              "name": Name {
                                "value": "SetPlayerAlliance",
                              },
                              "statement": true,
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "whichPlayer",
                                  },
                                  Name {
                                    "value": "indexPlayer",
                                  },
                                  Name {
                                    "value": "ALLIANCE_SHARED_ADVANCED_CONTROL",
                                  },
                                  true,
                                ],
                              },
                              "name": Name {
                                "value": "SetPlayerAlliance",
                              },
                              "statement": true,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Force (whichPlayer) to share vision and advanced unit control with all of his/her allies.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShareEverythingWithTeam",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichPlayer",
                              },
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "PlayersAreCoAllied",
                          },
                        },
                        "operator": "and",
                        "right": BinaryOp {
                          "left": Name {
                            "value": "whichPlayer",
                          },
                          "operator": "!=",
                          "right": Name {
                            "value": "indexPlayer",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "ALLIANCE_SHARED_VISION",
                            },
                            true,
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerAlliance",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "ALLIANCE_SHARED_CONTROL",
                            },
                            true,
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerAlliance",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "ALLIANCE_SHARED_CONTROL",
                            },
                            true,
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerAlliance",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "ALLIANCE_SHARED_ADVANCED_CONTROL",
                            },
                            true,
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerAlliance",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Creates a 'Neutral Victim' player slot.  This slot is passive towards all",
    },
    Comment {
      "value": " other players, but all other players are aggressive towards him/her.",
    },
    Comment {
      "value": " ",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ConfigureNeutralVictim",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "neutralVictim",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "bj_PLAYER_NEUTRAL_VICTIM",
                  },
                ],
              },
              "name": Name {
                "value": "Player",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "neutralVictim",
                      },
                      Name {
                        "value": "indexPlayer",
                      },
                      Name {
                        "value": "ALLIANCE_PASSIVE",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerAlliance",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "indexPlayer",
                      },
                      Name {
                        "value": "neutralVictim",
                      },
                      Name {
                        "value": "ALLIANCE_PASSIVE",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerAlliance",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Neutral Victim and Neutral Aggressive should not fight each other.",
          },
          JASSSet {
            "name": Name {
              "value": "indexPlayer",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "PLAYER_NEUTRAL_AGGRESSIVE",
                  },
                ],
              },
              "name": Name {
                "value": "Player",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "neutralVictim",
                },
                Name {
                  "value": "indexPlayer",
                },
                Name {
                  "value": "ALLIANCE_PASSIVE",
                },
                true,
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "indexPlayer",
                },
                Name {
                  "value": "neutralVictim",
                },
                Name {
                  "value": "ALLIANCE_PASSIVE",
                },
                true,
              ],
            },
            "name": Name {
              "value": "SetPlayerAlliance",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Neutral Victim does not give bounties.",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "neutralVictim",
                },
                Name {
                  "value": "PLAYER_STATE_GIVES_BOUNTY",
                },
                0,
              ],
            },
            "name": Name {
              "value": "SetPlayerState",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MakeUnitsPassiveForPlayerEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_PLAYER_NEUTRAL_VICTIM",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Player",
                  },
                },
                false,
              ],
            },
            "name": Name {
              "value": "SetUnitOwner",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Change ownership for every unit of (whichPlayer)'s team to neutral passive.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MakeUnitsPassiveForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerUnits",
            },
            "type": Name {
              "value": "group",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
              ],
            },
            "name": Name {
              "value": "CachePlayerHeroData",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "playerUnits",
                },
                Name {
                  "value": "whichPlayer",
                },
                null,
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsOfPlayer",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "playerUnits",
                },
                FuncRef {
                  "data": Name {
                    "value": "MakeUnitsPassiveForPlayerEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "playerUnits",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Change ownership for every unit of (whichPlayer)'s team to neutral passive.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MakeUnitsPassiveForTeam",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichPlayer",
                        },
                        Name {
                          "value": "indexPlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "PlayersAreCoAllied",
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "MakeUnitsPassiveForPlayer",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Determine whether or not victory/defeat is disabled via cheat codes.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AllowVictoryDefeat",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "gameResult",
            },
            "type": Name {
              "value": "playergameresult",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "gameResult",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "PLAYER_GAME_RESULT_VICTORY",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    UnaryOp {
                      "expr": Call {
                        "name": Name {
                          "value": "IsNoVictoryCheat",
                        },
                      },
                      "operator": "not",
                    },
                  ],
                },
              ],
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "gameResult",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "PLAYER_GAME_RESULT_DEFEAT",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    UnaryOp {
                      "expr": Call {
                        "name": Name {
                          "value": "IsNoDefeatCheat",
                        },
                      },
                      "operator": "not",
                    },
                  ],
                },
              ],
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "gameResult",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "PLAYER_GAME_RESULT_NEUTRAL",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    BinaryOp {
                      "left": Parens {
                        "data": Array [
                          UnaryOp {
                            "expr": Call {
                              "name": Name {
                                "value": "IsNoVictoryCheat",
                              },
                            },
                            "operator": "not",
                          },
                        ],
                      },
                      "operator": "and",
                      "right": Parens {
                        "data": Array [
                          UnaryOp {
                            "expr": Call {
                              "name": Name {
                                "value": "IsNoDefeatCheat",
                              },
                            },
                            "operator": "not",
                          },
                        ],
                      },
                    },
                  ],
                },
              ],
            },
          },
          Return {
            "data": Array [
              true,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EndGameBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "EndGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeVictoryDialogBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "leftGame",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "trigger",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "dialog",
            },
            "value": Call {
              "name": Name {
                "value": "DialogCreate",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "formatString",
            },
            "type": "string",
          },
          EmptyLine {},
          Comment {
            "value": " Display \\"player was victorious\\" or \\"player has left the game\\" message",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "leftGame",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "formatString",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "PLAYER_VICTORIOUS",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "formatString",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        "PLAYER_LEFT_GAME",
                      ],
                    },
                    "name": Name {
                      "value": "GetLocalizedString",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                0,
                0,
                60,
                Name {
                  "value": "formatString",
                },
              ],
            },
            "name": Name {
              "value": "DisplayTimedTextFromPlayer",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      "GAMEOVER_VICTORY_MSG",
                    ],
                  },
                  "name": Name {
                    "value": "GetLocalizedString",
                  },
                },
              ],
            },
            "name": Name {
              "value": "DialogSetMessage",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      "GAMEOVER_CONTINUE_GAME",
                    ],
                  },
                  "name": Name {
                    "value": "GetLocalizedString",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      "GAMEOVER_CONTINUE_GAME",
                    ],
                  },
                  "name": Name {
                    "value": "GetLocalizedHotkey",
                  },
                },
              ],
            },
            "name": Name {
              "value": "DialogAddButton",
            },
            "statement": true,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "t",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                      true,
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_QUIT_GAME",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_QUIT_GAME",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedHotkey",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DialogAddQuitButton",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterDialogButtonEvent",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "d",
                },
                true,
              ],
            },
            "name": Name {
              "value": "DialogDisplay",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "bj_victoryDialogSound",
                },
              ],
            },
            "name": Name {
              "value": "StartSoundForPlayerBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeDefeatDialogBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "leftGame",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "trigger",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "dialog",
            },
            "value": Call {
              "name": Name {
                "value": "DialogCreate",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "formatString",
            },
            "type": "string",
          },
          EmptyLine {},
          Comment {
            "value": " Display \\"player was defeated\\" or \\"player has left the game\\" message",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "leftGame",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "formatString",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "PLAYER_DEFEATED",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "formatString",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        "PLAYER_LEFT_GAME",
                      ],
                    },
                    "name": Name {
                      "value": "GetLocalizedString",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                0,
                0,
                60,
                Name {
                  "value": "formatString",
                },
              ],
            },
            "name": Name {
              "value": "DisplayTimedTextFromPlayer",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      "GAMEOVER_DEFEAT_MSG",
                    ],
                  },
                  "name": Name {
                    "value": "GetLocalizedString",
                  },
                },
              ],
            },
            "name": Name {
              "value": "DialogSetMessage",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Only show the continue button if the game is not over and observers on death are allowed",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": UnaryOp {
                    "expr": Name {
                      "value": "bj_meleeGameOver",
                    },
                    "operator": "not",
                  },
                  "operator": "and",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "MAP_OBSERVERS_ON_DEATH",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "IsMapFlagSet",
                    },
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_CONTINUE_OBSERVING",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_CONTINUE_OBSERVING",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedHotkey",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DialogAddButton",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "t",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                      true,
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_QUIT_GAME",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_QUIT_GAME",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedHotkey",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DialogAddQuitButton",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterDialogButtonEvent",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "d",
                },
                true,
              ],
            },
            "name": Name {
              "value": "DialogDisplay",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "bj_defeatDialogSound",
                },
              ],
            },
            "name": Name {
              "value": "StartSoundForPlayerBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GameOverDialogBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "leftGame",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "trigger",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "dialog",
            },
            "value": Call {
              "name": Name {
                "value": "DialogCreate",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "s",
            },
            "type": "string",
          },
          EmptyLine {},
          Comment {
            "value": " Display \\"player left the game\\" message",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                0,
                0,
                60,
                Call {
                  "args": Args {
                    "body": Array [
                      "PLAYER_LEFT_GAME",
                    ],
                  },
                  "name": Name {
                    "value": "GetLocalizedString",
                  },
                },
              ],
            },
            "name": Name {
              "value": "DisplayTimedTextFromPlayer",
            },
            "statement": true,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "GAME_STATE_DISCONNECTED",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetIntegerGameState",
                    },
                  },
                  "operator": "!=",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "s",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_GAME_OVER",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "s",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        "GAMEOVER_DISCONNECTED",
                      ],
                    },
                    "name": Name {
                      "value": "GetLocalizedString",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Name {
                  "value": "s",
                },
              ],
            },
            "name": Name {
              "value": "DialogSetMessage",
            },
            "statement": true,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "t",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                      true,
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_OK",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_OK",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedHotkey",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DialogAddQuitButton",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterDialogButtonEvent",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "d",
                },
                true,
              ],
            },
            "name": Name {
              "value": "DialogDisplay",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "bj_defeatDialogSound",
                },
              ],
            },
            "name": Name {
              "value": "StartSoundForPlayerBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RemovePlayerPreserveUnitsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "gameResult",
            },
            "type": Name {
              "value": "playergameresult",
            },
          },
          Param {
            "name": Name {
              "value": "leftGame",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "gameResult",
                  },
                ],
              },
              "name": Name {
                "value": "AllowVictoryDefeat",
              },
            },
            "then": Statements {
              "body": Array [
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "gameResult",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RemovePlayer",
                  },
                  "statement": true,
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "gameResult",
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "PLAYER_GAME_RESULT_VICTORY",
                        },
                      },
                    ],
                  },
                  "elses": Array [
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "gameResult",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "PLAYER_GAME_RESULT_DEFEAT",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichPlayer",
                                },
                                Name {
                                  "value": "leftGame",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "MeleeDefeatDialogBJ",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichPlayer",
                                },
                                Name {
                                  "value": "leftGame",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GameOverDialogBJ",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "leftGame",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "MeleeVictoryDialogBJ",
                        },
                        "statement": true,
                      },
                      Return {
                        "data": Array [
                          undefined,
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomVictoryOkBJ",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "bj_isSinglePlayer",
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "PauseGame",
                  },
                  "statement": true,
                },
                Comment {
                  "value": " Bump the difficulty back up to the default.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetDefaultDifficulty",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetGameDifficulty",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_changeLevelMapName",
                  },
                  "operator": "==",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_changeLevelMapName",
                          },
                          Name {
                            "value": "bj_changeLevelShowScores",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "ChangeLevel",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_changeLevelShowScores",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "EndGame",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomVictoryQuitBJ",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "bj_isSinglePlayer",
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "PauseGame",
                  },
                  "statement": true,
                },
                Comment {
                  "value": " Bump the difficulty back up to the default.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetDefaultDifficulty",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetGameDifficulty",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_changeLevelShowScores",
                },
              ],
            },
            "name": Name {
              "value": "EndGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomVictoryDialogBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "trigger",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "dialog",
            },
            "value": Call {
              "name": Name {
                "value": "DialogCreate",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      "GAMEOVER_VICTORY_MSG",
                    ],
                  },
                  "name": Name {
                    "value": "GetLocalizedString",
                  },
                },
              ],
            },
            "name": Name {
              "value": "DialogSetMessage",
            },
            "statement": true,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "t",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_CONTINUE",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_CONTINUE",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedHotkey",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DialogAddButton",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterDialogButtonEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                FuncRef {
                  "data": Name {
                    "value": "CustomVictoryOkBJ",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "t",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_QUIT_MISSION",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_QUIT_MISSION",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedHotkey",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DialogAddButton",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterDialogButtonEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                FuncRef {
                  "data": Name {
                    "value": "CustomVictoryQuitBJ",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "EnableUserControl",
                  },
                  "statement": true,
                },
                IfThenElse {
                  "condition": Name {
                    "value": "bj_isSinglePlayer",
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            true,
                          ],
                        },
                        "name": Name {
                          "value": "PauseGame",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "EnableUserUI",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "d",
                },
                true,
              ],
            },
            "name": Name {
              "value": "DialogDisplay",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "SOUND_VOLUMEGROUP_UI",
                },
                1,
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolumeForPlayerBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "bj_victoryDialogSound",
                },
              ],
            },
            "name": Name {
              "value": "StartSoundForPlayerBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomVictorySkipBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Name {
                    "value": "bj_isSinglePlayer",
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Bump the difficulty back up to the default.",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "name": Name {
                                "value": "GetDefaultDifficulty",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "SetGameDifficulty",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "bj_changeLevelMapName",
                        },
                        "operator": "==",
                      },
                    ],
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_changeLevelMapName",
                                },
                                Name {
                                  "value": "bj_changeLevelShowScores",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "ChangeLevel",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "bj_changeLevelShowScores",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "EndGame",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomVictoryBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "showDialog",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "showScores",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "PLAYER_GAME_RESULT_VICTORY",
                  },
                ],
              },
              "name": Name {
                "value": "AllowVictoryDefeat",
              },
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "PLAYER_GAME_RESULT_VICTORY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RemovePlayer",
                  },
                  "statement": true,
                },
                EmptyLine {},
                IfThenElse {
                  "condition": UnaryOp {
                    "expr": Name {
                      "value": "bj_isSinglePlayer",
                    },
                    "operator": "not",
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            0,
                            0,
                            60,
                            Call {
                              "args": Args {
                                "body": Array [
                                  "PLAYER_VICTORIOUS",
                                ],
                              },
                              "name": Name {
                                "value": "GetLocalizedString",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "DisplayTimedTextFromPlayer",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " UI only needs to be displayed to users.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerController",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "MAP_CONTROL_USER",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "bj_changeLevelShowScores",
                        },
                        "value": Name {
                          "value": "showScores",
                        },
                      },
                      IfThenElse {
                        "condition": Name {
                          "value": "showDialog",
                        },
                        "elses": Array [
                          Else {
                            "statements": Statements {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "whichPlayer",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "CustomVictorySkipBJ",
                                  },
                                  "statement": true,
                                },
                              ],
                            },
                          },
                        ],
                        "then": Statements {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "whichPlayer",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "CustomVictoryDialogBJ",
                              },
                              "statement": true,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomDefeatRestartBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                false,
              ],
            },
            "name": Name {
              "value": "PauseGame",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "RestartGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomDefeatReduceDifficultyBJ",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "diff",
            },
            "type": Name {
              "value": "gamedifficulty",
            },
            "value": Call {
              "name": Name {
                "value": "GetGameDifficulty",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                false,
              ],
            },
            "name": Name {
              "value": "PauseGame",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Knock the difficulty down, if possible.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "diff",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "MAP_DIFFICULTY_EASY",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "diff",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "MAP_DIFFICULTY_NORMAL",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "MAP_DIFFICULTY_EASY",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetGameDifficulty",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "diff",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "MAP_DIFFICULTY_HARD",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "MAP_DIFFICULTY_NORMAL",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetGameDifficulty",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized difficulty",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Sorry, but it doesn't get any easier than this.",
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "RestartGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomDefeatLoadBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                false,
              ],
            },
            "name": Name {
              "value": "PauseGame",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "DisplayLoadDialog",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomDefeatQuitBJ",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "bj_isSinglePlayer",
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "PauseGame",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Bump the difficulty back up to the default.",
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetDefaultDifficulty",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetGameDifficulty",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "EndGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomDefeatDialogBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "trigger",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "d",
            },
            "type": Name {
              "value": "dialog",
            },
            "value": Call {
              "name": Name {
                "value": "DialogCreate",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "d",
                },
                Name {
                  "value": "message",
                },
              ],
            },
            "name": Name {
              "value": "DialogSetMessage",
            },
            "statement": true,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Name {
              "value": "bj_isSinglePlayer",
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "t",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "CreateTrigger",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "t",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "d",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  "GAMEOVER_RESTART",
                                ],
                              },
                              "name": Name {
                                "value": "GetLocalizedString",
                              },
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  "GAMEOVER_RESTART",
                                ],
                              },
                              "name": Name {
                                "value": "GetLocalizedHotkey",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "DialogAddButton",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerRegisterDialogButtonEvent",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "t",
                      },
                      FuncRef {
                        "data": Name {
                          "value": "CustomDefeatRestartBJ",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerAddAction",
                  },
                  "statement": true,
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "name": Name {
                            "value": "GetGameDifficulty",
                          },
                        },
                        "operator": "!=",
                        "right": Name {
                          "value": "MAP_DIFFICULTY_EASY",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "t",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateTrigger",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "t",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "d",
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        "GAMEOVER_REDUCE_DIFFICULTY",
                                      ],
                                    },
                                    "name": Name {
                                      "value": "GetLocalizedString",
                                    },
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        "GAMEOVER_REDUCE_DIFFICULTY",
                                      ],
                                    },
                                    "name": Name {
                                      "value": "GetLocalizedHotkey",
                                    },
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "DialogAddButton",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterDialogButtonEvent",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "t",
                            },
                            FuncRef {
                              "data": Name {
                                "value": "CustomDefeatReduceDifficultyBJ",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerAddAction",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "t",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "CreateTrigger",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "t",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "d",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  "GAMEOVER_LOAD",
                                ],
                              },
                              "name": Name {
                                "value": "GetLocalizedString",
                              },
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  "GAMEOVER_LOAD",
                                ],
                              },
                              "name": Name {
                                "value": "GetLocalizedHotkey",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "DialogAddButton",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerRegisterDialogButtonEvent",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "t",
                      },
                      FuncRef {
                        "data": Name {
                          "value": "CustomDefeatLoadBJ",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerAddAction",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "t",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "d",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_QUIT_MISSION",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            "GAMEOVER_QUIT_MISSION",
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedHotkey",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DialogAddButton",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterDialogButtonEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                FuncRef {
                  "data": Name {
                    "value": "CustomDefeatQuitBJ",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "EnableUserControl",
                  },
                  "statement": true,
                },
                IfThenElse {
                  "condition": Name {
                    "value": "bj_isSinglePlayer",
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            true,
                          ],
                        },
                        "name": Name {
                          "value": "PauseGame",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "EnableUserUI",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "d",
                },
                true,
              ],
            },
            "name": Name {
              "value": "DialogDisplay",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "SOUND_VOLUMEGROUP_UI",
                },
                1,
              ],
            },
            "name": Name {
              "value": "VolumeGroupSetVolumeForPlayerBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "bj_defeatDialogSound",
                },
              ],
            },
            "name": Name {
              "value": "StartSoundForPlayerBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CustomDefeatBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "PLAYER_GAME_RESULT_DEFEAT",
                  },
                ],
              },
              "name": Name {
                "value": "AllowVictoryDefeat",
              },
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "PLAYER_GAME_RESULT_DEFEAT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RemovePlayer",
                  },
                  "statement": true,
                },
                EmptyLine {},
                IfThenElse {
                  "condition": UnaryOp {
                    "expr": Name {
                      "value": "bj_isSinglePlayer",
                    },
                    "operator": "not",
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            0,
                            0,
                            60,
                            Call {
                              "args": Args {
                                "body": Array [
                                  "PLAYER_DEFEATED",
                                ],
                              },
                              "name": Name {
                                "value": "GetLocalizedString",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "DisplayTimedTextFromPlayer",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " UI only needs to be displayed to users.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerController",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "MAP_CONTROL_USER",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "message",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "CustomDefeatDialogBJ",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetNextLevelBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "nextLevel",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "nextLevel",
                  },
                  "operator": "==",
                  "right": "",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "bj_changeLevelMapName",
                      },
                      "value": Name {
                        "value": "nextLevel",
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_changeLevelMapName",
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerOnScoreScreenBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerOnScoreScreen",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Quest Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateQuestBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "questType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "title",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "description",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "iconPath",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "quest",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "required",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "questType",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_QUESTTYPE_REQ_DISCOVERED",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "questType",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_QUESTTYPE_REQ_UNDISCOVERED",
                    },
                  },
                ],
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "discovered",
            },
            "type": "boolean",
            "value": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "questType",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_QUESTTYPE_REQ_DISCOVERED",
                    },
                  },
                ],
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "questType",
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "bj_QUESTTYPE_OPT_DISCOVERED",
                    },
                  },
                ],
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedQuest",
            },
            "value": Call {
              "name": Name {
                "value": "CreateQuest",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedQuest",
                },
                Name {
                  "value": "title",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetTitle",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedQuest",
                },
                Name {
                  "value": "description",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetDescription",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedQuest",
                },
                Name {
                  "value": "iconPath",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetIconPath",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedQuest",
                },
                Name {
                  "value": "required",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetRequired",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedQuest",
                },
                Name {
                  "value": "discovered",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetDiscovered",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedQuest",
                },
                false,
              ],
            },
            "name": Name {
              "value": "QuestSetCompleted",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedQuest",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyQuestBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuest",
                },
              ],
            },
            "name": Name {
              "value": "DestroyQuest",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestSetEnabledBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "enabled",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuest",
                },
                Name {
                  "value": "enabled",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetEnabled",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestSetTitleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
          Param {
            "name": Name {
              "value": "title",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuest",
                },
                Name {
                  "value": "title",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetTitle",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestSetDescriptionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
          Param {
            "name": Name {
              "value": "description",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuest",
                },
                Name {
                  "value": "description",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetDescription",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestSetCompletedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
          Param {
            "name": Name {
              "value": "completed",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuest",
                },
                Name {
                  "value": "completed",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetCompleted",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestSetFailedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
          Param {
            "name": Name {
              "value": "failed",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuest",
                },
                Name {
                  "value": "failed",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetFailed",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestSetDiscoveredBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
          Param {
            "name": Name {
              "value": "discovered",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuest",
                },
                Name {
                  "value": "discovered",
                },
              ],
            },
            "name": Name {
              "value": "QuestSetDiscovered",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedQuestBJ",
      },
      "returns": Name {
        "value": "quest",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedQuest",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateQuestItemBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
          Param {
            "name": Name {
              "value": "description",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "questitem",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedQuestItem",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichQuest",
                  },
                ],
              },
              "name": Name {
                "value": "QuestCreateItem",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedQuestItem",
                },
                Name {
                  "value": "description",
                },
              ],
            },
            "name": Name {
              "value": "QuestItemSetDescription",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedQuestItem",
                },
                false,
              ],
            },
            "name": Name {
              "value": "QuestItemSetCompleted",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedQuestItem",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestItemSetDescriptionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuestItem",
            },
            "type": Name {
              "value": "questitem",
            },
          },
          Param {
            "name": Name {
              "value": "description",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuestItem",
                },
                Name {
                  "value": "description",
                },
              ],
            },
            "name": Name {
              "value": "QuestItemSetDescription",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestItemSetCompletedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuestItem",
            },
            "type": Name {
              "value": "questitem",
            },
          },
          Param {
            "name": Name {
              "value": "completed",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichQuestItem",
                },
                Name {
                  "value": "completed",
                },
              ],
            },
            "name": Name {
              "value": "QuestItemSetCompleted",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedQuestItemBJ",
      },
      "returns": Name {
        "value": "questitem",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedQuestItem",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateDefeatConditionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "description",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "defeatcondition",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedDefeatCondition",
            },
            "value": Call {
              "name": Name {
                "value": "CreateDefeatCondition",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedDefeatCondition",
                },
                Name {
                  "value": "description",
                },
              ],
            },
            "name": Name {
              "value": "DefeatConditionSetDescription",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedDefeatCondition",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyDefeatConditionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichCondition",
            },
            "type": Name {
              "value": "defeatcondition",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichCondition",
                },
              ],
            },
            "name": Name {
              "value": "DestroyDefeatCondition",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DefeatConditionSetDescriptionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichCondition",
            },
            "type": Name {
              "value": "defeatcondition",
            },
          },
          Param {
            "name": Name {
              "value": "description",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichCondition",
                },
                Name {
                  "value": "description",
                },
              ],
            },
            "name": Name {
              "value": "DefeatConditionSetDescription",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedDefeatConditionBJ",
      },
      "returns": Name {
        "value": "defeatcondition",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedDefeatCondition",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FlashQuestDialogButtonBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "FlashQuestDialogButton",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "QuestMessageBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "messageType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "f",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "messageType",
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "bj_QUESTMESSAGE_DISCOVERED",
                        },
                      },
                    ],
                  },
                  "elses": Array [
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_UPDATED",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_QUESTUPDATE",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_QUESTUPDATE",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questUpdatedSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          Call {
                            "name": Name {
                              "value": "FlashQuestDialogButton",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_COMPLETED",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_QUESTDONE",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_QUESTDONE",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questCompletedSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          Call {
                            "name": Name {
                              "value": "FlashQuestDialogButton",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_FAILED",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_QUESTFAILED",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_QUESTFAILED",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questFailedSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          Call {
                            "name": Name {
                              "value": "FlashQuestDialogButton",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_REQUIREMENT",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_QUESTREQUIREMENT",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_MISSIONFAILED",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_MISSIONFAILED",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_MISSIONFAILED",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questFailedSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_HINT",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_HINT",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_HINT",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questHintSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_ALWAYSHINT",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_ALWAYSHINT",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_ALWAYSHINT",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questHintSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_SECRET",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_SECRET",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_SECRET",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questSecretSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_UNITACQUIRED",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_UNITACQUIRED",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_UNITACQUIRED",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questHintSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_UNITAVAILABLE",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_UNITAVAILABLE",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_UNITAVAILABLE",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questHintSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_ITEMACQUIRED",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_ITEMACQUIRED",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_ITEMACQUIRED",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questItemAcquiredSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "messageType",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_QUESTMESSAGE_WARNING",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_WARNING",
                                },
                                " ",
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                0,
                                0,
                                Name {
                                  "value": "bj_TEXT_DELAY_WARNING",
                                },
                                Name {
                                  "value": "message",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DisplayTimedTextToPlayer",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "bj_questWarningSound",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "StartSound",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Comment {
                            "value": " Unrecognized message type - ignore the request.",
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "name": Name {
                                "value": "GetLocalPlayer",
                              },
                            },
                            0,
                            0,
                            Name {
                              "value": "bj_TEXT_DELAY_QUEST",
                            },
                            " ",
                          ],
                        },
                        "name": Name {
                          "value": "DisplayTimedTextToPlayer",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "name": Name {
                                "value": "GetLocalPlayer",
                              },
                            },
                            0,
                            0,
                            Name {
                              "value": "bj_TEXT_DELAY_QUEST",
                            },
                            Name {
                              "value": "message",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "DisplayTimedTextToPlayer",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "bj_questDiscoveredSound",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "StartSound",
                        },
                        "statement": true,
                      },
                      Call {
                        "name": Name {
                          "value": "FlashQuestDialogButton",
                        },
                        "statement": true,
                      },
                      EmptyLine {},
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Timer Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StartTimerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Param {
            "name": Name {
              "value": "periodic",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "timeout",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "timer",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastStartedTimer",
            },
            "value": Name {
              "value": "t",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "t",
                },
                Name {
                  "value": "timeout",
                },
                Name {
                  "value": "periodic",
                },
                null,
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastStartedTimer",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateTimerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "periodic",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "timeout",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "timer",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastStartedTimer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastStartedTimer",
                },
                Name {
                  "value": "timeout",
                },
                Name {
                  "value": "periodic",
                },
                null,
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastStartedTimer",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyTimerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichTimer",
                },
              ],
            },
            "name": Name {
              "value": "DestroyTimer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PauseTimerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "pause",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "pause",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichTimer",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "ResumeTimer",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichTimer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PauseTimer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedTimerBJ",
      },
      "returns": Name {
        "value": "timer",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastStartedTimer",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateTimerDialogBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "t",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Param {
            "name": Name {
              "value": "title",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "timerdialog",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedTimerDialog",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "t",
                  },
                ],
              },
              "name": Name {
                "value": "CreateTimerDialog",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedTimerDialog",
                },
                Name {
                  "value": "title",
                },
              ],
            },
            "name": Name {
              "value": "TimerDialogSetTitle",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedTimerDialog",
                },
                true,
              ],
            },
            "name": Name {
              "value": "TimerDialogDisplay",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTimerDialog",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyTimerDialogBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "td",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "td",
                },
              ],
            },
            "name": Name {
              "value": "DestroyTimerDialog",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TimerDialogSetTitleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "td",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Param {
            "name": Name {
              "value": "title",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "td",
                },
                Name {
                  "value": "title",
                },
              ],
            },
            "name": Name {
              "value": "TimerDialogSetTitle",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TimerDialogSetTitleColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "td",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "td",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TimerDialogSetTitleColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TimerDialogSetTimeColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "td",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "td",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TimerDialogSetTimeColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TimerDialogSetSpeedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "td",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Param {
            "name": Name {
              "value": "speedMultFactor",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "td",
                },
                Name {
                  "value": "speedMultFactor",
                },
              ],
            },
            "name": Name {
              "value": "TimerDialogSetSpeed",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TimerDialogDisplayForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "show",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "td",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "td",
                      },
                      Name {
                        "value": "show",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TimerDialogDisplay",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TimerDialogDisplayBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "show",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "td",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "td",
                },
                Name {
                  "value": "show",
                },
              ],
            },
            "name": Name {
              "value": "TimerDialogDisplay",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedTimerDialogBJ",
      },
      "returns": Name {
        "value": "timerdialog",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTimerDialog",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Leaderboard Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardResizeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "size",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "lb",
                  },
                ],
              },
              "name": Name {
                "value": "LeaderboardGetItemCount",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "lb",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "LeaderboardGetLabelText",
                    },
                  },
                  "operator": "==",
                  "right": "",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "size",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "size",
                    },
                    "operator": "-",
                    "right": 1,
                  },
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Name {
                  "value": "size",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetSizeByItemCount",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetPlayerItemValueBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "val",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardGetPlayerIndex",
                  },
                },
                Name {
                  "value": "val",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetItemValue",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetPlayerItemLabelBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "val",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardGetPlayerIndex",
                  },
                },
                Name {
                  "value": "val",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetItemLabel",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetPlayerItemStyleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "showLabel",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "showValue",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "showIcon",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardGetPlayerIndex",
                  },
                },
                Name {
                  "value": "showLabel",
                },
                Name {
                  "value": "showValue",
                },
                Name {
                  "value": "showIcon",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetItemStyle",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetPlayerItemLabelColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardGetPlayerIndex",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetItemLabelColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetPlayerItemValueColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardGetPlayerIndex",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetItemValueColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetLabelColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetLabelColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetValueColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetValueColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetLabelBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "label",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Name {
                  "value": "label",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetLabel",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardResizeBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSetStyleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "showLabel",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "showNames",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "showValues",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "showIcons",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Name {
                  "value": "showLabel",
                },
                Name {
                  "value": "showNames",
                },
                Name {
                  "value": "showValues",
                },
                Name {
                  "value": "showIcons",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetStyle",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardGetItemCountBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "lb",
                    },
                  ],
                },
                "name": Name {
                  "value": "LeaderboardGetItemCount",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardHasPlayerItemBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "lb",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                  ],
                },
                "name": Name {
                  "value": "LeaderboardHasPlayerItem",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForceSetLeaderboardBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "indexPlayer",
                        },
                        Name {
                          "value": "toForce",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "IsPlayerInForce",
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "lb",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "PlayerSetLeaderboard",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateLeaderboardBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "label",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "leaderboard",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedLeaderboard",
            },
            "value": Call {
              "name": Name {
                "value": "CreateLeaderboard",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedLeaderboard",
                },
                Name {
                  "value": "label",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSetLabel",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedLeaderboard",
                },
                Name {
                  "value": "toForce",
                },
              ],
            },
            "name": Name {
              "value": "ForceSetLeaderboardBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedLeaderboard",
                },
                true,
              ],
            },
            "name": Name {
              "value": "LeaderboardDisplay",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedLeaderboard",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyLeaderboardBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
              ],
            },
            "name": Name {
              "value": "DestroyLeaderboard",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardDisplayBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "show",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Name {
                  "value": "show",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardDisplay",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardAddItemBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "label",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardHasPlayerItem",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardRemovePlayerItem",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Name {
                  "value": "label",
                },
                Name {
                  "value": "value",
                },
                Name {
                  "value": "whichPlayer",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardAddItem",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardResizeBJ",
            },
            "statement": true,
          },
          Comment {
            "value": "call LeaderboardSetSizeByItemCount(lb, LeaderboardGetItemCount(lb))",
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardRemovePlayerItemBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Name {
                  "value": "whichPlayer",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardRemovePlayerItem",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardResizeBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSortItemsBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "sortType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "ascending",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "sortType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_SORTTYPE_SORTBYVALUE",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "sortType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_SORTTYPE_SORTBYPLAYER",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "lb",
                          },
                          Name {
                            "value": "ascending",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "LeaderboardSortItemsByPlayer",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "sortType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_SORTTYPE_SORTBYLABEL",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "lb",
                          },
                          Name {
                            "value": "ascending",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "LeaderboardSortItemsByLabel",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized sort type - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "ascending",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardSortItemsByValue",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSortItemsByPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "ascending",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Name {
                  "value": "ascending",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSortItemsByPlayer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardSortItemsByLabelBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "ascending",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "lb",
                },
                Name {
                  "value": "ascending",
                },
              ],
            },
            "name": Name {
              "value": "LeaderboardSortItemsByLabel",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardGetPlayerIndexBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "lb",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "LeaderboardGetPlayerIndex",
                  },
                },
                "operator": "+",
                "right": 1,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns the player who is occupying a specified position in a leaderboard.",
    },
    Comment {
      "value": " The position parameter is expected in the range of 1..16.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LeaderboardGetIndexedPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "position",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "lb",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
        ],
      },
      "returns": Name {
        "value": "player",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "lb",
                              },
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "LeaderboardGetPlayerIndex",
                          },
                        },
                        "operator": "==",
                        "right": BinaryOp {
                          "left": Name {
                            "value": "position",
                          },
                          "operator": "-",
                          "right": 1,
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Return {
                        "data": Array [
                          Name {
                            "value": "indexPlayer",
                          },
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "PLAYER_NEUTRAL_PASSIVE",
                    },
                  ],
                },
                "name": Name {
                  "value": "Player",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlayerGetLeaderboardBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "leaderboard",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichPlayer",
                    },
                  ],
                },
                "name": Name {
                  "value": "PlayerGetLeaderboard",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedLeaderboard",
      },
      "returns": Name {
        "value": "leaderboard",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedLeaderboard",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Multiboard Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateMultiboardBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "cols",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "rows",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "title",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "multiboard",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedMultiboard",
            },
            "value": Call {
              "name": Name {
                "value": "CreateMultiboard",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedMultiboard",
                },
                Name {
                  "value": "rows",
                },
              ],
            },
            "name": Name {
              "value": "MultiboardSetRowCount",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedMultiboard",
                },
                Name {
                  "value": "cols",
                },
              ],
            },
            "name": Name {
              "value": "MultiboardSetColumnCount",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedMultiboard",
                },
                Name {
                  "value": "title",
                },
              ],
            },
            "name": Name {
              "value": "MultiboardSetTitleText",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedMultiboard",
                },
                true,
              ],
            },
            "name": Name {
              "value": "MultiboardDisplay",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedMultiboard",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyMultiboardBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "mb",
                },
              ],
            },
            "name": Name {
              "value": "DestroyMultiboard",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedMultiboard",
      },
      "returns": Name {
        "value": "multiboard",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedMultiboard",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardDisplayBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "show",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "mb",
                },
                Name {
                  "value": "show",
                },
              ],
            },
            "name": Name {
              "value": "MultiboardDisplay",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardMinimizeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "minimize",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "mb",
                },
                Name {
                  "value": "minimize",
                },
              ],
            },
            "name": Name {
              "value": "MultiboardMinimize",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardSetTitleTextColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "mb",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "MultiboardSetTitleTextColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardAllowDisplayBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                UnaryOp {
                  "expr": Name {
                    "value": "flag",
                  },
                  "operator": "not",
                },
              ],
            },
            "name": Name {
              "value": "MultiboardSuppressDisplay",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardSetItemStyleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
          Param {
            "name": Name {
              "value": "col",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "row",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "showValue",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "showIcon",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "curRow",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "curCol",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numRows",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetRowCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numCols",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetColumnCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "mbitem",
            },
            "type": Name {
              "value": "multiboarditem",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Loop over rows, using 1-based index",
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "curRow",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "curRow",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "curRow",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "numRows",
                      },
                    },
                  ],
                },
                EmptyLine {},
                Comment {
                  "value": " Apply setting to the requested row, or all rows (if row is 0)",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": 0,
                        },
                        "operator": "or",
                        "right": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "curRow",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Loop over columns, using 1-based index",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "curCol",
                        },
                        "value": 0,
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "curCol",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "curCol",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "curCol",
                                  },
                                  "operator": ">",
                                  "right": Name {
                                    "value": "numCols",
                                  },
                                },
                              ],
                            },
                            EmptyLine {},
                            Comment {
                              "value": " Apply setting to the requested column, or all columns (if col is 0)",
                            },
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": 0,
                                    },
                                    "operator": "or",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": Name {
                                        "value": "curCol",
                                      },
                                    },
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  JASSSet {
                                    "name": Name {
                                      "value": "mbitem",
                                    },
                                    "value": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "mb",
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curRow",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curCol",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "MultiboardGetItem",
                                      },
                                    },
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                        Name {
                                          "value": "showValue",
                                        },
                                        Name {
                                          "value": "showIcon",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardSetItemStyle",
                                    },
                                    "statement": true,
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardReleaseItem",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardSetItemValueBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
          Param {
            "name": Name {
              "value": "col",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "row",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "val",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "curRow",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "curCol",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numRows",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetRowCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numCols",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetColumnCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "mbitem",
            },
            "type": Name {
              "value": "multiboarditem",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Loop over rows, using 1-based index",
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "curRow",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "curRow",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "curRow",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "numRows",
                      },
                    },
                  ],
                },
                EmptyLine {},
                Comment {
                  "value": " Apply setting to the requested row, or all rows (if row is 0)",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": 0,
                        },
                        "operator": "or",
                        "right": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "curRow",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Loop over columns, using 1-based index",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "curCol",
                        },
                        "value": 0,
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "curCol",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "curCol",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "curCol",
                                  },
                                  "operator": ">",
                                  "right": Name {
                                    "value": "numCols",
                                  },
                                },
                              ],
                            },
                            EmptyLine {},
                            Comment {
                              "value": " Apply setting to the requested column, or all columns (if col is 0)",
                            },
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": 0,
                                    },
                                    "operator": "or",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": Name {
                                        "value": "curCol",
                                      },
                                    },
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  JASSSet {
                                    "name": Name {
                                      "value": "mbitem",
                                    },
                                    "value": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "mb",
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curRow",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curCol",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "MultiboardGetItem",
                                      },
                                    },
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                        Name {
                                          "value": "val",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardSetItemValue",
                                    },
                                    "statement": true,
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardReleaseItem",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardSetItemColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
          Param {
            "name": Name {
              "value": "col",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "row",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "curRow",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "curCol",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numRows",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetRowCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numCols",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetColumnCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "mbitem",
            },
            "type": Name {
              "value": "multiboarditem",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Loop over rows, using 1-based index",
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "curRow",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "curRow",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "curRow",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "numRows",
                      },
                    },
                  ],
                },
                EmptyLine {},
                Comment {
                  "value": " Apply setting to the requested row, or all rows (if row is 0)",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": 0,
                        },
                        "operator": "or",
                        "right": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "curRow",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Loop over columns, using 1-based index",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "curCol",
                        },
                        "value": 0,
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "curCol",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "curCol",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "curCol",
                                  },
                                  "operator": ">",
                                  "right": Name {
                                    "value": "numCols",
                                  },
                                },
                              ],
                            },
                            EmptyLine {},
                            Comment {
                              "value": " Apply setting to the requested column, or all columns (if col is 0)",
                            },
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": 0,
                                    },
                                    "operator": "or",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": Name {
                                        "value": "curCol",
                                      },
                                    },
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  JASSSet {
                                    "name": Name {
                                      "value": "mbitem",
                                    },
                                    "value": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "mb",
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curRow",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curCol",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "MultiboardGetItem",
                                      },
                                    },
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                        Call {
                                          "args": Args {
                                            "body": Array [
                                              Name {
                                                "value": "red",
                                              },
                                            ],
                                          },
                                          "name": Name {
                                            "value": "PercentTo255",
                                          },
                                        },
                                        Call {
                                          "args": Args {
                                            "body": Array [
                                              Name {
                                                "value": "green",
                                              },
                                            ],
                                          },
                                          "name": Name {
                                            "value": "PercentTo255",
                                          },
                                        },
                                        Call {
                                          "args": Args {
                                            "body": Array [
                                              Name {
                                                "value": "blue",
                                              },
                                            ],
                                          },
                                          "name": Name {
                                            "value": "PercentTo255",
                                          },
                                        },
                                        Call {
                                          "args": Args {
                                            "body": Array [
                                              BinaryOp {
                                                "left": 100,
                                                "operator": "-",
                                                "right": Name {
                                                  "value": "transparency",
                                                },
                                              },
                                            ],
                                          },
                                          "name": Name {
                                            "value": "PercentTo255",
                                          },
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardSetItemValueColor",
                                    },
                                    "statement": true,
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardReleaseItem",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardSetItemWidthBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
          Param {
            "name": Name {
              "value": "col",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "row",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "width",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "curRow",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "curCol",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numRows",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetRowCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numCols",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetColumnCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "mbitem",
            },
            "type": Name {
              "value": "multiboarditem",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Loop over rows, using 1-based index",
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "curRow",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "curRow",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "curRow",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "numRows",
                      },
                    },
                  ],
                },
                EmptyLine {},
                Comment {
                  "value": " Apply setting to the requested row, or all rows (if row is 0)",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": 0,
                        },
                        "operator": "or",
                        "right": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "curRow",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Loop over columns, using 1-based index",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "curCol",
                        },
                        "value": 0,
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "curCol",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "curCol",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "curCol",
                                  },
                                  "operator": ">",
                                  "right": Name {
                                    "value": "numCols",
                                  },
                                },
                              ],
                            },
                            EmptyLine {},
                            Comment {
                              "value": " Apply setting to the requested column, or all columns (if col is 0)",
                            },
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": 0,
                                    },
                                    "operator": "or",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": Name {
                                        "value": "curCol",
                                      },
                                    },
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  JASSSet {
                                    "name": Name {
                                      "value": "mbitem",
                                    },
                                    "value": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "mb",
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curRow",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curCol",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "MultiboardGetItem",
                                      },
                                    },
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                        BinaryOp {
                                          "left": Name {
                                            "value": "width",
                                          },
                                          "operator": "/",
                                          "right": 100,
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardSetItemWidth",
                                    },
                                    "statement": true,
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardReleaseItem",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MultiboardSetItemIconBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "mb",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
          Param {
            "name": Name {
              "value": "col",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "row",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "iconFileName",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "curRow",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "curCol",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numRows",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetRowCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "numCols",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "mb",
                  },
                ],
              },
              "name": Name {
                "value": "MultiboardGetColumnCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "mbitem",
            },
            "type": Name {
              "value": "multiboarditem",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Loop over rows, using 1-based index",
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "curRow",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "curRow",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "curRow",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "numRows",
                      },
                    },
                  ],
                },
                EmptyLine {},
                Comment {
                  "value": " Apply setting to the requested row, or all rows (if row is 0)",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": 0,
                        },
                        "operator": "or",
                        "right": BinaryOp {
                          "left": Name {
                            "value": "row",
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "curRow",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Loop over columns, using 1-based index",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "curCol",
                        },
                        "value": 0,
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "curCol",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "curCol",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "curCol",
                                  },
                                  "operator": ">",
                                  "right": Name {
                                    "value": "numCols",
                                  },
                                },
                              ],
                            },
                            EmptyLine {},
                            Comment {
                              "value": " Apply setting to the requested column, or all columns (if col is 0)",
                            },
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": 0,
                                    },
                                    "operator": "or",
                                    "right": BinaryOp {
                                      "left": Name {
                                        "value": "col",
                                      },
                                      "operator": "==",
                                      "right": Name {
                                        "value": "curCol",
                                      },
                                    },
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  JASSSet {
                                    "name": Name {
                                      "value": "mbitem",
                                    },
                                    "value": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "mb",
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curRow",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                          BinaryOp {
                                            "left": Name {
                                              "value": "curCol",
                                            },
                                            "operator": "-",
                                            "right": 1,
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "MultiboardGetItem",
                                      },
                                    },
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                        Name {
                                          "value": "iconFileName",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardSetItemIcon",
                                    },
                                    "statement": true,
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "mbitem",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MultiboardReleaseItem",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Text Tag Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Scale the font size linearly such that size 10 equates to height 0.023.",
    },
    Comment {
      "value": " Screen-relative font heights are harder to grasp and than font sizes.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TextTagSize2Height",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "size",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": BinaryOp {
                  "left": Name {
                    "value": "size",
                  },
                  "operator": "*",
                  "right": 0.023,
                },
                "operator": "/",
                "right": 10,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Scale the speed linearly such that speed 128 equates to 0.071.",
    },
    Comment {
      "value": " Screen-relative speeds are hard to grasp.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TextTagSpeed2Velocity",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "speed",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": BinaryOp {
                  "left": Name {
                    "value": "speed",
                  },
                  "operator": "*",
                  "right": 0.071,
                },
                "operator": "/",
                "right": 128,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "transparency",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagVelocityBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "speed",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "angle",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "vel",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "speed",
                  },
                ],
              },
              "name": Name {
                "value": "TextTagSpeed2Velocity",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "xvel",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Name {
                "value": "vel",
              },
              "operator": "*",
              "right": Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "angle",
                      },
                      "operator": "*",
                      "right": Name {
                        "value": "bj_DEGTORAD",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Cos",
                },
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "yvel",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Name {
                "value": "vel",
              },
              "operator": "*",
              "right": Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "angle",
                      },
                      "operator": "*",
                      "right": Name {
                        "value": "bj_DEGTORAD",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Sin",
                },
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Name {
                  "value": "xvel",
                },
                Name {
                  "value": "yvel",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagVelocity",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagTextBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "s",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "size",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "textHeight",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "size",
                  },
                ],
              },
              "name": Name {
                "value": "TextTagSize2Height",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Name {
                  "value": "s",
                },
                Name {
                  "value": "textHeight",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagText",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagPosBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "zOffset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "zOffset",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagPos",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagPosUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "zOffset",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "zOffset",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagPosUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagSuspendedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagSuspended",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagPermanentBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagPermanent",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagAgeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "age",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Name {
                  "value": "age",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagAge",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagLifespanBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "lifespan",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Name {
                  "value": "lifespan",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagLifespan",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetTextTagFadepointBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "fadepoint",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
                Name {
                  "value": "fadepoint",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagFadepoint",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateTextTagLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "s",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "zOffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "size",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "texttag",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedTextTag",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTextTag",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedTextTag",
                },
                Name {
                  "value": "s",
                },
                Name {
                  "value": "size",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagTextBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedTextTag",
                },
                Name {
                  "value": "loc",
                },
                Name {
                  "value": "zOffset",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagPosBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedTextTag",
                },
                Name {
                  "value": "red",
                },
                Name {
                  "value": "green",
                },
                Name {
                  "value": "blue",
                },
                Name {
                  "value": "transparency",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagColorBJ",
            },
            "statement": true,
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTextTag",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CreateTextTagUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "s",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "zOffset",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "size",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "transparency",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "texttag",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedTextTag",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTextTag",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedTextTag",
                },
                Name {
                  "value": "s",
                },
                Name {
                  "value": "size",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagTextBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedTextTag",
                },
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "zOffset",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagPosUnitBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_lastCreatedTextTag",
                },
                Name {
                  "value": "red",
                },
                Name {
                  "value": "green",
                },
                Name {
                  "value": "blue",
                },
                Name {
                  "value": "transparency",
                },
              ],
            },
            "name": Name {
              "value": "SetTextTagColorBJ",
            },
            "statement": true,
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTextTag",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DestroyTextTagBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tt",
                },
              ],
            },
            "name": Name {
              "value": "DestroyTextTag",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowTextTagForceBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "show",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "tt",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "whichForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "tt",
                      },
                      Name {
                        "value": "show",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetTextTagVisibility",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedTextTag",
      },
      "returns": Name {
        "value": "texttag",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedTextTag",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Cinematic Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PauseGameOn",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "PauseGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PauseGameOff",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                false,
              ],
            },
            "name": Name {
              "value": "PauseGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUserControlForceOn",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "whichForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "EnableUserControl",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUserControlForceOff",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "whichForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "EnableUserControl",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowInterfaceForceOn",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "fadeDuration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "whichForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      true,
                      Name {
                        "value": "fadeDuration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ShowInterface",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowInterfaceForceOff",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "fadeDuration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "whichForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                      Name {
                        "value": "fadeDuration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ShowInterface",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PingMinimapForForce",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "whichForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "x",
                      },
                      Name {
                        "value": "y",
                      },
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PingMinimap",
                  },
                  "statement": true,
                },
                Comment {
                  "value": "call StartSound(bj_pingMinimapSound)",
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PingMinimapLocForForce",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichForce",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "PingMinimapForForce",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PingMinimapForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "whichPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "x",
                      },
                      Name {
                        "value": "y",
                      },
                      Name {
                        "value": "duration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PingMinimap",
                  },
                  "statement": true,
                },
                Comment {
                  "value": "call StartSound(bj_pingMinimapSound)",
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PingMinimapLocForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "PingMinimapForPlayer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PingMinimapForForceEx",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "style",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "red255",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "red",
                  },
                ],
              },
              "name": Name {
                "value": "PercentTo255",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "green255",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "green",
                  },
                ],
              },
              "name": Name {
                "value": "PercentTo255",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "blue255",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "blue",
                  },
                ],
              },
              "name": Name {
                "value": "PercentTo255",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "whichForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                EmptyLine {},
                Comment {
                  "value": " Prevent 100% red simple and flashy pings, as they become \\"attack\\" pings.",
                },
                IfThenElse {
                  "condition": BinaryOp {
                    "left": BinaryOp {
                      "left": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "red255",
                            },
                            "operator": "==",
                            "right": 255,
                          },
                        ],
                      },
                      "operator": "and",
                      "right": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "green255",
                            },
                            "operator": "==",
                            "right": 0,
                          },
                        ],
                      },
                    },
                    "operator": "and",
                    "right": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "blue255",
                          },
                          "operator": "==",
                          "right": 0,
                        },
                      ],
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "red255",
                        },
                        "value": 254,
                      },
                    ],
                  },
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "style",
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "bj_MINIMAPPINGSTYLE_SIMPLE",
                        },
                      },
                    ],
                  },
                  "elses": Array [
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "style",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_MINIMAPPINGSTYLE_FLASHY",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "x",
                                },
                                Name {
                                  "value": "y",
                                },
                                Name {
                                  "value": "duration",
                                },
                                Name {
                                  "value": "red255",
                                },
                                Name {
                                  "value": "green255",
                                },
                                Name {
                                  "value": "blue255",
                                },
                                true,
                              ],
                            },
                            "name": Name {
                              "value": "PingMinimapEx",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "style",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_MINIMAPPINGSTYLE_ATTACK",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "x",
                                },
                                Name {
                                  "value": "y",
                                },
                                Name {
                                  "value": "duration",
                                },
                                255,
                                0,
                                0,
                                false,
                              ],
                            },
                            "name": Name {
                              "value": "PingMinimapEx",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Comment {
                            "value": " Unrecognized ping style - ignore the request.",
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "x",
                            },
                            Name {
                              "value": "y",
                            },
                            Name {
                              "value": "duration",
                            },
                            Name {
                              "value": "red255",
                            },
                            Name {
                              "value": "green255",
                            },
                            Name {
                              "value": "blue255",
                            },
                            false,
                          ],
                        },
                        "name": Name {
                          "value": "PingMinimapEx",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": "call StartSound(bj_pingMinimapSound)",
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PingMinimapLocForForceEx",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "style",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichForce",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "loc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetLocationY",
                  },
                },
                Name {
                  "value": "duration",
                },
                Name {
                  "value": "style",
                },
                Name {
                  "value": "red",
                },
                Name {
                  "value": "green",
                },
                Name {
                  "value": "blue",
                },
              ],
            },
            "name": Name {
              "value": "PingMinimapForForceEx",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnableWorldFogBoundaryBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "enable",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "f",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enable",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "EnableWorldFogBoundary",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "EnableOcclusionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "enable",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "f",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "f",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "enable",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "EnableOcclusion",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Cinematic Transmission Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " If cancelled, stop the sound and end the cinematic scene.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CancelCineSceneBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_cineSceneLastSound",
                },
                true,
              ],
            },
            "name": Name {
              "value": "StopSoundBJ",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "EndCinematicScene",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Init a trigger to listen for END_CINEMATIC events and respond to them if",
    },
    Comment {
      "value": " a cinematic scene is in progress.  For performance reasons, this should",
    },
    Comment {
      "value": " only be called once a cinematic scene has been started, so that maps",
    },
    Comment {
      "value": " lacking such scenes do not bother to register for these events.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TryInitCinematicBehaviorBJ",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_cineSceneBeingSkipped",
                  },
                  "operator": "==",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_cineSceneBeingSkipped",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "CreateTrigger",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": 0,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "bj_cineSceneBeingSkipped",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "index",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "Player",
                              },
                            },
                            Name {
                              "value": "EVENT_PLAYER_END_CINEMATIC",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerEvent",
                        },
                        "statement": true,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "index",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "index",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "index",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_MAX_PLAYERS",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_cineSceneBeingSkipped",
                      },
                      FuncRef {
                        "data": Name {
                          "value": "CancelCineSceneBJ",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerAddAction",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCinematicSceneBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "portraitUnitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "color",
            },
            "type": Name {
              "value": "playercolor",
            },
          },
          Param {
            "name": Name {
              "value": "speakerTitle",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "text",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "sceneDuration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "voiceoverDuration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_cineSceneLastSound",
            },
            "value": Name {
              "value": "soundHandle",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "portraitUnitId",
                },
                Name {
                  "value": "color",
                },
                Name {
                  "value": "speakerTitle",
                },
                Name {
                  "value": "text",
                },
                Name {
                  "value": "sceneDuration",
                },
                Name {
                  "value": "voiceoverDuration",
                },
              ],
            },
            "name": Name {
              "value": "SetCinematicScene",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
              ],
            },
            "name": Name {
              "value": "PlaySoundBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetTransmissionDuration",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "timeType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "timeVal",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "timeType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_TIMETYPE_ADD",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "timeType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_TIMETYPE_SET",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "duration",
                      },
                      "value": Name {
                        "value": "timeVal",
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "timeType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_TIMETYPE_SUB",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "duration",
                      },
                      "value": BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "soundHandle",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetSoundDurationBJ",
                          },
                        },
                        "operator": "-",
                        "right": Name {
                          "value": "timeVal",
                        },
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized timeType - ignore timeVal.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "duration",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "soundHandle",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetSoundDurationBJ",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "duration",
                  },
                  "value": BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "soundHandle",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetSoundDurationBJ",
                      },
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "timeVal",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Make sure we have a non-negative duration.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "duration",
                  },
                  "operator": "<",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "duration",
                  },
                  "value": 0,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "duration",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WaitTransmissionDuration",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "timeType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "timeVal",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "timeType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_TIMETYPE_SET",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "soundHandle",
                      },
                      "operator": "==",
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " If the sound does not exist, perform a default length wait.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_NOTHING_SOUND_DURATION",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "TriggerSleepAction",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "timeType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_TIMETYPE_SUB",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " If the transmission is cutting off the sound, wait for the sound",
                    },
                    Comment {
                      "value": " to be mostly finished.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "soundHandle",
                          },
                          Name {
                            "value": "timeVal",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "WaitForSoundBJ",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "timeType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_TIMETYPE_ADD",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " If the transmission is extending beyond the sound's length, wait",
                    },
                    Comment {
                      "value": " for it to finish, and then wait the additional time.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "soundHandle",
                          },
                          0,
                        ],
                      },
                      "name": Name {
                        "value": "WaitForSoundBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "timeVal",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "TriggerSleepAction",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized timeType - ignore.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " If we have a static duration wait, just perform the wait.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "timeVal",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerSleepAction",
                  },
                  "statement": true,
                },
                EmptyLine {},
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DoTransmissionBasicsXYBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "color",
            },
            "type": Name {
              "value": "playercolor",
            },
          },
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "unitName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "unitId",
                },
                Name {
                  "value": "color",
                },
                Name {
                  "value": "unitName",
                },
                Name {
                  "value": "message",
                },
                BinaryOp {
                  "left": Name {
                    "value": "duration",
                  },
                  "operator": "+",
                  "right": Name {
                    "value": "bj_TRANSMISSION_PORT_HANGTIME",
                  },
                },
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "SetCinematicSceneBJ",
            },
            "statement": true,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "unitId",
                  },
                  "operator": "!=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "x",
                      },
                      Name {
                        "value": "y",
                      },
                      Name {
                        "value": "bj_TRANSMISSION_PING_TIME",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PingMinimap",
                  },
                  "statement": true,
                },
                Comment {
                  "value": "call SetCameraQuickPosition(x, y)",
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Display a text message to a Player Group with an accompanying sound,",
    },
    Comment {
      "value": " portrait, speech indicator, and all that good stuff.",
    },
    Comment {
      "value": "   - Query duration of sound",
    },
    Comment {
      "value": "   - Play sound",
    },
    Comment {
      "value": "   - Display text message for duration",
    },
    Comment {
      "value": "   - Display animating portrait for duration",
    },
    Comment {
      "value": "   - Display a speech indicator for the unit",
    },
    Comment {
      "value": "   - Ping the minimap",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TransmissionFromUnitWithNameBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "unitName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "timeType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "timeVal",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "wait",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "TryInitCinematicBehaviorBJ",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "whichUnit",
                },
              ],
            },
            "name": Name {
              "value": "AttachSoundToUnit",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Ensure that the time value is non-negative.",
          },
          JASSSet {
            "name": Name {
              "value": "timeVal",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "timeVal",
                  },
                  0,
                ],
              },
              "name": Name {
                "value": "RMaxBJ",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_lastTransmissionDuration",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "soundHandle",
                  },
                  Name {
                    "value": "timeType",
                  },
                  Name {
                    "value": "timeVal",
                  },
                ],
              },
              "name": Name {
                "value": "GetTransmissionDuration",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_lastPlayedSound",
            },
            "value": Name {
              "value": "soundHandle",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "toForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "whichUnit",
                        },
                        "operator": "==",
                      },
                    ],
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "whichUnit",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetUnitTypeId",
                                  },
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Call {
                                        "args": Args {
                                          "body": Array [
                                            Name {
                                              "value": "whichUnit",
                                            },
                                          ],
                                        },
                                        "name": Name {
                                          "value": "GetOwningPlayer",
                                        },
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetPlayerColor",
                                  },
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "whichUnit",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetUnitX",
                                  },
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "whichUnit",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "GetUnitY",
                                  },
                                },
                                Name {
                                  "value": "soundHandle",
                                },
                                Name {
                                  "value": "unitName",
                                },
                                Name {
                                  "value": "message",
                                },
                                Name {
                                  "value": "bj_lastTransmissionDuration",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "DoTransmissionBasicsXYBJ",
                            },
                            "statement": true,
                          },
                          IfThenElse {
                            "condition": Parens {
                              "data": Array [
                                UnaryOp {
                                  "expr": Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "whichUnit",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "IsUnitHidden",
                                    },
                                  },
                                  "operator": "not",
                                },
                              ],
                            },
                            "then": Statements {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "whichUnit",
                                      },
                                      Name {
                                        "value": "bj_TRANSMISSION_IND_RED",
                                      },
                                      Name {
                                        "value": "bj_TRANSMISSION_IND_BLUE",
                                      },
                                      Name {
                                        "value": "bj_TRANSMISSION_IND_GREEN",
                                      },
                                      Name {
                                        "value": "bj_TRANSMISSION_IND_ALPHA",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "UnitAddIndicator",
                                  },
                                  "statement": true,
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " If the unit reference is invalid, send the transmission from the center of the map with no portrait.",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            0,
                            Name {
                              "value": "PLAYER_COLOR_RED",
                            },
                            0,
                            0,
                            Name {
                              "value": "soundHandle",
                            },
                            Name {
                              "value": "unitName",
                            },
                            Name {
                              "value": "message",
                            },
                            Name {
                              "value": "bj_lastTransmissionDuration",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "DoTransmissionBasicsXYBJ",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "wait",
              },
              "operator": "and",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "bj_lastTransmissionDuration",
                    },
                    "operator": ">",
                    "right": 0,
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " call TriggerSleepAction(bj_lastTransmissionDuration)",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                      Name {
                        "value": "timeType",
                      },
                      Name {
                        "value": "timeVal",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "WaitTransmissionDuration",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlayDialogueFromSpeakerEx",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "speaker",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "speakerType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "timeType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "timeVal",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "wait",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "Make sure that the runtime unit type and the parameter are the same,",
          },
          Comment {
            "value": "otherwise the offline animations will not match and will fail",
          },
          IfThenElse {
            "condition": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "speaker",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetUnitTypeId",
                },
              },
              "operator": "!=",
              "right": Name {
                "value": "speakerType",
              },
            },
            "then": Statements {
              "body": Array [
                Debug {
                  "statement": Call {
                    "args": Args {
                      "body": Array [
                        Parens {
                          "data": Array [
                            BinaryOp {
                              "left": BinaryOp {
                                "left": BinaryOp {
                                  "left": "Attempted to play FacialAnimation with the wrong speaker UnitType - Param: ",
                                  "operator": "+",
                                  "right": Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "speakerType",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "I2S",
                                    },
                                  },
                                },
                                "operator": "+",
                                "right": " Runtime: ",
                              },
                              "operator": "+",
                              "right": Call {
                                "args": Args {
                                  "body": Array [
                                    Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "speaker",
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "GetUnitTypeId",
                                      },
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "I2S",
                                },
                              },
                            },
                          ],
                        },
                      ],
                    },
                    "name": Name {
                      "value": "BJDebugMsg",
                    },
                    "statement": true,
                  },
                },
                Comment {
                  "value": "return false",
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "name": Name {
              "value": "TryInitCinematicBehaviorBJ",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "soundHandle",
                },
                Name {
                  "value": "speaker",
                },
              ],
            },
            "name": Name {
              "value": "AttachSoundToUnit",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Ensure that the time value is non-negative.",
          },
          JASSSet {
            "name": Name {
              "value": "timeVal",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "timeVal",
                  },
                  0,
                ],
              },
              "name": Name {
                "value": "RMaxBJ",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_lastTransmissionDuration",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "soundHandle",
                  },
                  Name {
                    "value": "timeType",
                  },
                  Name {
                    "value": "timeVal",
                  },
                ],
              },
              "name": Name {
                "value": "GetTransmissionDuration",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_lastPlayedSound",
            },
            "value": Name {
              "value": "soundHandle",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "toForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                      Name {
                        "value": "speakerType",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "speaker",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetOwningPlayer",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetPlayerColor",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "soundHandle",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetDialogueSpeakerNameKey",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "soundHandle",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetDialogueTextKey",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "bj_lastTransmissionDuration",
                        },
                        "operator": "+",
                        "right": Name {
                          "value": "bj_TRANSMISSION_PORT_HANGTIME",
                        },
                      },
                      Name {
                        "value": "bj_lastTransmissionDuration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCinematicSceneBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "wait",
              },
              "operator": "and",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "bj_lastTransmissionDuration",
                    },
                    "operator": ">",
                    "right": 0,
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " call TriggerSleepAction(bj_lastTransmissionDuration)",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                      Name {
                        "value": "timeType",
                      },
                      Name {
                        "value": "timeVal",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "WaitTransmissionDuration",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              true,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PlayDialogueFromSpeakerTypeEx",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "fromPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "speakerType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "timeType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "timeVal",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "wait",
            },
            "type": "boolean",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "TryInitCinematicBehaviorBJ",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Ensure that the time value is non-negative.",
          },
          JASSSet {
            "name": Name {
              "value": "timeVal",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "timeVal",
                  },
                  0,
                ],
              },
              "name": Name {
                "value": "RMaxBJ",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_lastTransmissionDuration",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "soundHandle",
                  },
                  Name {
                    "value": "timeType",
                  },
                  Name {
                    "value": "timeVal",
                  },
                ],
              },
              "name": Name {
                "value": "GetTransmissionDuration",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_lastPlayedSound",
            },
            "value": Name {
              "value": "soundHandle",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "toForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                      Name {
                        "value": "speakerType",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "fromPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetPlayerColor",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "soundHandle",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetDialogueSpeakerNameKey",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "soundHandle",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetDialogueTextKey",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocalizedString",
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "bj_lastTransmissionDuration",
                        },
                        "operator": "+",
                        "right": Name {
                          "value": "bj_TRANSMISSION_PORT_HANGTIME",
                        },
                      },
                      Name {
                        "value": "bj_lastTransmissionDuration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCinematicSceneBJ",
                  },
                  "statement": true,
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "speakerType",
                        },
                        "operator": "!=",
                        "right": 0,
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "loc",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetLocationX",
                              },
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "loc",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "GetLocationY",
                              },
                            },
                            Name {
                              "value": "bj_TRANSMISSION_PING_TIME",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "PingMinimap",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "wait",
              },
              "operator": "and",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "bj_lastTransmissionDuration",
                    },
                    "operator": ">",
                    "right": 0,
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " call TriggerSleepAction(bj_lastTransmissionDuration)",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                      Name {
                        "value": "timeType",
                      },
                      Name {
                        "value": "timeVal",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "WaitTransmissionDuration",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              true,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " This operates like TransmissionFromUnitWithNameBJ, but for a unit type",
    },
    Comment {
      "value": " rather than a unit instance.  As such, no speech indicator is employed.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TransmissionFromUnitTypeWithNameBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "toForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "fromPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "unitName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "soundHandle",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "message",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "timeType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "timeVal",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "wait",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "TryInitCinematicBehaviorBJ",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Ensure that the time value is non-negative.",
          },
          JASSSet {
            "name": Name {
              "value": "timeVal",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "timeVal",
                  },
                  0,
                ],
              },
              "name": Name {
                "value": "RMaxBJ",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_lastTransmissionDuration",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "soundHandle",
                  },
                  Name {
                    "value": "timeType",
                  },
                  Name {
                    "value": "timeVal",
                  },
                ],
              },
              "name": Name {
                "value": "GetTransmissionDuration",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_lastPlayedSound",
            },
            "value": Name {
              "value": "soundHandle",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetLocalPlayer",
                        },
                      },
                      Name {
                        "value": "toForce",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerInForce",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "unitId",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "fromPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetPlayerColor",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "loc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                      Name {
                        "value": "soundHandle",
                      },
                      Name {
                        "value": "unitName",
                      },
                      Name {
                        "value": "message",
                      },
                      Name {
                        "value": "bj_lastTransmissionDuration",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DoTransmissionBasicsXYBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "wait",
              },
              "operator": "and",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "bj_lastTransmissionDuration",
                    },
                    "operator": ">",
                    "right": 0,
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " call TriggerSleepAction(bj_lastTransmissionDuration)",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "soundHandle",
                      },
                      Name {
                        "value": "timeType",
                      },
                      Name {
                        "value": "timeVal",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "WaitTransmissionDuration",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastTransmissionDurationBJ",
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastTransmissionDuration",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ForceCinematicSubtitlesBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "ForceCinematicSubtitles",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Cinematic Mode Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Makes many common UI settings changes at once, for use when beginning and",
    },
    Comment {
      "value": " ending cinematic sequences.  Note that some affects apply to all players,",
    },
    Comment {
      "value": " such as game speed.  This is unavoidable.",
    },
    Comment {
      "value": "   - Clear the screen of text messages",
    },
    Comment {
      "value": "   - Hide interface UI (letterbox mode)",
    },
    Comment {
      "value": "   - Hide game messages (ally under attack, etc.)",
    },
    Comment {
      "value": "   - Disable user control",
    },
    Comment {
      "value": "   - Disable occlusion",
    },
    Comment {
      "value": "   - Set game speed (for all players)",
    },
    Comment {
      "value": "   - Lock game speed (for all players)",
    },
    Comment {
      "value": "   - Disable black mask (for all players)",
    },
    Comment {
      "value": "   - Disable fog of war (for all players)",
    },
    Comment {
      "value": "   - Disable world boundary fog (for all players)",
    },
    Comment {
      "value": "   - Dim non-speech sound channels",
    },
    Comment {
      "value": "   - End any outstanding music themes",
    },
    Comment {
      "value": "   - Fix the random seed to a set value",
    },
    Comment {
      "value": "   - Reset the camera smoothing factor",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CinematicModeExBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "cineMode",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "forForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "interfaceFadeTime",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the game hasn't started yet, perform interface fades immediately",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                UnaryOp {
                  "expr": Name {
                    "value": "bj_gameStarted",
                  },
                  "operator": "not",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "interfaceFadeTime",
                  },
                  "value": 0,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "cineMode",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "bj_cineModeAlreadyIn",
                      },
                      "value": false,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetCinematicAudio",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Perform local changes",
                    },
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetLocalPlayer",
                                  },
                                },
                                Name {
                                  "value": "forForce",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "IsPlayerInForce",
                            },
                          },
                        ],
                      },
                      "then": Statements {
                        "body": Array [
                          Comment {
                            "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                true,
                                Name {
                                  "value": "interfaceFadeTime",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "ShowInterface",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                true,
                              ],
                            },
                            "name": Name {
                              "value": "EnableUserControl",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                true,
                              ],
                            },
                            "name": Name {
                              "value": "EnableOcclusion",
                            },
                            "statement": true,
                          },
                          Call {
                            "name": Name {
                              "value": "VolumeGroupReset",
                            },
                            "statement": true,
                          },
                          Call {
                            "name": Name {
                              "value": "EndThematicMusic",
                            },
                            "statement": true,
                          },
                          Call {
                            "name": Name {
                              "value": "CameraResetSmoothingFactorBJ",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Perform global changes",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "MAP_LOCK_SPEED",
                          },
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "SetMapFlag",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_cineModePriorSpeed",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetGameSpeed",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_cineModePriorMaskSetting",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "FogMaskEnable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_cineModePriorFogSetting",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "FogEnable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "EnableWorldFogBoundary",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_cineModePriorDawnDusk",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "EnableDawnDusk",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_cineModeSavedSeed",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetRandomSeed",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Save the UI state so that we can restore it later.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": Name {
                          "value": "bj_cineModeAlreadyIn",
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            true,
                          ],
                        },
                        "name": Name {
                          "value": "SetCinematicAudio",
                        },
                        "statement": true,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_cineModeAlreadyIn",
                        },
                        "value": true,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_cineModePriorSpeed",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "GetGameSpeed",
                          },
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_cineModePriorFogSetting",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "IsFogEnabled",
                          },
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_cineModePriorMaskSetting",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "IsFogMaskEnabled",
                          },
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_cineModePriorDawnDusk",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "IsDawnDuskEnabled",
                          },
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_cineModeSavedSeed",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              0,
                              1000000,
                            ],
                          },
                          "name": Name {
                            "value": "GetRandomInt",
                          },
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Perform local changes",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "name": Name {
                                "value": "GetLocalPlayer",
                              },
                            },
                            Name {
                              "value": "forForce",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "IsPlayerInForce",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                      },
                      Call {
                        "name": Name {
                          "value": "ClearTextMessages",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            false,
                            Name {
                              "value": "interfaceFadeTime",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "ShowInterface",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            false,
                          ],
                        },
                        "name": Name {
                          "value": "EnableUserControl",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            false,
                          ],
                        },
                        "name": Name {
                          "value": "EnableOcclusion",
                        },
                        "statement": true,
                      },
                      Call {
                        "name": Name {
                          "value": "SetCineModeVolumeGroupsBJ",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Perform global changes",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_CINEMODE_GAMESPEED",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetGameSpeed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "MAP_LOCK_SPEED",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "SetMapFlag",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "FogMaskEnable",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "FogEnable",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "EnableWorldFogBoundary",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "EnableDawnDusk",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Use a fixed random seed, so that cinematics play consistently.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      0,
                    ],
                  },
                  "name": Name {
                    "value": "SetRandomSeed",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CinematicModeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "cineMode",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "forForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "cineMode",
                },
                Name {
                  "value": "forForce",
                },
                Name {
                  "value": "bj_CINEMODE_INTERFACEFADE",
                },
              ],
            },
            "name": Name {
              "value": "CinematicModeExBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Cinematic Filter Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DisplayCineFilterBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "flag",
                },
              ],
            },
            "name": Name {
              "value": "DisplayCineFilter",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CinematicFadeCommonBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "tex",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "startTrans",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "endTrans",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "duration",
                  },
                  "operator": "==",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " If the fade is instant, use the same starting and ending values,",
                },
                Comment {
                  "value": " so that we effectively do a set rather than a fade.",
                },
                JASSSet {
                  "name": Name {
                    "value": "startTrans",
                  },
                  "value": Name {
                    "value": "endTrans",
                  },
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                false,
              ],
            },
            "name": Name {
              "value": "EnableUserUI",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tex",
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterTexture",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "BLEND_MODE_BLEND",
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterBlendMode",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "TEXMAP_FLAG_NONE",
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterTexMapFlags",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                0,
                0,
                1,
                1,
              ],
            },
            "name": Name {
              "value": "SetCineFilterStartUV",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                0,
                0,
                1,
                1,
              ],
            },
            "name": Name {
              "value": "SetCineFilterEndUV",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "startTrans",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterStartColor",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "endTrans",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterEndColor",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterDuration",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "DisplayCineFilter",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FinishCinematicFadeBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_cineFadeFinishTimer",
                },
              ],
            },
            "name": Name {
              "value": "DestroyTimer",
            },
            "statement": true,
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeFinishTimer",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                false,
              ],
            },
            "name": Name {
              "value": "DisplayCineFilter",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "EnableUserUI",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FinishCinematicFadeAfterBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Create a timer to end the cinematic fade.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeFinishTimer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_cineFadeFinishTimer",
                },
                Name {
                  "value": "duration",
                },
                false,
                FuncRef {
                  "data": Name {
                    "value": "FinishCinematicFadeBJ",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ContinueCinematicFadeBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_cineFadeContinueTimer",
                },
              ],
            },
            "name": Name {
              "value": "DestroyTimer",
            },
            "statement": true,
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeContinueTimer",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_cineFadeContinueRed",
                },
                Name {
                  "value": "bj_cineFadeContinueGreen",
                },
                Name {
                  "value": "bj_cineFadeContinueBlue",
                },
                Name {
                  "value": "bj_cineFadeContinueDuration",
                },
                Name {
                  "value": "bj_cineFadeContinueTex",
                },
                Name {
                  "value": "bj_cineFadeContinueTrans",
                },
                100,
              ],
            },
            "name": Name {
              "value": "CinematicFadeCommonBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ContinueCinematicFadeAfterBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "trans",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "tex",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeContinueRed",
            },
            "value": Name {
              "value": "red",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeContinueGreen",
            },
            "value": Name {
              "value": "green",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeContinueBlue",
            },
            "value": Name {
              "value": "blue",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeContinueTrans",
            },
            "value": Name {
              "value": "trans",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeContinueDuration",
            },
            "value": Name {
              "value": "duration",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeContinueTex",
            },
            "value": Name {
              "value": "tex",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Create a timer to continue the cinematic fade.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineFadeContinueTimer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_cineFadeContinueTimer",
                },
                Name {
                  "value": "duration",
                },
                false,
                FuncRef {
                  "data": Name {
                    "value": "ContinueCinematicFadeBJ",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AbortCinematicFadeBJ",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_cineFadeContinueTimer",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_cineFadeContinueTimer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyTimer",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_cineFadeFinishTimer",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_cineFadeFinishTimer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyTimer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CinematicFadeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "fadetype",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "tex",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "red",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "trans",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "fadetype",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CINEFADETYPE_FADEOUT",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "fadetype",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEFADETYPE_FADEIN",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Fade in from the requested color.",
                    },
                    Call {
                      "name": Name {
                        "value": "AbortCinematicFadeBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "red",
                          },
                          Name {
                            "value": "green",
                          },
                          Name {
                            "value": "blue",
                          },
                          Name {
                            "value": "duration",
                          },
                          Name {
                            "value": "tex",
                          },
                          Name {
                            "value": "trans",
                          },
                          100,
                        ],
                      },
                      "name": Name {
                        "value": "CinematicFadeCommonBJ",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "duration",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "FinishCinematicFadeAfterBJ",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "fadetype",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEFADETYPE_FADEOUTIN",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Fade out to the requested color, and then fade back in from it.",
                    },
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "duration",
                            },
                            "operator": ">",
                            "right": 0,
                          },
                        ],
                      },
                      "then": Statements {
                        "body": Array [
                          Call {
                            "name": Name {
                              "value": "AbortCinematicFadeBJ",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "red",
                                },
                                Name {
                                  "value": "green",
                                },
                                Name {
                                  "value": "blue",
                                },
                                BinaryOp {
                                  "left": Name {
                                    "value": "duration",
                                  },
                                  "operator": "*",
                                  "right": 0.5,
                                },
                                Name {
                                  "value": "tex",
                                },
                                100,
                                Name {
                                  "value": "trans",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "CinematicFadeCommonBJ",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "duration",
                                  },
                                  "operator": "*",
                                  "right": 0.5,
                                },
                                Name {
                                  "value": "red",
                                },
                                Name {
                                  "value": "green",
                                },
                                Name {
                                  "value": "blue",
                                },
                                Name {
                                  "value": "trans",
                                },
                                Name {
                                  "value": "tex",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "ContinueCinematicFadeAfterBJ",
                            },
                            "statement": true,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "duration",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "FinishCinematicFadeAfterBJ",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized fadetype - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Fade out to the requested color.",
                },
                Call {
                  "name": Name {
                    "value": "AbortCinematicFadeBJ",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red",
                      },
                      Name {
                        "value": "green",
                      },
                      Name {
                        "value": "blue",
                      },
                      Name {
                        "value": "duration",
                      },
                      Name {
                        "value": "tex",
                      },
                      100,
                      Name {
                        "value": "trans",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CinematicFadeCommonBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CinematicFilterGenericBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "duration",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "bmode",
            },
            "type": Name {
              "value": "blendmode",
            },
          },
          Param {
            "name": Name {
              "value": "tex",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "red0",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green0",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue0",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "trans0",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "red1",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "green1",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "blue1",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "trans1",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "AbortCinematicFadeBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "tex",
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterTexture",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bmode",
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterBlendMode",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "TEXMAP_FLAG_NONE",
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterTexMapFlags",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                0,
                0,
                1,
                1,
              ],
            },
            "name": Name {
              "value": "SetCineFilterStartUV",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                0,
                0,
                1,
                1,
              ],
            },
            "name": Name {
              "value": "SetCineFilterEndUV",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red0",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green0",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue0",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "trans0",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterStartColor",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "red1",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "green1",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "blue1",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      BinaryOp {
                        "left": 100,
                        "operator": "-",
                        "right": Name {
                          "value": "trans1",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "PercentTo255",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterEndColor",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "duration",
                },
              ],
            },
            "name": Name {
              "value": "SetCineFilterDuration",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                true,
              ],
            },
            "name": Name {
              "value": "DisplayCineFilter",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Rescuable Unit Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Rescues a unit for a player.  This performs the default rescue behavior,",
    },
    Comment {
      "value": " including a rescue sound, flashing selection circle, ownership change,",
    },
    Comment {
      "value": " and optionally a unit color change.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RescueUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "rescuer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "changeColor",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsUnitDeadBJ",
                },
              },
              "operator": "or",
              "right": Parens {
                "data": Array [
                  BinaryOp {
                    "left": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichUnit",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetOwningPlayer",
                      },
                    },
                    "operator": "==",
                    "right": Name {
                      "value": "rescuer",
                    },
                  },
                ],
              },
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_rescueSound",
                },
              ],
            },
            "name": Name {
              "value": "StartSound",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "rescuer",
                },
                Name {
                  "value": "changeColor",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitOwner",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                0,
                255,
                0,
                255,
              ],
            },
            "name": Name {
              "value": "UnitAddIndicator",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "rescuer",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitX",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitY",
                  },
                },
                Name {
                  "value": "bj_RESCUE_PING_TIME",
                },
              ],
            },
            "name": Name {
              "value": "PingMinimapForPlayer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TriggerActionUnitRescuedBJ",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "theUnit",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Call {
              "name": Name {
                "value": "GetTriggerUnit",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "theUnit",
                  },
                  Name {
                    "value": "UNIT_TYPE_STRUCTURE",
                  },
                ],
              },
              "name": Name {
                "value": "IsUnitType",
              },
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "theUnit",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetRescuer",
                                  },
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetOwningPlayer",
                            },
                          },
                          Name {
                            "value": "bj_rescueChangeColorUnit",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "RescueUnitBJ",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "theUnit",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "name": Name {
                                "value": "GetRescuer",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetOwningPlayer",
                        },
                      },
                      Name {
                        "value": "bj_rescueChangeColorBldg",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RescueUnitBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Attempt to init triggers for default rescue behavior.  For performance",
    },
    Comment {
      "value": " reasons, this should only be attempted if a player is set to Rescuable,",
    },
    Comment {
      "value": " or if a specific unit is thus flagged.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TryInitRescuableTriggersBJ",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_rescueUnitBehavior",
                  },
                  "operator": "==",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_rescueUnitBehavior",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "CreateTrigger",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": 0,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "bj_rescueUnitBehavior",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "index",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "Player",
                              },
                            },
                            Name {
                              "value": "EVENT_PLAYER_UNIT_RESCUED",
                            },
                            null,
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerUnitEvent",
                        },
                        "statement": true,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "index",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "index",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "index",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_MAX_PLAYER_SLOTS",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_rescueUnitBehavior",
                      },
                      FuncRef {
                        "data": Name {
                          "value": "TriggerActionUnitRescuedBJ",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerAddAction",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Determines whether or not rescued units automatically change color upon",
    },
    Comment {
      "value": " being rescued.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetRescueUnitColorChangeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "changeColor",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_rescueChangeColorUnit",
            },
            "value": Name {
              "value": "changeColor",
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Determines whether or not rescued buildings automatically change color",
    },
    Comment {
      "value": " upon being rescued.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetRescueBuildingColorChangeBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "changeColor",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_rescueChangeColorBldg",
            },
            "value": Name {
              "value": "changeColor",
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MakeUnitRescuableToForceBJEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "TryInitRescuableTriggersBJ",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_makeUnitRescuableUnit",
                },
                Call {
                  "name": Name {
                    "value": "GetEnumPlayer",
                  },
                },
                Name {
                  "value": "bj_makeUnitRescuableFlag",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitRescuable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MakeUnitRescuableToForceBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "isRescuable",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Flag the unit as rescuable/unrescuable for the appropriate players.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_makeUnitRescuableUnit",
            },
            "value": Name {
              "value": "whichUnit",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_makeUnitRescuableFlag",
            },
            "value": Name {
              "value": "isRescuable",
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichForce",
                },
                FuncRef {
                  "data": Name {
                    "value": "MakeUnitRescuableToForceBJEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForForce",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitRescuableBehaviorBJ",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                Comment {
                  "value": " If at least one player slot is \\"Rescuable\\"-controlled, init the",
                },
                Comment {
                  "value": " rescue behavior triggers.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "index",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "Player",
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerController",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "MAP_CONTROL_RESCUABLE",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "TryInitRescuableTriggersBJ",
                        },
                        "statement": true,
                      },
                      Return {
                        "data": Array [
                          undefined,
                        ],
                      },
                    ],
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Research and Upgrade Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerTechResearchedSwap",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "techid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "levels",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "techid",
                },
                Name {
                  "value": "levels",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerTechResearched",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerTechMaxAllowedSwap",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "techid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "maximum",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "techid",
                },
                Name {
                  "value": "maximum",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerTechMaxAllowed",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerMaxHeroesAllowed",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "maximum",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                FourCC {
                  "value": "HERO",
                },
                Name {
                  "value": "maximum",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerTechMaxAllowed",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerTechCountSimple",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "techid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "techid",
                    },
                    true,
                  ],
                },
                "name": Name {
                  "value": "GetPlayerTechCount",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerTechMaxAllowedSwap",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "techid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichPlayer",
                    },
                    Name {
                      "value": "techid",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetPlayerTechMaxAllowed",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerAbilityAvailableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "avail",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "abilid",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "abilid",
                },
                Name {
                  "value": "avail",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerAbilityAvailable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Campaign Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCampaignMenuRaceBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "campaignNumber",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "campaignNumber",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CAMPAIGN_INDEX_T",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_H",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "RACE_HUMAN",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetCampaignMenuRace",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_U",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "RACE_UNDEAD",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetCampaignMenuRace",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_O",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "RACE_ORC",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetCampaignMenuRace",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_N",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "RACE_NIGHTELF",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetCampaignMenuRace",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_XN",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_OFFSET_XN",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetCampaignMenuRaceEx",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_XH",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_OFFSET_XH",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetCampaignMenuRaceEx",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_XU",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_OFFSET_XU",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetCampaignMenuRaceEx",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_XO",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_OFFSET_XO",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetCampaignMenuRaceEx",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized campaign - ignore the request",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "RACE_OTHER",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCampaignMenuRace",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Converts a single campaign mission designation into campaign and mission",
    },
    Comment {
      "value": " numbers.  The 1000's digit is considered the campaign index, and the 1's",
    },
    Comment {
      "value": " digit is considered the mission index within that campaign.  This is done",
    },
    Comment {
      "value": " so that the trigger for this can use a single drop-down to list all of",
    },
    Comment {
      "value": " the campaign missions.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetMissionAvailableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "available",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "missionIndex",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "campaignNumber",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": Name {
                "value": "missionIndex",
              },
              "operator": "/",
              "right": 1000,
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "missionNumber",
            },
            "type": "integer",
            "value": BinaryOp {
              "left": Name {
                "value": "missionIndex",
              },
              "operator": "-",
              "right": BinaryOp {
                "left": Name {
                  "value": "campaignNumber",
                },
                "operator": "*",
                "right": 1000,
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "campaignNumber",
                },
                Name {
                  "value": "missionNumber",
                },
                Name {
                  "value": "available",
                },
              ],
            },
            "name": Name {
              "value": "SetMissionAvailable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCampaignAvailableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "available",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "campaignNumber",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "campaignOffset",
            },
            "type": "integer",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "campaignNumber",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CAMPAIGN_INDEX_H",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "SetTutorialCleared",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "campaignNumber",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CAMPAIGN_INDEX_XN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_XH",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "campaignOffset",
                      },
                      "value": Name {
                        "value": "bj_CAMPAIGN_OFFSET_XH",
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_XU",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "campaignOffset",
                      },
                      "value": Name {
                        "value": "bj_CAMPAIGN_OFFSET_XU",
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "campaignNumber",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CAMPAIGN_INDEX_XO",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "campaignOffset",
                      },
                      "value": Name {
                        "value": "bj_CAMPAIGN_OFFSET_XO",
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "campaignOffset",
                      },
                      "value": Name {
                        "value": "campaignNumber",
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "campaignOffset",
                  },
                  "value": Name {
                    "value": "bj_CAMPAIGN_OFFSET_XN",
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "campaignOffset",
                },
                Name {
                  "value": "available",
                },
              ],
            },
            "name": Name {
              "value": "SetCampaignAvailable",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "campaignNumber",
                },
              ],
            },
            "name": Name {
              "value": "SetCampaignMenuRaceBJ",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "ForceCampaignSelectScreen",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetCinematicAvailableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "available",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "cinematicIndex",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "cinematicIndex",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_CINEMATICINDEX_TOP",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_HOP",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_INDEX_H",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetOpCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "HumanOp",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_HED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_INDEX_H",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetEdCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "HumanEd",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_OOP",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_INDEX_O",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetOpCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "OrcOp",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_OED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_INDEX_O",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetEdCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "OrcEd",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_UOP",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_INDEX_U",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetEdCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "UndeadOp",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_UED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_INDEX_U",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetEdCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "UndeadEd",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_NOP",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_INDEX_N",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetEdCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "NightElfOp",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_NED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_INDEX_N",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetEdCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "NightElfEd",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_XOP",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_OFFSET_XN",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetOpCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Comment {
                      "value": " call PlayCinematic( \\"IntroX\\" )",
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "cinematicIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_CINEMATICINDEX_XED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "bj_CAMPAIGN_OFFSET_XU",
                          },
                          Name {
                            "value": "available",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "SetEdCinematicAvailable",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          "OutroX",
                        ],
                      },
                      "name": Name {
                        "value": "PlayCinematic",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized cinematic - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_CAMPAIGN_INDEX_T",
                      },
                      Name {
                        "value": "available",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetOpCinematicAvailable",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      "TutorialOp",
                    ],
                  },
                  "name": Name {
                    "value": "PlayCinematic",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitGameCacheBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "campaignFile",
            },
            "type": "string",
          },
        ],
      },
      "returns": Name {
        "value": "gamecache",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedGameCache",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "campaignFile",
                  },
                ],
              },
              "name": Name {
                "value": "InitGameCache",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedGameCache",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveGameCacheBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "cache",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveGameCache",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedGameCacheBJ",
      },
      "returns": Name {
        "value": "gamecache",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedGameCache",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitHashtableBJ",
      },
      "returns": Name {
        "value": "hashtable",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastCreatedHashtable",
            },
            "value": Call {
              "name": Name {
                "value": "InitHashtable",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedHashtable",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastCreatedHashtableBJ",
      },
      "returns": Name {
        "value": "hashtable",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastCreatedHashtable",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StoreRealBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "cache",
                },
                Name {
                  "value": "missionKey",
                },
                Name {
                  "value": "key",
                },
                Name {
                  "value": "value",
                },
              ],
            },
            "name": Name {
              "value": "StoreReal",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StoreIntegerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "cache",
                },
                Name {
                  "value": "missionKey",
                },
                Name {
                  "value": "key",
                },
                Name {
                  "value": "value",
                },
              ],
            },
            "name": Name {
              "value": "StoreInteger",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StoreBooleanBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "cache",
                },
                Name {
                  "value": "missionKey",
                },
                Name {
                  "value": "key",
                },
                Name {
                  "value": "value",
                },
              ],
            },
            "name": Name {
              "value": "StoreBoolean",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StoreStringBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "cache",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "value",
                    },
                  ],
                },
                "name": Name {
                  "value": "StoreString",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StoreUnitBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "cache",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "StoreUnit",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveRealBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "table",
                },
                Name {
                  "value": "missionKey",
                },
                Name {
                  "value": "key",
                },
                Name {
                  "value": "value",
                },
              ],
            },
            "name": Name {
              "value": "SaveReal",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveIntegerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "table",
                },
                Name {
                  "value": "missionKey",
                },
                Name {
                  "value": "key",
                },
                Name {
                  "value": "value",
                },
              ],
            },
            "name": Name {
              "value": "SaveInteger",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveBooleanBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "table",
                },
                Name {
                  "value": "missionKey",
                },
                Name {
                  "value": "key",
                },
                Name {
                  "value": "value",
                },
              ],
            },
            "name": Name {
              "value": "SaveBoolean",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveStringBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "value",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveStr",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SavePlayerHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichPlayer",
                    },
                  ],
                },
                "name": Name {
                  "value": "SavePlayerHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveWidgetHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichWidget",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveWidgetHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveDestructableHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDestructable",
            },
            "type": Name {
              "value": "destructable",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichDestructable",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveDestructableHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveItemHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichItem",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveItemHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveUnitHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichUnit",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveUnitHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveAbilityHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichAbility",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveAbilityHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveTimerHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichTimer",
            },
            "type": Name {
              "value": "timer",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichTimer",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveTimerHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveTriggerHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichTrigger",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichTrigger",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveTriggerHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveTriggerConditionHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichTriggercondition",
            },
            "type": Name {
              "value": "triggercondition",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichTriggercondition",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveTriggerConditionHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveTriggerActionHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichTriggeraction",
            },
            "type": Name {
              "value": "triggeraction",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichTriggeraction",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveTriggerActionHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveTriggerEventHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichEvent",
            },
            "type": Name {
              "value": "event",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichEvent",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveTriggerEventHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveForceHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichForce",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveForceHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveGroupHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichGroup",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveGroupHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveLocationHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichLocation",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichLocation",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveLocationHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveRectHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichRect",
            },
            "type": Name {
              "value": "rect",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichRect",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveRectHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveBooleanExprHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichBoolexpr",
            },
            "type": Name {
              "value": "boolexpr",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichBoolexpr",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveBooleanExprHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveSoundHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichSound",
            },
            "type": Name {
              "value": "sound",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichSound",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveSoundHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveEffectHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichEffect",
            },
            "type": Name {
              "value": "effect",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichEffect",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveEffectHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveUnitPoolHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnitpool",
            },
            "type": Name {
              "value": "unitpool",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichUnitpool",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveUnitPoolHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveItemPoolHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItempool",
            },
            "type": Name {
              "value": "itempool",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichItempool",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveItemPoolHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveQuestHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuest",
            },
            "type": Name {
              "value": "quest",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichQuest",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveQuestHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveQuestItemHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichQuestitem",
            },
            "type": Name {
              "value": "questitem",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichQuestitem",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveQuestItemHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveDefeatConditionHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDefeatcondition",
            },
            "type": Name {
              "value": "defeatcondition",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichDefeatcondition",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveDefeatConditionHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveTimerDialogHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichTimerdialog",
            },
            "type": Name {
              "value": "timerdialog",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichTimerdialog",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveTimerDialogHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveLeaderboardHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichLeaderboard",
            },
            "type": Name {
              "value": "leaderboard",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichLeaderboard",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveLeaderboardHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveMultiboardHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichMultiboard",
            },
            "type": Name {
              "value": "multiboard",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichMultiboard",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveMultiboardHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveMultiboardItemHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichMultiboarditem",
            },
            "type": Name {
              "value": "multiboarditem",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichMultiboarditem",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveMultiboardItemHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveTrackableHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichTrackable",
            },
            "type": Name {
              "value": "trackable",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichTrackable",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveTrackableHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveDialogHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichDialog",
            },
            "type": Name {
              "value": "dialog",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichDialog",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveDialogHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveButtonHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichButton",
            },
            "type": Name {
              "value": "button",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichButton",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveButtonHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveTextTagHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichTexttag",
            },
            "type": Name {
              "value": "texttag",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichTexttag",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveTextTagHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveLightningHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichLightning",
            },
            "type": Name {
              "value": "lightning",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichLightning",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveLightningHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveImageHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichImage",
            },
            "type": Name {
              "value": "image",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichImage",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveImageHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveUbersplatHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUbersplat",
            },
            "type": Name {
              "value": "ubersplat",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichUbersplat",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveUbersplatHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveRegionHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichRegion",
            },
            "type": Name {
              "value": "region",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichRegion",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveRegionHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveFogStateHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichFogState",
            },
            "type": Name {
              "value": "fogstate",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichFogState",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveFogStateHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveFogModifierHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichFogModifier",
            },
            "type": Name {
              "value": "fogmodifier",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichFogModifier",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveFogModifierHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveAgentHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAgent",
            },
            "type": Name {
              "value": "agent",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichAgent",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveAgentHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveHashtableHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichHashtable",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "whichHashtable",
                    },
                  ],
                },
                "name": Name {
                  "value": "SaveHashtableHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetStoredRealBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "call SyncStoredReal(cache, missionKey, key)",
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "cache",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetStoredReal",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetStoredIntegerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "call SyncStoredInteger(cache, missionKey, key)",
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "cache",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetStoredInteger",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetStoredBooleanBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "call SyncStoredBoolean(cache, missionKey, key)",
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "cache",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetStoredBoolean",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetStoredStringBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "s",
            },
            "type": "string",
          },
          EmptyLine {},
          Comment {
            "value": "call SyncStoredString(cache, missionKey, key)",
          },
          JASSSet {
            "name": Name {
              "value": "s",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "cache",
                  },
                  Name {
                    "value": "missionKey",
                  },
                  Name {
                    "value": "key",
                  },
                ],
              },
              "name": Name {
                "value": "GetStoredString",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "s",
                  },
                  "operator": "==",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "s",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    "",
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadRealBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "call SyncStoredReal(table, missionKey, key)",
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadReal",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadIntegerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "call SyncStoredInteger(table, missionKey, key)",
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadInteger",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadBooleanBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "call SyncStoredBoolean(table, missionKey, key)",
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadBoolean",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadStringBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "s",
            },
            "type": "string",
          },
          EmptyLine {},
          Comment {
            "value": "call SyncStoredString(table, missionKey, key)",
          },
          JASSSet {
            "name": Name {
              "value": "s",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "table",
                  },
                  Name {
                    "value": "missionKey",
                  },
                  Name {
                    "value": "key",
                  },
                ],
              },
              "name": Name {
                "value": "LoadStr",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "s",
                  },
                  "operator": "==",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "s",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    "",
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadPlayerHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "player",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadPlayerHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadWidgetHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "widget",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadWidgetHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadDestructableHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "destructable",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadDestructableHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadItemHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadItemHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadUnitHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadUnitHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadAbilityHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "ability",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadAbilityHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadTimerHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "timer",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadTimerHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadTriggerHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "trigger",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadTriggerHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadTriggerConditionHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "triggercondition",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadTriggerConditionHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadTriggerActionHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "triggeraction",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadTriggerActionHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadTriggerEventHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "event",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadTriggerEventHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadForceHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "force",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadForceHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadGroupHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "group",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadGroupHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadLocationHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadLocationHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadRectHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "rect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadRectHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadBooleanExprHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "boolexpr",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadBooleanExprHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadSoundHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "sound",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadSoundHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadEffectHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "effect",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadEffectHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadUnitPoolHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "unitpool",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadUnitPoolHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadItemPoolHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "itempool",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadItemPoolHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadQuestHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "quest",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadQuestHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadQuestItemHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "questitem",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadQuestItemHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadDefeatConditionHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "defeatcondition",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadDefeatConditionHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadTimerDialogHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "timerdialog",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadTimerDialogHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadLeaderboardHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "leaderboard",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadLeaderboardHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadMultiboardHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "multiboard",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadMultiboardHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadMultiboardItemHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "multiboarditem",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadMultiboardItemHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadTrackableHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "trackable",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadTrackableHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadDialogHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "dialog",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadDialogHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadButtonHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "button",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadButtonHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadTextTagHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "texttag",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadTextTagHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadLightningHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "lightning",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadLightningHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadImageHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "image",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadImageHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadUbersplatHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "ubersplat",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadUbersplatHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadRegionHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "region",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadRegionHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadFogStateHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "fogstate",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadFogStateHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadFogModifierHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "fogmodifier",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadFogModifierHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadHashtableHandleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": Name {
        "value": "hashtable",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "table",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "key",
                    },
                  ],
                },
                "name": Name {
                  "value": "LoadHashtableHandle",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RestoreUnitLocFacingAngleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
          Param {
            "name": Name {
              "value": "forWhichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "facing",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "call SyncStoredUnit(cache, missionKey, key)",
          },
          JASSSet {
            "name": Name {
              "value": "bj_lastLoadedUnit",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "cache",
                  },
                  Name {
                    "value": "missionKey",
                  },
                  Name {
                    "value": "key",
                  },
                  Name {
                    "value": "forWhichPlayer",
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "loc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Name {
                    "value": "facing",
                  },
                ],
              },
              "name": Name {
                "value": "RestoreUnit",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastLoadedUnit",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RestoreUnitLocFacingPointBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
          Param {
            "name": Name {
              "value": "forWhichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "lookAt",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": "call SyncStoredUnit(cache, missionKey, key)",
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "key",
                    },
                    Name {
                      "value": "missionKey",
                    },
                    Name {
                      "value": "cache",
                    },
                    Name {
                      "value": "forWhichPlayer",
                    },
                    Name {
                      "value": "loc",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "loc",
                          },
                          Name {
                            "value": "lookAt",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "AngleBetweenPoints",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "RestoreUnitLocFacingAngleBJ",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastRestoredUnitBJ",
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastLoadedUnit",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FlushGameCacheBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "cache",
                },
              ],
            },
            "name": Name {
              "value": "FlushGameCache",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FlushStoredMissionBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "cache",
                },
                Name {
                  "value": "missionKey",
                },
              ],
            },
            "name": Name {
              "value": "FlushStoredMission",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FlushParentHashtableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "table",
                },
              ],
            },
            "name": Name {
              "value": "FlushParentHashtable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FlushChildHashtableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "table",
                },
                Name {
                  "value": "missionKey",
                },
              ],
            },
            "name": Name {
              "value": "FlushChildHashtable",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "HaveStoredValue",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "valueType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "cache",
            },
            "type": Name {
              "value": "gamecache",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "valueType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_GAMECACHE_BOOLEAN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "valueType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_GAMECACHE_INTEGER",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "cache",
                              },
                              Name {
                                "value": "missionKey",
                              },
                              Name {
                                "value": "key",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "HaveStoredInteger",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "valueType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_GAMECACHE_REAL",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "cache",
                              },
                              Name {
                                "value": "missionKey",
                              },
                              Name {
                                "value": "key",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "HaveStoredReal",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "valueType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_GAMECACHE_UNIT",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "cache",
                              },
                              Name {
                                "value": "missionKey",
                              },
                              Name {
                                "value": "key",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "HaveStoredUnit",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "valueType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_GAMECACHE_STRING",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "cache",
                              },
                              Name {
                                "value": "missionKey",
                              },
                              Name {
                                "value": "key",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "HaveStoredString",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized value type - ignore the request.",
                    },
                    Return {
                      "data": Array [
                        false,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "cache",
                          },
                          Name {
                            "value": "missionKey",
                          },
                          Name {
                            "value": "key",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "HaveStoredBoolean",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "HaveSavedValue",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "key",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "valueType",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "missionKey",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "table",
            },
            "type": Name {
              "value": "hashtable",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "valueType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_HASHTABLE_BOOLEAN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "valueType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_HASHTABLE_INTEGER",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "table",
                              },
                              Name {
                                "value": "missionKey",
                              },
                              Name {
                                "value": "key",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "HaveSavedInteger",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "valueType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_HASHTABLE_REAL",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "table",
                              },
                              Name {
                                "value": "missionKey",
                              },
                              Name {
                                "value": "key",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "HaveSavedReal",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "valueType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_HASHTABLE_STRING",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "table",
                              },
                              Name {
                                "value": "missionKey",
                              },
                              Name {
                                "value": "key",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "HaveSavedString",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "valueType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_HASHTABLE_HANDLE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "table",
                              },
                              Name {
                                "value": "missionKey",
                              },
                              Name {
                                "value": "key",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "HaveSavedHandle",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized value type - ignore the request.",
                    },
                    Return {
                      "data": Array [
                        false,
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "table",
                          },
                          Name {
                            "value": "missionKey",
                          },
                          Name {
                            "value": "key",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "HaveSavedBoolean",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ShowCustomCampaignButton",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "show",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichButton",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                BinaryOp {
                  "left": Name {
                    "value": "whichButton",
                  },
                  "operator": "-",
                  "right": 1,
                },
                Name {
                  "value": "show",
                },
              ],
            },
            "name": Name {
              "value": "SetCustomCampaignButtonVisible",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsCustomCampaignButtonVisibile",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichButton",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "whichButton",
                      },
                      "operator": "-",
                      "right": 1,
                    },
                  ],
                },
                "name": Name {
                  "value": "GetCustomCampaignButtonVisible",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Placeholder function for auto save feature",
    },
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveGameCheckPointBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "mapSaveName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "doCheckpointHint",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "mapSaveName",
                },
                Name {
                  "value": "doCheckpointHint",
                },
              ],
            },
            "name": Name {
              "value": "SaveGameCheckpoint",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LoadGameBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "loadFileName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "doScoreScreen",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "loadFileName",
                },
                Name {
                  "value": "doScoreScreen",
                },
              ],
            },
            "name": Name {
              "value": "LoadGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveAndChangeLevelBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "saveFileName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "newLevel",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "doScoreScreen",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "saveFileName",
                },
              ],
            },
            "name": Name {
              "value": "SaveGame",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "newLevel",
                },
                Name {
                  "value": "doScoreScreen",
                },
              ],
            },
            "name": Name {
              "value": "ChangeLevel",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveAndLoadGameBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "saveFileName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "loadFileName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "doScoreScreen",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "saveFileName",
                },
              ],
            },
            "name": Name {
              "value": "SaveGame",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "loadFileName",
                },
                Name {
                  "value": "doScoreScreen",
                },
              ],
            },
            "name": Name {
              "value": "LoadGame",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RenameSaveDirectoryBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourceDirName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "destDirName",
            },
            "type": "string",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "sourceDirName",
                    },
                    Name {
                      "value": "destDirName",
                    },
                  ],
                },
                "name": Name {
                  "value": "RenameSaveDirectory",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RemoveSaveDirectoryBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourceDirName",
            },
            "type": "string",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "sourceDirName",
                    },
                  ],
                },
                "name": Name {
                  "value": "RemoveSaveDirectory",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CopySaveGameBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "sourceSaveName",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "destSaveName",
            },
            "type": "string",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "sourceSaveName",
                    },
                    Name {
                      "value": "destSaveName",
                    },
                  ],
                },
                "name": Name {
                  "value": "CopySaveGame",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Miscellaneous Utility Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerStartLocationX",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetPlayerStartLocation",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "GetStartLocationX",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerStartLocationY",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetPlayerStartLocation",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "GetStartLocationY",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerStartLocationLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetPlayerStartLocation",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "GetStartLocationLoc",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRectCenter",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichRect",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichRect",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetRectCenterX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichRect",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetRectCenterY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsPlayerSlotState",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichState",
            },
            "type": Name {
              "value": "playerslotstate",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetPlayerSlotState",
                  },
                },
                "operator": "==",
                "right": Name {
                  "value": "whichState",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetFadeFromSeconds",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "seconds",
            },
            "type": "real",
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "seconds",
                  },
                  "operator": "!=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    BinaryOp {
                      "left": 128,
                      "operator": "/",
                      "right": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "seconds",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "R2I",
                        },
                      },
                    },
                  ],
                },
              ],
            },
          },
          Return {
            "data": Array [
              10000,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetFadeFromSecondsAsReal",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "seconds",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "seconds",
                  },
                  "operator": "!=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    BinaryOp {
                      "left": 128,
                      "operator": "/",
                      "right": Name {
                        "value": "seconds",
                      },
                    },
                  ],
                },
              ],
            },
          },
          Return {
            "data": Array [
              10000,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AdjustPlayerStateSimpleBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayerState",
            },
            "type": Name {
              "value": "playerstate",
            },
          },
          Param {
            "name": Name {
              "value": "delta",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "whichPlayerState",
                },
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichPlayer",
                        },
                        Name {
                          "value": "whichPlayerState",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerState",
                    },
                  },
                  "operator": "+",
                  "right": Name {
                    "value": "delta",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerState",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AdjustPlayerStateBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "delta",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayerState",
            },
            "type": Name {
              "value": "playerstate",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " If the change was positive, apply the difference to the player's",
          },
          Comment {
            "value": " gathered resources property as well.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "delta",
                  },
                  "operator": ">",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "whichPlayerState",
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "PLAYER_STATE_RESOURCE_GOLD",
                        },
                      },
                    ],
                  },
                  "elses": Array [
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "whichPlayerState",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "PLAYER_STATE_RESOURCE_LUMBER",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichPlayer",
                                },
                                Name {
                                  "value": "PLAYER_STATE_LUMBER_GATHERED",
                                },
                                Name {
                                  "value": "delta",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "AdjustPlayerStateSimpleBJ",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "PLAYER_STATE_GOLD_GATHERED",
                            },
                            Name {
                              "value": "delta",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "AdjustPlayerStateSimpleBJ",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "whichPlayerState",
                },
                Name {
                  "value": "delta",
                },
              ],
            },
            "name": Name {
              "value": "AdjustPlayerStateSimpleBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerStateBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayerState",
            },
            "type": Name {
              "value": "playerstate",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "oldValue",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "whichPlayerState",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerState",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                BinaryOp {
                  "left": Name {
                    "value": "value",
                  },
                  "operator": "-",
                  "right": Name {
                    "value": "oldValue",
                  },
                },
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "whichPlayerState",
                },
              ],
            },
            "name": Name {
              "value": "AdjustPlayerStateBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerFlagBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayerFlag",
            },
            "type": Name {
              "value": "playerstate",
            },
          },
          Param {
            "name": Name {
              "value": "flag",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "whichPlayerFlag",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "flag",
                      },
                      1,
                      0,
                    ],
                  },
                  "name": Name {
                    "value": "IntegerTertiaryOp",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerState",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerTaxRateBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "rate",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichResource",
            },
            "type": Name {
              "value": "playerstate",
            },
          },
          Param {
            "name": Name {
              "value": "sourcePlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "otherPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "sourcePlayer",
                },
                Name {
                  "value": "otherPlayer",
                },
                Name {
                  "value": "whichResource",
                },
                Name {
                  "value": "rate",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerTaxRate",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetPlayerTaxRateBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichResource",
            },
            "type": Name {
              "value": "playerstate",
            },
          },
          Param {
            "name": Name {
              "value": "sourcePlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "otherPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "sourcePlayer",
                    },
                    Name {
                      "value": "otherPlayer",
                    },
                    Name {
                      "value": "whichResource",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetPlayerTaxRate",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsPlayerFlagSetBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayerFlag",
            },
            "type": Name {
              "value": "playerstate",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "whichPlayerFlag",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetPlayerState",
                  },
                },
                "operator": "==",
                "right": 1,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "AddResourceAmountBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "delta",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                Name {
                  "value": "delta",
                },
              ],
            },
            "name": Name {
              "value": "AddResourceAmount",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetConvertedPlayerId",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetPlayerId",
                  },
                },
                "operator": "+",
                "right": 1,
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ConvertedPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "convertedPlayerId",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "player",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "convertedPlayerId",
                      },
                      "operator": "-",
                      "right": 1,
                    },
                  ],
                },
                "name": Name {
                  "value": "Player",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRectWidthBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetRectMaxX",
                  },
                },
                "operator": "-",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetRectMinX",
                  },
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetRectHeightBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetRectMaxY",
                  },
                },
                "operator": "-",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "r",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetRectMinY",
                  },
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Replaces a gold mine with a blighted gold mine for the given player.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlightGoldMineForPlayerBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "goldMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "mineX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "mineY",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "mineGold",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "newMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Make sure we're replacing a Gold Mine and not some other type of unit.",
          },
          IfThenElse {
            "condition": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "goldMine",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetUnitTypeId",
                },
              },
              "operator": "!=",
              "right": FourCC {
                "value": "ngol",
              },
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    null,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Save the Gold Mine's properties and remove it.",
          },
          JASSSet {
            "name": Name {
              "value": "mineX",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "goldMine",
                  },
                ],
              },
              "name": Name {
                "value": "GetUnitX",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "mineY",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "goldMine",
                  },
                ],
              },
              "name": Name {
                "value": "GetUnitY",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "mineGold",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "goldMine",
                  },
                ],
              },
              "name": Name {
                "value": "GetResourceAmount",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "goldMine",
                },
              ],
            },
            "name": Name {
              "value": "RemoveUnit",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Create a Haunted Gold Mine to replace the Gold Mine.",
          },
          JASSSet {
            "name": Name {
              "value": "newMine",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "mineX",
                  },
                  Name {
                    "value": "mineY",
                  },
                  Name {
                    "value": "bj_UNIT_FACING",
                  },
                ],
              },
              "name": Name {
                "value": "CreateBlightedGoldmine",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "newMine",
                },
                Name {
                  "value": "mineGold",
                },
              ],
            },
            "name": Name {
              "value": "SetResourceAmount",
            },
            "statement": true,
          },
          Return {
            "data": Array [
              Name {
                "value": "newMine",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlightGoldMineForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "goldMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastHauntedGoldMine",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "goldMine",
                  },
                  Name {
                    "value": "whichPlayer",
                  },
                ],
              },
              "name": Name {
                "value": "BlightGoldMineForPlayerBJ",
              },
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "bj_lastHauntedGoldMine",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetLastHauntedGoldMine",
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastHauntedGoldMine",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IsPointBlightedBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "where",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationX",
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "where",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetLocationY",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "IsPointBlighted",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerColorBJEnum",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
                Name {
                  "value": "bj_setPlayerTargetColor",
                },
              ],
            },
            "name": Name {
              "value": "SetUnitColor",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerColorBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "color",
            },
            "type": Name {
              "value": "playercolor",
            },
          },
          Param {
            "name": Name {
              "value": "changeExisting",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "color",
                },
              ],
            },
            "name": Name {
              "value": "SetPlayerColor",
            },
            "statement": true,
          },
          IfThenElse {
            "condition": Name {
              "value": "changeExisting",
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_setPlayerTargetColor",
                  },
                  "value": Name {
                    "value": "color",
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "g",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "CreateGroup",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                      Name {
                        "value": "whichPlayer",
                      },
                      null,
                    ],
                  },
                  "name": Name {
                    "value": "GroupEnumUnitsOfPlayer",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                      FuncRef {
                        "data": Name {
                          "value": "SetPlayerColorBJEnum",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ForGroup",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "g",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "DestroyGroup",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerUnitAvailableBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "unitId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "allowed",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "allowed",
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          Name {
                            "value": "unitId",
                          },
                          0,
                        ],
                      },
                      "name": Name {
                        "value": "SetPlayerTechMaxAllowed",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "unitId",
                      },
                      UnaryOp {
                        "expr": 1,
                        "operator": "-",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LockGameSpeedBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "MAP_LOCK_SPEED",
                },
                true,
              ],
            },
            "name": Name {
              "value": "SetMapFlag",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnlockGameSpeedBJ",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "MAP_LOCK_SPEED",
                },
                false,
              ],
            },
            "name": Name {
              "value": "SetMapFlag",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueTargetOrderBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "targetWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "order",
                    },
                    Name {
                      "value": "targetWidget",
                    },
                  ],
                },
                "name": Name {
                  "value": "IssueTargetOrder",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssuePointOrderLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "whichLocation",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "order",
                    },
                    Name {
                      "value": "whichLocation",
                    },
                  ],
                },
                "name": Name {
                  "value": "IssuePointOrderLoc",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Two distinct trigger actions can't share the same function name, so this",
    },
    Comment {
      "value": " dummy function simply mimics the behavior of an existing call.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueTargetDestructableOrder",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "targetWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "order",
                    },
                    Name {
                      "value": "targetWidget",
                    },
                  ],
                },
                "name": Name {
                  "value": "IssueTargetOrder",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueTargetItemOrder",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "targetWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "order",
                    },
                    Name {
                      "value": "targetWidget",
                    },
                  ],
                },
                "name": Name {
                  "value": "IssueTargetOrder",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "IssueImmediateOrderBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichUnit",
                    },
                    Name {
                      "value": "order",
                    },
                  ],
                },
                "name": Name {
                  "value": "IssueImmediateOrder",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupTargetOrderBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "targetWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichGroup",
                    },
                    Name {
                      "value": "order",
                    },
                    Name {
                      "value": "targetWidget",
                    },
                  ],
                },
                "name": Name {
                  "value": "GroupTargetOrder",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupPointOrderLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "whichLocation",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichGroup",
                    },
                    Name {
                      "value": "order",
                    },
                    Name {
                      "value": "whichLocation",
                    },
                  ],
                },
                "name": Name {
                  "value": "GroupPointOrderLoc",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupImmediateOrderBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichGroup",
                    },
                    Name {
                      "value": "order",
                    },
                  ],
                },
                "name": Name {
                  "value": "GroupImmediateOrder",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Two distinct trigger actions can't share the same function name, so this",
    },
    Comment {
      "value": " dummy function simply mimics the behavior of an existing call.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupTargetDestructableOrder",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "targetWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichGroup",
                    },
                    Name {
                      "value": "order",
                    },
                    Name {
                      "value": "targetWidget",
                    },
                  ],
                },
                "name": Name {
                  "value": "GroupTargetOrder",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GroupTargetItemOrder",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichGroup",
            },
            "type": Name {
              "value": "group",
            },
          },
          Param {
            "name": Name {
              "value": "order",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "targetWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "whichGroup",
                    },
                    Name {
                      "value": "order",
                    },
                    Name {
                      "value": "targetWidget",
                    },
                  ],
                },
                "name": Name {
                  "value": "GroupTargetOrder",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetDyingDestructable",
      },
      "returns": Name {
        "value": "destructable",
      },
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "name": Name {
                  "value": "GetTriggerDestructable",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Rally point setting",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitRallyPoint",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "targPos",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                "setrally",
                Name {
                  "value": "targPos",
                },
              ],
            },
            "name": Name {
              "value": "IssuePointOrderLocBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitRallyUnit",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "targUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                "setrally",
                Name {
                  "value": "targUnit",
                },
              ],
            },
            "name": Name {
              "value": "IssueTargetOrder",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetUnitRallyDestructable",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "targDest",
            },
            "type": Name {
              "value": "destructable",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichUnit",
                },
                "setrally",
                Name {
                  "value": "targDest",
                },
              ],
            },
            "name": Name {
              "value": "IssueTargetOrder",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Utility function for use by editor-generated item drop table triggers.",
    },
    Comment {
      "value": " This function is added as an action to all destructable drop triggers,",
    },
    Comment {
      "value": " so that a widget drop may be differentiated from a unit drop.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SaveDyingWidget",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastDyingWidget",
            },
            "value": Call {
              "name": Name {
                "value": "GetTriggerWidget",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetBlightRectBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "addBlight",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "r",
                },
                Name {
                  "value": "addBlight",
                },
              ],
            },
            "name": Name {
              "value": "SetBlightRect",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetBlightRadiusLocBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "addBlight",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "radius",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "loc",
                },
                Name {
                  "value": "radius",
                },
                Name {
                  "value": "addBlight",
                },
              ],
            },
            "name": Name {
              "value": "SetBlightLoc",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "GetAbilityName",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "abilcode",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "abilcode",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetObjectName",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Melee Template Visibility Settings",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingVisibility",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Start by setting the ToD.",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "GAME_STATE_TIME_OF_DAY",
                },
                Name {
                  "value": "bj_MELEE_STARTING_TOD",
                },
              ],
            },
            "name": Name {
              "value": "SetFloatGameState",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " call FogMaskEnable(true)",
          },
          Comment {
            "value": " call FogEnable(true)",
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Melee Template Starting Resources",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingResources",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "v",
            },
            "type": Name {
              "value": "version",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "startingGold",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "startingLumber",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "v",
            },
            "value": Call {
              "name": Name {
                "value": "VersionGet",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "v",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "VERSION_REIGN_OF_CHAOS",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "startingGold",
                      },
                      "value": Name {
                        "value": "bj_MELEE_STARTING_GOLD_V1",
                      },
                    },
                    JASSSet {
                      "name": Name {
                        "value": "startingLumber",
                      },
                      "value": Name {
                        "value": "bj_MELEE_STARTING_LUMBER_V1",
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "startingGold",
                  },
                  "value": Name {
                    "value": "bj_MELEE_STARTING_GOLD_V0",
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "startingLumber",
                  },
                  "value": Name {
                    "value": "bj_MELEE_STARTING_LUMBER_V0",
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Set each player's starting resources.",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerSlotState",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "PLAYER_SLOT_STATE_PLAYING",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "PLAYER_STATE_RESOURCE_GOLD",
                            },
                            Name {
                              "value": "startingGold",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerState",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "PLAYER_STATE_RESOURCE_LUMBER",
                            },
                            Name {
                              "value": "startingLumber",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerState",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Melee Template Hero Limit",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "ReducePlayerTechMaxAllowed",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "techId",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "limit",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "oldMax",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  Name {
                    "value": "techId",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerTechMaxAllowed",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " A value of -1 is used to indicate no limit, so check for that as well.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": BinaryOp {
                    "left": Name {
                      "value": "oldMax",
                    },
                    "operator": "<",
                    "right": 0,
                  },
                  "operator": "or",
                  "right": BinaryOp {
                    "left": Name {
                      "value": "oldMax",
                    },
                    "operator": ">",
                    "right": Name {
                      "value": "limit",
                    },
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "techId",
                      },
                      Name {
                        "value": "limit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingHeroLimit",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                Comment {
                  "value": " max heroes per player",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_MELEE_HERO_LIMIT",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerMaxHeroesAllowed",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " each player is restricted to a limit per hero type as well",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Hamg",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Hmkg",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Hpal",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Hblm",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Obla",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Ofar",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Otch",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Oshd",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Edem",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Ekee",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Emoo",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Ewar",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Udea",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Udre",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Ulic",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Ucrl",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Npbm",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Nbrn",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Nngs",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Nplh",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Nbst",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Nalc",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Ntin",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "Nfir",
                      },
                      Name {
                        "value": "bj_MELEE_HERO_TYPE_LIMIT",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ReducePlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Melee Template Granted Hero Items",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTrainedUnitIsHeroBJFilter",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Call {
                      "name": Name {
                        "value": "GetFilterUnit",
                      },
                    },
                    Name {
                      "value": "UNIT_TYPE_HERO",
                    },
                  ],
                },
                "name": Name {
                  "value": "IsUnitType",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " The first N heroes trained or hired for each player start off with a",
    },
    Comment {
      "value": " standard set of items.  This is currently:",
    },
    Comment {
      "value": "   - 1x Scroll of Town Portal",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGrantItemsToHero",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "owner",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichUnit",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetOwningPlayer",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerId",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " If we haven't twinked N heroes for this player yet, twink away.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": ArrayRef {
                    "name": Name {
                      "value": "bj_meleeTwinkedHeroes",
                    },
                    "prop": Name {
                      "value": "owner",
                    },
                  },
                  "operator": "<",
                  "right": Name {
                    "value": "bj_MELEE_MAX_TWINKED_HEROES",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichUnit",
                      },
                      FourCC {
                        "value": "stwp",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitAddItemById",
                  },
                  "statement": true,
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_meleeTwinkedHeroes",
                  },
                  "prop": Name {
                    "value": "owner",
                  },
                  "value": BinaryOp {
                    "left": ArrayRef {
                      "name": Name {
                        "value": "bj_meleeTwinkedHeroes",
                      },
                      "prop": Name {
                        "value": "owner",
                      },
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGrantItemsToTrainedHero",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetTrainedUnit",
                  },
                },
              ],
            },
            "name": Name {
              "value": "MeleeGrantItemsToHero",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGrantItemsToHiredHero",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetSoldUnit",
                  },
                },
              ],
            },
            "name": Name {
              "value": "MeleeGrantItemsToHero",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGrantHeroItems",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Initialize the twinked hero counts.",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_meleeTwinkedHeroes",
                  },
                  "prop": Name {
                    "value": "index",
                  },
                  "value": 0,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYER_SLOTS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Register for an event whenever a hero is trained, so that we can give",
          },
          Comment {
            "value": " him/her their starting items.",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "trig",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "CreateTrigger",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "trig",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      Name {
                        "value": "EVENT_PLAYER_UNIT_TRAIN_FINISH",
                      },
                      Name {
                        "value": "filterMeleeTrainedUnitIsHeroBJ",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerRegisterPlayerUnitEvent",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "trig",
                      },
                      FuncRef {
                        "data": Name {
                          "value": "MeleeGrantItemsToTrainedHero",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "TriggerAddAction",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Register for an event whenever a neutral hero is hired, so that we",
          },
          Comment {
            "value": " can give him/her their starting items.",
          },
          JASSSet {
            "name": Name {
              "value": "trig",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "PLAYER_NEUTRAL_PASSIVE",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Player",
                  },
                },
                Name {
                  "value": "EVENT_PLAYER_UNIT_SELL",
                },
                Name {
                  "value": "filterMeleeTrainedUnitIsHeroBJ",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterPlayerUnitEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                FuncRef {
                  "data": Name {
                    "value": "MeleeGrantItemsToHiredHero",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Flag that we are giving starting items to heroes, so that the melee",
          },
          Comment {
            "value": " starting units code can create them as necessary.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_meleeGrantHeroItems",
            },
            "value": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Melee Template Clear Start Locations",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeClearExcessUnit",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "theUnit",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumUnit",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "owner",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "theUnit",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetOwningPlayer",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerId",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "owner",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "PLAYER_NEUTRAL_AGGRESSIVE",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "owner",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "PLAYER_NEUTRAL_PASSIVE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Remove non-structure Neutral Passive units from the area.",
                    },
                    IfThenElse {
                      "condition": UnaryOp {
                        "expr": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "theUnit",
                              },
                              Name {
                                "value": "UNIT_TYPE_STRUCTURE",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "IsUnitType",
                          },
                        },
                        "operator": "not",
                      },
                      "then": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "name": Name {
                                    "value": "GetEnumUnit",
                                  },
                                },
                              ],
                            },
                            "name": Name {
                              "value": "RemoveUnit",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Remove any Neutral Hostile units from the area.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetEnumUnit",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RemoveUnit",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeClearNearbyUnits",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "range",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearbyUnits",
            },
            "type": Name {
              "value": "group",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "nearbyUnits",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nearbyUnits",
                },
                Name {
                  "value": "x",
                },
                Name {
                  "value": "y",
                },
                Name {
                  "value": "range",
                },
                null,
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsInRange",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nearbyUnits",
                },
                FuncRef {
                  "data": Name {
                    "value": "MeleeClearExcessUnit",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nearbyUnits",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeClearExcessUnits",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "locX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "locY",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " If the player slot is being used, clear any nearby creeps.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerSlotState",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "PLAYER_SLOT_STATE_PLAYING",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "locX",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "indexPlayer",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetPlayerStartLocation",
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetStartLocationX",
                          },
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "locY",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "indexPlayer",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetPlayerStartLocation",
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetStartLocationY",
                          },
                        },
                      },
                      EmptyLine {},
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "locX",
                            },
                            Name {
                              "value": "locY",
                            },
                            Name {
                              "value": "bj_MELEE_CLEAR_UNITS_RADIUS",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "MeleeClearNearbyUnits",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Melee Template Starting Units",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeEnumFindNearestMine",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "enumUnit",
            },
            "type": Name {
              "value": "unit",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumUnit",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "dist",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "enumUnit",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetUnitTypeId",
                    },
                  },
                  "operator": "==",
                  "right": FourCC {
                    "value": "ngol",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "unitLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "enumUnit",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetUnitLoc",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "dist",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "unitLoc",
                        },
                        Name {
                          "value": "bj_meleeNearestMineToLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "DistanceBetweenPoints",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "unitLoc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "RemoveLocation",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " If this is our first mine, or the closest thusfar, use it instead.",
                },
                IfThenElse {
                  "condition": BinaryOp {
                    "left": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "bj_meleeNearestMineDist",
                          },
                          "operator": "<",
                          "right": 0,
                        },
                      ],
                    },
                    "operator": "or",
                    "right": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "dist",
                          },
                          "operator": "<",
                          "right": Name {
                            "value": "bj_meleeNearestMineDist",
                          },
                        },
                      ],
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "bj_meleeNearestMine",
                        },
                        "value": Name {
                          "value": "enumUnit",
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_meleeNearestMineDist",
                        },
                        "value": Name {
                          "value": "dist",
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeFindNearestMine",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "src",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "range",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearbyMines",
            },
            "type": Name {
              "value": "group",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_meleeNearestMine",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_meleeNearestMineDist",
            },
            "value": UnaryOp {
              "expr": 1,
              "operator": "-",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_meleeNearestMineToLoc",
            },
            "value": Name {
              "value": "src",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "nearbyMines",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nearbyMines",
                },
                Name {
                  "value": "src",
                },
                Name {
                  "value": "range",
                },
                null,
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsInRangeOfLoc",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nearbyMines",
                },
                FuncRef {
                  "data": Name {
                    "value": "MeleeEnumFindNearestMine",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "nearbyMines",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "bj_meleeNearestMine",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeRandomHeroLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "p",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "id1",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "id2",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "id3",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "id4",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
        ],
      },
      "returns": Name {
        "value": "unit",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "hero",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "roll",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "pick",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "v",
            },
            "type": Name {
              "value": "version",
            },
          },
          EmptyLine {},
          Comment {
            "value": " The selection of heroes is dependant on the game version.",
          },
          JASSSet {
            "name": Name {
              "value": "v",
            },
            "value": Call {
              "name": Name {
                "value": "VersionGet",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "v",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "VERSION_REIGN_OF_CHAOS",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "roll",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            1,
                            4,
                          ],
                        },
                        "name": Name {
                          "value": "GetRandomInt",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "roll",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        1,
                        3,
                      ],
                    },
                    "name": Name {
                      "value": "GetRandomInt",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Translate the roll into a unitid.",
          },
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "roll",
              },
              "operator": "==",
              "right": 1,
            },
            "elses": Array [
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "roll",
                  },
                  "operator": "==",
                  "right": 2,
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "pick",
                      },
                      "value": Name {
                        "value": "id2",
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "roll",
                  },
                  "operator": "==",
                  "right": 3,
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "pick",
                      },
                      "value": Name {
                        "value": "id3",
                      },
                    },
                  ],
                },
              },
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "roll",
                  },
                  "operator": "==",
                  "right": 4,
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "pick",
                      },
                      "value": Name {
                        "value": "id4",
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized id index - pick the first hero in the list.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "pick",
                      },
                      "value": Name {
                        "value": "id1",
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "pick",
                  },
                  "value": Name {
                    "value": "id1",
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Create the hero.",
          },
          JASSSet {
            "name": Name {
              "value": "hero",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "p",
                  },
                  Name {
                    "value": "pick",
                  },
                  Name {
                    "value": "loc",
                  },
                  Name {
                    "value": "bj_UNIT_FACING",
                  },
                ],
              },
              "name": Name {
                "value": "CreateUnitAtLoc",
              },
            },
          },
          IfThenElse {
            "condition": Name {
              "value": "bj_meleeGrantHeroItems",
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "hero",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "MeleeGrantItemsToHero",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Return {
            "data": Array [
              Name {
                "value": "hero",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns a location which is (distance) away from (src) in the direction of (targ).",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetProjectedLoc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "src",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "targ",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "distance",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "deltaAngle",
            },
            "type": "real",
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "srcX",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "src",
                  },
                ],
              },
              "name": Name {
                "value": "GetLocationX",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "srcY",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "src",
                  },
                ],
              },
              "name": Name {
                "value": "GetLocationY",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "direction",
            },
            "type": "real",
            "value": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "targ",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationY",
                        },
                      },
                      "operator": "-",
                      "right": Name {
                        "value": "srcY",
                      },
                    },
                    BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "targ",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                      "operator": "-",
                      "right": Name {
                        "value": "srcX",
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Atan2",
                },
              },
              "operator": "+",
              "right": Name {
                "value": "deltaAngle",
              },
            },
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "srcX",
                      },
                      "operator": "+",
                      "right": BinaryOp {
                        "left": Name {
                          "value": "distance",
                        },
                        "operator": "*",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "direction",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "Cos",
                          },
                        },
                      },
                    },
                    BinaryOp {
                      "left": Name {
                        "value": "srcY",
                      },
                      "operator": "+",
                      "right": BinaryOp {
                        "left": Name {
                          "value": "distance",
                        },
                        "operator": "*",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "direction",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "Sin",
                          },
                        },
                      },
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetNearestValueWithin",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "val",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "minVal",
            },
            "type": "real",
          },
          Param {
            "name": Name {
              "value": "maxVal",
            },
            "type": "real",
          },
        ],
      },
      "returns": "real",
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "val",
                  },
                  "operator": "<",
                  "right": Name {
                    "value": "minVal",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "val",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "maxVal",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "maxVal",
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Name {
                          "value": "val",
                        },
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Name {
                      "value": "minVal",
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetLocWithinRect",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "src",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "rect",
            },
          },
        ],
      },
      "returns": Name {
        "value": "location",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "withinX",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "src",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "r",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRectMinX",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "r",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRectMaxX",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "MeleeGetNearestValueWithin",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "withinY",
            },
            "type": "real",
            "value": Call {
              "args": Args {
                "body": Array [
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "src",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "r",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRectMinY",
                    },
                  },
                  Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "r",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetRectMaxY",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "MeleeGetNearestValueWithin",
              },
            },
          },
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "withinX",
                    },
                    Name {
                      "value": "withinY",
                    },
                  ],
                },
                "name": Name {
                  "value": "Location",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Starting Units for Human Players",
    },
    Comment {
      "value": "   - 1 Town Hall, placed at start location",
    },
    Comment {
      "value": "   - 5 Peasants, placed between start location and nearest gold mine",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingUnitsHuman",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "startLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "doHeroes",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doCamera",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doPreload",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "useRandomHero",
            },
            "type": "boolean",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "MAP_RANDOM_HERO",
                  },
                ],
              },
              "name": Name {
                "value": "IsMapFlagSet",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitSpacing",
            },
            "type": "real",
            "value": 64,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearestMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearMineLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "heroLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "peonX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "peonY",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "townHall",
            },
            "type": Name {
              "value": "unit",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doPreload",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      "scripts\\\\\\\\HumanMelee.pld",
                    ],
                  },
                  "name": Name {
                    "value": "Preloader",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "nearestMine",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "startLoc",
                  },
                  Name {
                    "value": "bj_MELEE_MINE_SEARCH_RADIUS",
                  },
                ],
              },
              "name": Name {
                "value": "MeleeFindNearestMine",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "nearestMine",
                  },
                  "operator": "!=",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Spawn Town Hall at the start location.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "townHall",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            FourCC {
                              "value": "htow",
                            },
                            Name {
                              "value": "startLoc",
                            },
                            Name {
                              "value": "bj_UNIT_FACING",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "CreateUnitAtLoc",
                        },
                      },
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Spawn Peasants directly south of the town hall.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "peonX",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "startLoc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                    },
                    JASSSet {
                      "name": Name {
                        "value": "peonY",
                      },
                      "value": BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "startLoc",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationY",
                          },
                        },
                        "operator": "-",
                        "right": 224,
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "hpea",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 2,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "hpea",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 1,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "hpea",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "hpea",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "-",
                            "right": BinaryOp {
                              "left": 1,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "hpea",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "-",
                            "right": BinaryOp {
                              "left": 2,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Set random hero spawn point to be just south of the start location.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "heroLoc",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "peonX",
                            },
                            BinaryOp {
                              "left": Name {
                                "value": "peonY",
                              },
                              "operator": "-",
                              "right": BinaryOp {
                                "left": 2,
                                "operator": "*",
                                "right": Name {
                                  "value": "unitSpacing",
                                },
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Location",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Spawn Town Hall at the start location.",
                },
                JASSSet {
                  "name": Name {
                    "value": "townHall",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichPlayer",
                        },
                        FourCC {
                          "value": "htow",
                        },
                        Name {
                          "value": "startLoc",
                        },
                        Name {
                          "value": "bj_UNIT_FACING",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "CreateUnitAtLoc",
                    },
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Spawn Peasants near the mine.",
                },
                JASSSet {
                  "name": Name {
                    "value": "nearMineLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        320,
                        0,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "peonX",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearMineLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "peonY",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearMineLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "hpea",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "hpea",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.15,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "hpea",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.15,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "hpea",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.6,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "hpea",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 0.6,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Set random hero spawn point to be off to the side of the start location.",
                },
                JASSSet {
                  "name": Name {
                    "value": "heroLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        384,
                        45,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "townHall",
                  },
                  "operator": "!=",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      FourCC {
                        "value": "Amic",
                      },
                      Name {
                        "value": "townHall",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitAddAbilityBJ",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      true,
                      FourCC {
                        "value": "Amic",
                      },
                      Name {
                        "value": "townHall",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "UnitMakeAbilityPermanentBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doHeroes",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " If the \\"Random Hero\\" option is set, start the player with a random hero.",
                },
                Comment {
                  "value": " Otherwise, give them a \\"free hero\\" token.",
                },
                IfThenElse {
                  "condition": Name {
                    "value": "useRandomHero",
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichPlayer",
                                },
                                Name {
                                  "value": "PLAYER_STATE_RESOURCE_HERO_TOKENS",
                                },
                                Name {
                                  "value": "bj_MELEE_STARTING_HERO_TOKENS",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "SetPlayerState",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            FourCC {
                              "value": "Hamg",
                            },
                            FourCC {
                              "value": "Hmkg",
                            },
                            FourCC {
                              "value": "Hpal",
                            },
                            FourCC {
                              "value": "Hblm",
                            },
                            Name {
                              "value": "heroLoc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "MeleeRandomHeroLoc",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doCamera",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Center the camera on the initial Peasants.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "peonX",
                      },
                      Name {
                        "value": "peonY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraPositionForPlayer",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "peonX",
                      },
                      Name {
                        "value": "peonY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraQuickPositionForPlayer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Starting Units for Orc Players",
    },
    Comment {
      "value": "   - 1 Great Hall, placed at start location",
    },
    Comment {
      "value": "   - 5 Peons, placed between start location and nearest gold mine",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingUnitsOrc",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "startLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "doHeroes",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doCamera",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doPreload",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "useRandomHero",
            },
            "type": "boolean",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "MAP_RANDOM_HERO",
                  },
                ],
              },
              "name": Name {
                "value": "IsMapFlagSet",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitSpacing",
            },
            "type": "real",
            "value": 64,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearestMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearMineLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "heroLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "peonX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "peonY",
            },
            "type": "real",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doPreload",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      "scripts\\\\\\\\OrcMelee.pld",
                    ],
                  },
                  "name": Name {
                    "value": "Preloader",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "nearestMine",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "startLoc",
                  },
                  Name {
                    "value": "bj_MELEE_MINE_SEARCH_RADIUS",
                  },
                ],
              },
              "name": Name {
                "value": "MeleeFindNearestMine",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "nearestMine",
                  },
                  "operator": "!=",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Spawn Great Hall at the start location.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "ogre",
                          },
                          Name {
                            "value": "startLoc",
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnitAtLoc",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Spawn Peons directly south of the town hall.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "peonX",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "startLoc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                    },
                    JASSSet {
                      "name": Name {
                        "value": "peonY",
                      },
                      "value": BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "startLoc",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationY",
                          },
                        },
                        "operator": "-",
                        "right": 224,
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "opeo",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 2,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "opeo",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 1,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "opeo",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "opeo",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "-",
                            "right": BinaryOp {
                              "left": 1,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "opeo",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "-",
                            "right": BinaryOp {
                              "left": 2,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Set random hero spawn point to be just south of the start location.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "heroLoc",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "peonX",
                            },
                            BinaryOp {
                              "left": Name {
                                "value": "peonY",
                              },
                              "operator": "-",
                              "right": BinaryOp {
                                "left": 2,
                                "operator": "*",
                                "right": Name {
                                  "value": "unitSpacing",
                                },
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Location",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Spawn Great Hall at the start location.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "ogre",
                      },
                      Name {
                        "value": "startLoc",
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnitAtLoc",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Spawn Peons near the mine.",
                },
                JASSSet {
                  "name": Name {
                    "value": "nearMineLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        320,
                        0,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "peonX",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearMineLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "peonY",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearMineLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "opeo",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "opeo",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.15,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "opeo",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.15,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "opeo",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.6,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "opeo",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 0.6,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Set random hero spawn point to be off to the side of the start location.",
                },
                JASSSet {
                  "name": Name {
                    "value": "heroLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        384,
                        45,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doHeroes",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " If the \\"Random Hero\\" option is set, start the player with a random hero.",
                },
                Comment {
                  "value": " Otherwise, give them a \\"free hero\\" token.",
                },
                IfThenElse {
                  "condition": Name {
                    "value": "useRandomHero",
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichPlayer",
                                },
                                Name {
                                  "value": "PLAYER_STATE_RESOURCE_HERO_TOKENS",
                                },
                                Name {
                                  "value": "bj_MELEE_STARTING_HERO_TOKENS",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "SetPlayerState",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            FourCC {
                              "value": "Obla",
                            },
                            FourCC {
                              "value": "Ofar",
                            },
                            FourCC {
                              "value": "Otch",
                            },
                            FourCC {
                              "value": "Oshd",
                            },
                            Name {
                              "value": "heroLoc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "MeleeRandomHeroLoc",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doCamera",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Center the camera on the initial Peons.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "peonX",
                      },
                      Name {
                        "value": "peonY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraPositionForPlayer",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "peonX",
                      },
                      Name {
                        "value": "peonY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraQuickPositionForPlayer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Starting Units for Undead Players",
    },
    Comment {
      "value": "   - 1 Necropolis, placed at start location",
    },
    Comment {
      "value": "   - 1 Haunted Gold Mine, placed on nearest gold mine",
    },
    Comment {
      "value": "   - 3 Acolytes, placed between start location and nearest gold mine",
    },
    Comment {
      "value": "   - 1 Ghoul, placed between start location and nearest gold mine",
    },
    Comment {
      "value": "   - Blight, centered on nearest gold mine, spread across a \\"large area\\"",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingUnitsUndead",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "startLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "doHeroes",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doCamera",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doPreload",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "useRandomHero",
            },
            "type": "boolean",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "MAP_RANDOM_HERO",
                  },
                ],
              },
              "name": Name {
                "value": "IsMapFlagSet",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitSpacing",
            },
            "type": "real",
            "value": 64,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearestMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearMineLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearTownLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "heroLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "peonX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "peonY",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "ghoulX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "ghoulY",
            },
            "type": "real",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doPreload",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      "scripts\\\\\\\\UndeadMelee.pld",
                    ],
                  },
                  "name": Name {
                    "value": "Preloader",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "nearestMine",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "startLoc",
                  },
                  Name {
                    "value": "bj_MELEE_MINE_SEARCH_RADIUS",
                  },
                ],
              },
              "name": Name {
                "value": "MeleeFindNearestMine",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "nearestMine",
                  },
                  "operator": "!=",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Spawn Necropolis at the start location.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "unpl",
                          },
                          Name {
                            "value": "startLoc",
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnitAtLoc",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Spawn Acolytes and Ghoul directly south of the Necropolis.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "peonX",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "startLoc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                    },
                    JASSSet {
                      "name": Name {
                        "value": "peonY",
                      },
                      "value": BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "startLoc",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationY",
                          },
                        },
                        "operator": "-",
                        "right": 224,
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "uaco",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "-",
                            "right": BinaryOp {
                              "left": 1.5,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "uaco",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "-",
                            "right": BinaryOp {
                              "left": 0.5,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "uaco",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0.5,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "ugho",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 1.5,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Create a patch of blight around the start location.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          Name {
                            "value": "startLoc",
                          },
                          768,
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "SetBlightLoc",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Set random hero spawn point to be just south of the start location.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "heroLoc",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "peonX",
                            },
                            BinaryOp {
                              "left": Name {
                                "value": "peonY",
                              },
                              "operator": "-",
                              "right": BinaryOp {
                                "left": 2,
                                "operator": "*",
                                "right": Name {
                                  "value": "unitSpacing",
                                },
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Location",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Spawn Necropolis at the start location.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "unpl",
                      },
                      Name {
                        "value": "startLoc",
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnitAtLoc",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Replace the nearest gold mine with a blighted version.",
                },
                JASSSet {
                  "name": Name {
                    "value": "nearestMine",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearestMine",
                        },
                        Name {
                          "value": "whichPlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "BlightGoldMineForPlayerBJ",
                    },
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Spawn Ghoul near the Necropolis.",
                },
                JASSSet {
                  "name": Name {
                    "value": "nearTownLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "startLoc",
                        },
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        288,
                        0,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "ghoulX",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearTownLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "ghoulY",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearTownLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_ghoul",
                  },
                  "prop": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichPlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerId",
                    },
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichPlayer",
                        },
                        FourCC {
                          "value": "ugho",
                        },
                        BinaryOp {
                          "left": Name {
                            "value": "ghoulX",
                          },
                          "operator": "+",
                          "right": BinaryOp {
                            "left": 0,
                            "operator": "*",
                            "right": Name {
                              "value": "unitSpacing",
                            },
                          },
                        },
                        BinaryOp {
                          "left": Name {
                            "value": "ghoulY",
                          },
                          "operator": "+",
                          "right": BinaryOp {
                            "left": 0,
                            "operator": "*",
                            "right": Name {
                              "value": "unitSpacing",
                            },
                          },
                        },
                        Name {
                          "value": "bj_UNIT_FACING",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "CreateUnit",
                    },
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Spawn Acolytes near the mine.",
                },
                JASSSet {
                  "name": Name {
                    "value": "nearMineLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        320,
                        0,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "peonX",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearMineLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "peonY",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearMineLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "uaco",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.5,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "uaco",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.65,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 0.5,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "uaco",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 0.65,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 0.5,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Create a patch of blight around the gold mine.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "nearMineLoc",
                      },
                      768,
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "SetBlightLoc",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Set random hero spawn point to be off to the side of the start location.",
                },
                JASSSet {
                  "name": Name {
                    "value": "heroLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        384,
                        45,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doHeroes",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " If the \\"Random Hero\\" option is set, start the player with a random hero.",
                },
                Comment {
                  "value": " Otherwise, give them a \\"free hero\\" token.",
                },
                IfThenElse {
                  "condition": Name {
                    "value": "useRandomHero",
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichPlayer",
                                },
                                Name {
                                  "value": "PLAYER_STATE_RESOURCE_HERO_TOKENS",
                                },
                                Name {
                                  "value": "bj_MELEE_STARTING_HERO_TOKENS",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "SetPlayerState",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            FourCC {
                              "value": "Udea",
                            },
                            FourCC {
                              "value": "Udre",
                            },
                            FourCC {
                              "value": "Ulic",
                            },
                            FourCC {
                              "value": "Ucrl",
                            },
                            Name {
                              "value": "heroLoc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "MeleeRandomHeroLoc",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doCamera",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Center the camera on the initial Acolytes.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "peonX",
                      },
                      Name {
                        "value": "peonY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraPositionForPlayer",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "peonX",
                      },
                      Name {
                        "value": "peonY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraQuickPositionForPlayer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Starting Units for Night Elf Players",
    },
    Comment {
      "value": "   - 1 Tree of Life, placed by nearest gold mine, already entangled",
    },
    Comment {
      "value": "   - 5 Wisps, placed between Tree of Life and nearest gold mine",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingUnitsNightElf",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "startLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "doHeroes",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doCamera",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doPreload",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "useRandomHero",
            },
            "type": "boolean",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "MAP_RANDOM_HERO",
                  },
                ],
              },
              "name": Name {
                "value": "IsMapFlagSet",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitSpacing",
            },
            "type": "real",
            "value": 64,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "minTreeDist",
            },
            "type": "real",
            "value": BinaryOp {
              "left": 3.5,
              "operator": "*",
              "right": Name {
                "value": "bj_CELLWIDTH",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "minWispDist",
            },
            "type": "real",
            "value": BinaryOp {
              "left": 1.75,
              "operator": "*",
              "right": Name {
                "value": "bj_CELLWIDTH",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearestMine",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "nearMineLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "wispLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "heroLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "peonX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "peonY",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "tree",
            },
            "type": Name {
              "value": "unit",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doPreload",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      "scripts\\\\\\\\NightElfMelee.pld",
                    ],
                  },
                  "name": Name {
                    "value": "Preloader",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "nearestMine",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "startLoc",
                  },
                  Name {
                    "value": "bj_MELEE_MINE_SEARCH_RADIUS",
                  },
                ],
              },
              "name": Name {
                "value": "MeleeFindNearestMine",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "nearestMine",
                  },
                  "operator": "!=",
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Spawn Tree of Life at the start location.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "etol",
                          },
                          Name {
                            "value": "startLoc",
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnitAtLoc",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Spawn Wisps directly south of the town hall.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "peonX",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "startLoc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetLocationX",
                        },
                      },
                    },
                    JASSSet {
                      "name": Name {
                        "value": "peonY",
                      },
                      "value": BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "startLoc",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationY",
                          },
                        },
                        "operator": "-",
                        "right": 224,
                      },
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "ewsp",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "-",
                            "right": BinaryOp {
                              "left": 2,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "ewsp",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "-",
                            "right": BinaryOp {
                              "left": 1,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "ewsp",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "ewsp",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 1,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          FourCC {
                            "value": "ewsp",
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonX",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 2,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          BinaryOp {
                            "left": Name {
                              "value": "peonY",
                            },
                            "operator": "+",
                            "right": BinaryOp {
                              "left": 0,
                              "operator": "*",
                              "right": Name {
                                "value": "unitSpacing",
                              },
                            },
                          },
                          Name {
                            "value": "bj_UNIT_FACING",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "CreateUnit",
                      },
                      "statement": true,
                    },
                    EmptyLine {},
                    Comment {
                      "value": " Set random hero spawn point to be just south of the start location.",
                    },
                    JASSSet {
                      "name": Name {
                        "value": "heroLoc",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "peonX",
                            },
                            BinaryOp {
                              "left": Name {
                                "value": "peonY",
                              },
                              "operator": "-",
                              "right": BinaryOp {
                                "left": 2,
                                "operator": "*",
                                "right": Name {
                                  "value": "unitSpacing",
                                },
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Location",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Spawn Tree of Life near the mine and have it entangle the mine.",
                },
                Comment {
                  "value": " Project the Tree's coordinates from the gold mine, and then snap",
                },
                Comment {
                  "value": " the X and Y values to within minTreeDist of the Gold Mine.",
                },
                JASSSet {
                  "name": Name {
                    "value": "nearMineLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        650,
                        0,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "nearMineLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "nearMineLoc",
                        },
                        Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "nearestMine",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetUnitLoc",
                                },
                              },
                              Name {
                                "value": "minTreeDist",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetRectFromCircleBJ",
                          },
                        },
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetLocWithinRect",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "tree",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichPlayer",
                        },
                        FourCC {
                          "value": "etol",
                        },
                        Name {
                          "value": "nearMineLoc",
                        },
                        Name {
                          "value": "bj_UNIT_FACING",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "CreateUnitAtLoc",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "tree",
                      },
                      "entangleinstant",
                      Name {
                        "value": "nearestMine",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IssueTargetOrder",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Spawn Wisps at the start location.",
                },
                JASSSet {
                  "name": Name {
                    "value": "wispLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        320,
                        0,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "wispLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "wispLoc",
                        },
                        Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "nearestMine",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetUnitLoc",
                                },
                              },
                              Name {
                                "value": "minWispDist",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetRectFromCircleBJ",
                          },
                        },
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetLocWithinRect",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "peonX",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "wispLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationX",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "peonY",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "wispLoc",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetLocationY",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "ewsp",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "ewsp",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.15,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "ewsp",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.15,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "ewsp",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "+",
                        "right": BinaryOp {
                          "left": 0.58,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "ewsp",
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonX",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 0.58,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Name {
                          "value": "peonY",
                        },
                        "operator": "-",
                        "right": BinaryOp {
                          "left": 1,
                          "operator": "*",
                          "right": Name {
                            "value": "unitSpacing",
                          },
                        },
                      },
                      Name {
                        "value": "bj_UNIT_FACING",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Set random hero spawn point to be off to the side of the start location.",
                },
                JASSSet {
                  "name": Name {
                    "value": "heroLoc",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "nearestMine",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetUnitLoc",
                          },
                        },
                        Name {
                          "value": "startLoc",
                        },
                        384,
                        45,
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetProjectedLoc",
                    },
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doHeroes",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " If the \\"Random Hero\\" option is set, start the player with a random hero.",
                },
                Comment {
                  "value": " Otherwise, give them a \\"free hero\\" token.",
                },
                IfThenElse {
                  "condition": Name {
                    "value": "useRandomHero",
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "whichPlayer",
                                },
                                Name {
                                  "value": "PLAYER_STATE_RESOURCE_HERO_TOKENS",
                                },
                                Name {
                                  "value": "bj_MELEE_STARTING_HERO_TOKENS",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "SetPlayerState",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            FourCC {
                              "value": "Edem",
                            },
                            FourCC {
                              "value": "Ekee",
                            },
                            FourCC {
                              "value": "Emoo",
                            },
                            FourCC {
                              "value": "Ewar",
                            },
                            Name {
                              "value": "heroLoc",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "MeleeRandomHeroLoc",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doCamera",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Center the camera on the initial Wisps.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "peonX",
                      },
                      Name {
                        "value": "peonY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraPositionForPlayer",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "peonX",
                      },
                      Name {
                        "value": "peonY",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraQuickPositionForPlayer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Starting Units for Players Whose Race is Unknown",
    },
    Comment {
      "value": "   - 12 Sheep, placed randomly around the start location",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingUnitsUnknownRace",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "startLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "doHeroes",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doCamera",
            },
            "type": "boolean",
          },
          Param {
            "name": Name {
              "value": "doPreload",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doPreload",
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      FourCC {
                        "value": "nshe",
                      },
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "startLoc",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationX",
                          },
                        },
                        "operator": "+",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              UnaryOp {
                                "expr": 256,
                                "operator": "-",
                              },
                              256,
                            ],
                          },
                          "name": Name {
                            "value": "GetRandomReal",
                          },
                        },
                      },
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "startLoc",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetLocationY",
                          },
                        },
                        "operator": "+",
                        "right": Call {
                          "args": Args {
                            "body": Array [
                              UnaryOp {
                                "expr": 256,
                                "operator": "-",
                              },
                              256,
                            ],
                          },
                          "name": Name {
                            "value": "GetRandomReal",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            0,
                            360,
                          ],
                        },
                        "name": Name {
                          "value": "GetRandomReal",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CreateUnit",
                  },
                  "statement": true,
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": 12,
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doHeroes",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Give them a \\"free hero\\" token, out of pity.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "PLAYER_STATE_RESOURCE_HERO_TOKENS",
                      },
                      Name {
                        "value": "bj_MELEE_STARTING_HERO_TOKENS",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerState",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "doCamera",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Center the camera on the initial sheep.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "startLoc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraPositionLocForPlayer",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "startLoc",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetCameraQuickPositionLocForPlayer",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingUnits",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexStartLoc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexRace",
            },
            "type": Name {
              "value": "race",
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                "scripts\\\\\\\\SharedMelee.pld",
              ],
            },
            "name": Name {
              "value": "Preloader",
            },
            "statement": true,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerSlotState",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "PLAYER_SLOT_STATE_PLAYING",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "indexStartLoc",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "indexPlayer",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetPlayerStartLocation",
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetStartLocationLoc",
                          },
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "indexRace",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerRace",
                          },
                        },
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Create initial race-specific starting units",
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Name {
                                "value": "indexRace",
                              },
                              "operator": "==",
                              "right": Name {
                                "value": "RACE_HUMAN",
                              },
                            },
                          ],
                        },
                        "elses": Array [
                          ElseIf {
                            "condition": Parens {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "indexRace",
                                  },
                                  "operator": "==",
                                  "right": Name {
                                    "value": "RACE_ORC",
                                  },
                                },
                              ],
                            },
                            "statements": Statements {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "indexPlayer",
                                      },
                                      Name {
                                        "value": "indexStartLoc",
                                      },
                                      true,
                                      true,
                                      true,
                                    ],
                                  },
                                  "name": Name {
                                    "value": "MeleeStartingUnitsOrc",
                                  },
                                  "statement": true,
                                },
                              ],
                            },
                          },
                          ElseIf {
                            "condition": Parens {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "indexRace",
                                  },
                                  "operator": "==",
                                  "right": Name {
                                    "value": "RACE_UNDEAD",
                                  },
                                },
                              ],
                            },
                            "statements": Statements {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "indexPlayer",
                                      },
                                      Name {
                                        "value": "indexStartLoc",
                                      },
                                      true,
                                      true,
                                      true,
                                    ],
                                  },
                                  "name": Name {
                                    "value": "MeleeStartingUnitsUndead",
                                  },
                                  "statement": true,
                                },
                              ],
                            },
                          },
                          ElseIf {
                            "condition": Parens {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "indexRace",
                                  },
                                  "operator": "==",
                                  "right": Name {
                                    "value": "RACE_NIGHTELF",
                                  },
                                },
                              ],
                            },
                            "statements": Statements {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "indexPlayer",
                                      },
                                      Name {
                                        "value": "indexStartLoc",
                                      },
                                      true,
                                      true,
                                      true,
                                    ],
                                  },
                                  "name": Name {
                                    "value": "MeleeStartingUnitsNightElf",
                                  },
                                  "statement": true,
                                },
                              ],
                            },
                          },
                          Else {
                            "statements": Statements {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "indexPlayer",
                                      },
                                      Name {
                                        "value": "indexStartLoc",
                                      },
                                      true,
                                      true,
                                      true,
                                    ],
                                  },
                                  "name": Name {
                                    "value": "MeleeStartingUnitsUnknownRace",
                                  },
                                  "statement": true,
                                },
                              ],
                            },
                          },
                        ],
                        "then": Statements {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "indexPlayer",
                                  },
                                  Name {
                                    "value": "indexStartLoc",
                                  },
                                  true,
                                  true,
                                  true,
                                ],
                              },
                              "name": Name {
                                "value": "MeleeStartingUnitsHuman",
                              },
                              "statement": true,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingUnitsForPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichRace",
            },
            "type": Name {
              "value": "race",
            },
          },
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "loc",
            },
            "type": Name {
              "value": "location",
            },
          },
          Param {
            "name": Name {
              "value": "doHeroes",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Create initial race-specific starting units",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "whichRace",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "RACE_HUMAN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "whichRace",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_ORC",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          Name {
                            "value": "loc",
                          },
                          Name {
                            "value": "doHeroes",
                          },
                          false,
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "MeleeStartingUnitsOrc",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "whichRace",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_UNDEAD",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          Name {
                            "value": "loc",
                          },
                          Name {
                            "value": "doHeroes",
                          },
                          false,
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "MeleeStartingUnitsUndead",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "whichRace",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_NIGHTELF",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          Name {
                            "value": "loc",
                          },
                          Name {
                            "value": "doHeroes",
                          },
                          false,
                          false,
                        ],
                      },
                      "name": Name {
                        "value": "MeleeStartingUnitsNightElf",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized race - ignore the request.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      Name {
                        "value": "loc",
                      },
                      Name {
                        "value": "doHeroes",
                      },
                      false,
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "MeleeStartingUnitsHuman",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Melee Template Starting AI Scripts",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PickMeleeAI",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "num",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "s1",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "s2",
            },
            "type": "string",
          },
          Param {
            "name": Name {
              "value": "s3",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "pick",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " easy difficulty never uses any custom AI scripts",
          },
          Comment {
            "value": " that are designed to be a bit more challenging",
          },
          Comment {
            "value": "",
          },
          IfThenElse {
            "condition": BinaryOp {
              "left": Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "num",
                    },
                  ],
                },
                "name": Name {
                  "value": "GetAIDifficulty",
                },
              },
              "operator": "==",
              "right": Name {
                "value": "AI_DIFFICULTY_NEWBIE",
              },
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "num",
                      },
                      Name {
                        "value": "s1",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartMeleeAI",
                  },
                  "statement": true,
                },
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "s2",
              },
              "operator": "==",
            },
            "elses": Array [
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "s3",
                  },
                  "operator": "==",
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "pick",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            1,
                            2,
                          ],
                        },
                        "name": Name {
                          "value": "GetRandomInt",
                        },
                      },
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "pick",
                      },
                      "value": Call {
                        "args": Args {
                          "body": Array [
                            1,
                            3,
                          ],
                        },
                        "name": Name {
                          "value": "GetRandomInt",
                        },
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "pick",
                  },
                  "value": 1,
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "pick",
              },
              "operator": "==",
              "right": 1,
            },
            "elses": Array [
              ElseIf {
                "condition": BinaryOp {
                  "left": Name {
                    "value": "pick",
                  },
                  "operator": "==",
                  "right": 2,
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "num",
                          },
                          Name {
                            "value": "s2",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "StartMeleeAI",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "num",
                          },
                          Name {
                            "value": "s3",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "StartMeleeAI",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "num",
                      },
                      Name {
                        "value": "s1",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartMeleeAI",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeStartingAI",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexRace",
            },
            "type": Name {
              "value": "race",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerSlotState",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "PLAYER_SLOT_STATE_PLAYING",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "indexRace",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerRace",
                          },
                        },
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "indexPlayer",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetPlayerController",
                                },
                              },
                              "operator": "==",
                              "right": Name {
                                "value": "MAP_CONTROL_COMPUTER",
                              },
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            Comment {
                              "value": " Run a race-specific melee AI script.",
                            },
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": Name {
                                      "value": "indexRace",
                                    },
                                    "operator": "==",
                                    "right": Name {
                                      "value": "RACE_HUMAN",
                                    },
                                  },
                                ],
                              },
                              "elses": Array [
                                ElseIf {
                                  "condition": Parens {
                                    "data": Array [
                                      BinaryOp {
                                        "left": Name {
                                          "value": "indexRace",
                                        },
                                        "operator": "==",
                                        "right": Name {
                                          "value": "RACE_ORC",
                                        },
                                      },
                                    ],
                                  },
                                  "statements": Statements {
                                    "body": Array [
                                      Call {
                                        "args": Args {
                                          "body": Array [
                                            Name {
                                              "value": "indexPlayer",
                                            },
                                            "orc.ai",
                                            null,
                                            null,
                                          ],
                                        },
                                        "name": Name {
                                          "value": "PickMeleeAI",
                                        },
                                        "statement": true,
                                      },
                                    ],
                                  },
                                },
                                ElseIf {
                                  "condition": Parens {
                                    "data": Array [
                                      BinaryOp {
                                        "left": Name {
                                          "value": "indexRace",
                                        },
                                        "operator": "==",
                                        "right": Name {
                                          "value": "RACE_UNDEAD",
                                        },
                                      },
                                    ],
                                  },
                                  "statements": Statements {
                                    "body": Array [
                                      Call {
                                        "args": Args {
                                          "body": Array [
                                            Name {
                                              "value": "indexPlayer",
                                            },
                                            "undead.ai",
                                            null,
                                            null,
                                          ],
                                        },
                                        "name": Name {
                                          "value": "PickMeleeAI",
                                        },
                                        "statement": true,
                                      },
                                      Call {
                                        "args": Args {
                                          "body": Array [
                                            ArrayRef {
                                              "name": Name {
                                                "value": "bj_ghoul",
                                              },
                                              "prop": Name {
                                                "value": "index",
                                              },
                                            },
                                          ],
                                        },
                                        "name": Name {
                                          "value": "RecycleGuardPosition",
                                        },
                                        "statement": true,
                                      },
                                    ],
                                  },
                                },
                                ElseIf {
                                  "condition": Parens {
                                    "data": Array [
                                      BinaryOp {
                                        "left": Name {
                                          "value": "indexRace",
                                        },
                                        "operator": "==",
                                        "right": Name {
                                          "value": "RACE_NIGHTELF",
                                        },
                                      },
                                    ],
                                  },
                                  "statements": Statements {
                                    "body": Array [
                                      Call {
                                        "args": Args {
                                          "body": Array [
                                            Name {
                                              "value": "indexPlayer",
                                            },
                                            "elf.ai",
                                            null,
                                            null,
                                          ],
                                        },
                                        "name": Name {
                                          "value": "PickMeleeAI",
                                        },
                                        "statement": true,
                                      },
                                    ],
                                  },
                                },
                                Else {
                                  "statements": Statements {
                                    "body": Array [
                                      Comment {
                                        "value": " Unrecognized race.",
                                      },
                                    ],
                                  },
                                },
                              ],
                              "then": Statements {
                                "body": Array [
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "indexPlayer",
                                        },
                                        "human.ai",
                                        null,
                                        null,
                                      ],
                                    },
                                    "name": Name {
                                      "value": "PickMeleeAI",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "indexPlayer",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "ShareEverythingWithTeamAI",
                              },
                              "statement": true,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "LockGuardPosition",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "targ",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "targ",
                },
                true,
              ],
            },
            "name": Name {
              "value": "SetUnitCreepGuard",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Melee Template Victory / Defeat Conditions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleePlayerIsOpponent",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "opponentIndex",
            },
            "type": "integer",
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "thePlayer",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "playerIndex",
                  },
                ],
              },
              "name": Name {
                "value": "Player",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "theOpponent",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "opponentIndex",
                  },
                ],
              },
              "name": Name {
                "value": "Player",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " The player himself is not an opponent.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "playerIndex",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "opponentIndex",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Unused player slots are not opponents.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "theOpponent",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerSlotState",
                    },
                  },
                  "operator": "!=",
                  "right": Name {
                    "value": "PLAYER_SLOT_STATE_PLAYING",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Players who are already defeated are not opponents.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                ArrayRef {
                  "name": Name {
                    "value": "bj_meleeDefeated",
                  },
                  "prop": Name {
                    "value": "opponentIndex",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Allied players with allied victory set are not opponents.",
          },
          IfThenElse {
            "condition": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "thePlayer",
                  },
                  Name {
                    "value": "theOpponent",
                  },
                  Name {
                    "value": "ALLIANCE_PASSIVE",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerAlliance",
              },
            },
            "then": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "theOpponent",
                        },
                        Name {
                          "value": "thePlayer",
                        },
                        Name {
                          "value": "ALLIANCE_PASSIVE",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerAlliance",
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "thePlayer",
                                    },
                                    Name {
                                      "value": "PLAYER_STATE_ALLIED_VICTORY",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetPlayerState",
                                },
                              },
                              "operator": "==",
                              "right": 1,
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "theOpponent",
                                          },
                                          Name {
                                            "value": "PLAYER_STATE_ALLIED_VICTORY",
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "GetPlayerState",
                                      },
                                    },
                                    "operator": "==",
                                    "right": 1,
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  Return {
                                    "data": Array [
                                      false,
                                    ],
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              true,
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Count buildings currently owned by all allies, including the player themself.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetAllyStructureCount",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "buildingCount",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Count the number of buildings controlled by all not-yet-defeated co-allies.",
          },
          JASSSet {
            "name": Name {
              "value": "buildingCount",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " uncomment to cause defeat even if you have control of ally structures, but yours have been nixed",
                },
                Comment {
                  "value": "if (PlayersAreCoAllied(whichPlayer, indexPlayer) and not bj_meleeDefeated[playerIndex]) then",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "PlayersAreCoAllied",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "buildingCount",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "buildingCount",
                          },
                          "operator": "+",
                          "right": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "indexPlayer",
                                },
                                true,
                              ],
                            },
                            "name": Name {
                              "value": "GetPlayerStructureCount",
                            },
                          },
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "buildingCount",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Count allies, excluding dead players and the player themself.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetAllyCount",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerCount",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Count the number of not-yet-defeated co-allies.",
          },
          JASSSet {
            "name": Name {
              "value": "playerCount",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": BinaryOp {
                    "left": BinaryOp {
                      "left": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "PlayersAreCoAllied",
                        },
                      },
                      "operator": "and",
                      "right": UnaryOp {
                        "expr": ArrayRef {
                          "name": Name {
                            "value": "bj_meleeDefeated",
                          },
                          "prop": Name {
                            "value": "playerIndex",
                          },
                        },
                        "operator": "not",
                      },
                    },
                    "operator": "and",
                    "right": Parens {
                      "data": Array [
                        BinaryOp {
                          "left": Name {
                            "value": "whichPlayer",
                          },
                          "operator": "!=",
                          "right": Name {
                            "value": "indexPlayer",
                          },
                        },
                      ],
                    },
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "playerCount",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "playerCount",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "playerCount",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Counts key structures owned by a player and his or her allies, including",
    },
    Comment {
      "value": " structures currently upgrading or under construction.",
    },
    Comment {
      "value": "",
    },
    Comment {
      "value": " Key structures: Town Hall, Great Hall, Tree of Life, Necropolis",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetAllyKeyStructureCount",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "keyStructs",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " Count the number of buildings controlled by all not-yet-defeated co-allies.",
          },
          JASSSet {
            "name": Name {
              "value": "keyStructs",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "PlayersAreCoAllied",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "keyStructs",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "keyStructs",
                          },
                          "operator": "+",
                          "right": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "indexPlayer",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "BlzGetPlayerTownHallCount",
                            },
                          },
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "keyStructs",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Enum: Draw out a specific player.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeDoDrawEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "thePlayer",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumPlayer",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "thePlayer",
                },
              ],
            },
            "name": Name {
              "value": "CachePlayerHeroData",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "thePlayer",
                },
                Name {
                  "value": "PLAYER_GAME_RESULT_TIE",
                },
                false,
              ],
            },
            "name": Name {
              "value": "RemovePlayerPreserveUnitsBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Enum: Victory out a specific player.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeDoVictoryEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "thePlayer",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumPlayer",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "thePlayer",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerId",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                UnaryOp {
                  "expr": ArrayRef {
                    "name": Name {
                      "value": "bj_meleeVictoried",
                    },
                    "prop": Name {
                      "value": "playerIndex",
                    },
                  },
                  "operator": "not",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_meleeVictoried",
                  },
                  "prop": Name {
                    "value": "playerIndex",
                  },
                  "value": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "thePlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "CachePlayerHeroData",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "thePlayer",
                      },
                      Name {
                        "value": "PLAYER_GAME_RESULT_VICTORY",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "RemovePlayerPreserveUnitsBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Defeat out a specific player.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeDoDefeat",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_meleeDefeated",
            },
            "prop": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerId",
              },
            },
            "value": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "PLAYER_GAME_RESULT_DEFEAT",
                },
                false,
              ],
            },
            "name": Name {
              "value": "RemovePlayerPreserveUnitsBJ",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Enum: Defeat out a specific player.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeDoDefeatEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "thePlayer",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "name": Name {
                "value": "GetEnumPlayer",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " needs to happen before ownership change",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "thePlayer",
                },
              ],
            },
            "name": Name {
              "value": "CachePlayerHeroData",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "thePlayer",
                },
              ],
            },
            "name": Name {
              "value": "MakeUnitsPassiveForTeam",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "thePlayer",
                },
              ],
            },
            "name": Name {
              "value": "MeleeDoDefeat",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " A specific player left the game.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeDoLeave",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "GAME_STATE_DISCONNECTED",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetIntegerGameState",
                    },
                  },
                  "operator": "!=",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "bj_meleeDefeated",
                      },
                      "prop": Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "whichPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "GetPlayerId",
                        },
                      },
                      "value": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "whichPlayer",
                          },
                          Name {
                            "value": "PLAYER_GAME_RESULT_DEFEAT",
                          },
                          true,
                        ],
                      },
                      "name": Name {
                        "value": "RemovePlayerPreserveUnitsBJ",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "whichPlayer",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "GameOverDialogBJ",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Remove all observers",
    },
    Comment {
      "value": " ",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeRemoveObservers",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Give all observers the game over dialog",
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "IsPlayerObserver",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "PLAYER_GAME_RESULT_NEUTRAL",
                            },
                            false,
                          ],
                        },
                        "name": Name {
                          "value": "RemovePlayerPreserveUnitsBJ",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Test all players to determine if a team has won.  For a team to win, all",
    },
    Comment {
      "value": " remaining (read: undefeated) players need to be co-allied with all other",
    },
    Comment {
      "value": " remaining players.  If even one player is not allied towards another,",
    },
    Comment {
      "value": " everyone must be denied victory.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeCheckForVictors",
      },
      "returns": Name {
        "value": "force",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "opponentIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "opponentlessPlayers",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "gameOver",
            },
            "type": "boolean",
            "value": false,
          },
          EmptyLine {},
          Comment {
            "value": " Check to see if any players have opponents remaining.",
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": ArrayRef {
                          "name": Name {
                            "value": "bj_meleeDefeated",
                          },
                          "prop": Name {
                            "value": "playerIndex",
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Determine whether or not this player has any remaining opponents.",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "opponentIndex",
                        },
                        "value": 0,
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            Comment {
                              "value": " If anyone has an opponent, noone can be victorious yet.",
                            },
                            IfThenElse {
                              "condition": Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "playerIndex",
                                    },
                                    Name {
                                      "value": "opponentIndex",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "MeleePlayerIsOpponent",
                                },
                              },
                              "then": Statements {
                                "body": Array [
                                  Return {
                                    "data": Array [
                                      Call {
                                        "name": Name {
                                          "value": "CreateForce",
                                        },
                                      },
                                    ],
                                  },
                                ],
                              },
                            },
                            EmptyLine {},
                            JASSSet {
                              "name": Name {
                                "value": "opponentIndex",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "opponentIndex",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "opponentIndex",
                                  },
                                  "operator": "==",
                                  "right": Name {
                                    "value": "bj_MAX_PLAYERS",
                                  },
                                },
                              ],
                            },
                          ],
                        },
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Keep track of each opponentless player so that we can give",
                      },
                      Comment {
                        "value": " them a victory later.",
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "opponentlessPlayers",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "playerIndex",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "Player",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "ForceAddPlayer",
                        },
                        "statement": true,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "gameOver",
                        },
                        "value": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Set the game over global flag",
          },
          JASSSet {
            "name": Name {
              "value": "bj_meleeGameOver",
            },
            "value": Name {
              "value": "gameOver",
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "opponentlessPlayers",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Test each player to determine if anyone has been defeated.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeCheckForLosersAndVictors",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "defeatedPlayers",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "victoriousPlayers",
            },
            "type": Name {
              "value": "force",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "gameOver",
            },
            "type": "boolean",
            "value": false,
          },
          EmptyLine {},
          Comment {
            "value": " If the game is already over, do nothing",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "bj_meleeGameOver",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " If the game was disconnected then it is over, in this case we",
          },
          Comment {
            "value": " don't want to report results for anyone as they will most likely",
          },
          Comment {
            "value": " conflict with the actual game results",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "GAME_STATE_DISCONNECTED",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetIntegerGameState",
                    },
                  },
                  "operator": "!=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_meleeGameOver",
                  },
                  "value": true,
                },
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Check each player to see if he or she has been defeated yet.",
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": UnaryOp {
                          "expr": ArrayRef {
                            "name": Name {
                              "value": "bj_meleeDefeated",
                            },
                            "prop": Name {
                              "value": "playerIndex",
                            },
                          },
                          "operator": "not",
                        },
                        "operator": "and",
                        "right": UnaryOp {
                          "expr": ArrayRef {
                            "name": Name {
                              "value": "bj_meleeVictoried",
                            },
                            "prop": Name {
                              "value": "playerIndex",
                            },
                          },
                          "operator": "not",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": "call DisplayTimedTextToPlayer(GetLocalPlayer(), 0, 0, 60, \\"Player\\"+I2S(playerIndex)+\\" has \\"+I2S(MeleeGetAllyStructureCount(indexPlayer))+\\" ally buildings.\\")",
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "indexPlayer",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "MeleeGetAllyStructureCount",
                                },
                              },
                              "operator": "<=",
                              "right": 0,
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            EmptyLine {},
                            Comment {
                              "value": " Keep track of each defeated player so that we can give",
                            },
                            Comment {
                              "value": " them a defeat later.",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "defeatedPlayers",
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "playerIndex",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "Player",
                                    },
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "ForceAddPlayer",
                              },
                              "statement": true,
                            },
                            EmptyLine {},
                            Comment {
                              "value": " Set their defeated flag now so MeleeCheckForVictors",
                            },
                            Comment {
                              "value": " can detect victors.",
                            },
                            JASSSet {
                              "name": Name {
                                "value": "bj_meleeDefeated",
                              },
                              "prop": Name {
                                "value": "playerIndex",
                              },
                              "value": true,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Now that the defeated flags are set, check if there are any victors",
          },
          JASSSet {
            "name": Name {
              "value": "victoriousPlayers",
            },
            "value": Call {
              "name": Name {
                "value": "MeleeCheckForVictors",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Defeat all defeated players",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "defeatedPlayers",
                },
                FuncRef {
                  "data": Name {
                    "value": "MeleeDoDefeatEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForForce",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Give victory to all victorious players",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "victoriousPlayers",
                },
                FuncRef {
                  "data": Name {
                    "value": "MeleeDoVictoryEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForForce",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " If the game is over we should remove all observers",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Name {
                  "value": "bj_meleeGameOver",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "MeleeRemoveObservers",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns a race-specific \\"build X or be revealed\\" message.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetCrippledWarningMessage",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "race",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerRace",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "r",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "RACE_HUMAN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_ORC",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              "CRIPPLE_WARNING_ORC",
                            ],
                          },
                          "name": Name {
                            "value": "GetLocalizedString",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_NIGHTELF",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              "CRIPPLE_WARNING_NIGHTELF",
                            ],
                          },
                          "name": Name {
                            "value": "GetLocalizedString",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_UNDEAD",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              "CRIPPLE_WARNING_UNDEAD",
                            ],
                          },
                          "name": Name {
                            "value": "GetLocalizedString",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized Race",
                    },
                    Return {
                      "data": Array [
                        "",
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          "CRIPPLE_WARNING_HUMAN",
                        ],
                      },
                      "name": Name {
                        "value": "GetLocalizedString",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns a race-specific \\"build X\\" label for cripple timers.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetCrippledTimerMessage",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "r",
            },
            "type": Name {
              "value": "race",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerRace",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "r",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "RACE_HUMAN",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_ORC",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              "CRIPPLE_TIMER_ORC",
                            ],
                          },
                          "name": Name {
                            "value": "GetLocalizedString",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_NIGHTELF",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              "CRIPPLE_TIMER_NIGHTELF",
                            ],
                          },
                          "name": Name {
                            "value": "GetLocalizedString",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "r",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "RACE_UNDEAD",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Return {
                      "data": Array [
                        Call {
                          "args": Args {
                            "body": Array [
                              "CRIPPLE_TIMER_UNDEAD",
                            ],
                          },
                          "name": Name {
                            "value": "GetLocalizedString",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized Race",
                    },
                    Return {
                      "data": Array [
                        "",
                      ],
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          "CRIPPLE_TIMER_HUMAN",
                        ],
                      },
                      "name": Name {
                        "value": "GetLocalizedString",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Returns a race-specific \\"build X\\" label for cripple timers.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeGetCrippledRevealedMessage",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "string",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              BinaryOp {
                "left": BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        "CRIPPLE_REVEALING_PREFIX",
                      ],
                    },
                    "name": Name {
                      "value": "GetLocalizedString",
                    },
                  },
                  "operator": "+",
                  "right": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichPlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerName",
                    },
                  },
                },
                "operator": "+",
                "right": Call {
                  "args": Args {
                    "body": Array [
                      "CRIPPLE_REVEALING_POSTFIX",
                    ],
                  },
                  "name": Name {
                    "value": "GetLocalizedString",
                  },
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeExposePlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "expose",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "toExposeTo",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "toExposeTo",
                },
                false,
              ],
            },
            "name": Name {
              "value": "CripplePlayer",
            },
            "statement": true,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_playerIsExposed",
            },
            "prop": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerId",
              },
            },
            "value": Name {
              "value": "expose",
            },
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "whichPlayer",
                              },
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "PlayersAreCoAllied",
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "toExposeTo",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "ForceAddPlayer",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "whichPlayer",
                },
                Name {
                  "value": "toExposeTo",
                },
                Name {
                  "value": "expose",
                },
              ],
            },
            "name": Name {
              "value": "CripplePlayer",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "toExposeTo",
                },
              ],
            },
            "name": Name {
              "value": "DestroyForce",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeExposeAllPlayers",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex2",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer2",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "toExposeTo",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "toExposeTo",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ForceClear",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "indexPlayer",
                      },
                      Name {
                        "value": "toExposeTo",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "CripplePlayer",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex2",
                  },
                  "value": 0,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "indexPlayer2",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "playerIndex2",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "Player",
                          },
                        },
                      },
                      EmptyLine {},
                      IfThenElse {
                        "condition": BinaryOp {
                          "left": Name {
                            "value": "playerIndex",
                          },
                          "operator": "!=",
                          "right": Name {
                            "value": "playerIndex2",
                          },
                        },
                        "then": Statements {
                          "body": Array [
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  UnaryOp {
                                    "expr": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "indexPlayer",
                                          },
                                          Name {
                                            "value": "indexPlayer2",
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "PlayersAreCoAllied",
                                      },
                                    },
                                    "operator": "not",
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "toExposeTo",
                                        },
                                        Name {
                                          "value": "indexPlayer2",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "ForceAddPlayer",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      EmptyLine {},
                      JASSSet {
                        "name": Name {
                          "value": "playerIndex2",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "playerIndex2",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "playerIndex2",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_MAX_PLAYERS",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "indexPlayer",
                      },
                      Name {
                        "value": "toExposeTo",
                      },
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "CripplePlayer",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "toExposeTo",
                },
              ],
            },
            "name": Name {
              "value": "DestroyForce",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeCrippledPlayerTimeout",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "expiredTimer",
            },
            "type": Name {
              "value": "timer",
            },
            "value": Call {
              "name": Name {
                "value": "GetExpiredTimer",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "exposedPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Determine which player's timer expired.",
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": ArrayRef {
                          "name": Name {
                            "value": "bj_crippledTimer",
                          },
                          "prop": Name {
                            "value": "playerIndex",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "expiredTimer",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      ExitWhen {
                        "data": Array [
                          true,
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "playerIndex",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "bj_MAX_PLAYERS",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          JASSSet {
            "name": Name {
              "value": "exposedPlayer",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "playerIndex",
                  },
                ],
              },
              "name": Name {
                "value": "Player",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "name": Name {
                      "value": "GetLocalPlayer",
                    },
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "exposedPlayer",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                },
                EmptyLine {},
                Comment {
                  "value": " Hide the timer window for this player.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      ArrayRef {
                        "name": Name {
                          "value": "bj_crippledTimerWindows",
                        },
                        "prop": Name {
                          "value": "playerIndex",
                        },
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "TimerDialogDisplay",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Display a text message to all players, explaining the exposure.",
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetLocalPlayer",
                  },
                },
                0,
                0,
                Name {
                  "value": "bj_MELEE_CRIPPLE_MSG_DURATION",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "exposedPlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "MeleeGetCrippledRevealedMessage",
                  },
                },
              ],
            },
            "name": Name {
              "value": "DisplayTimedTextToPlayer",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Expose the player.",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "exposedPlayer",
                },
                true,
              ],
            },
            "name": Name {
              "value": "MeleeExposePlayer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleePlayerIsCrippled",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerStructures",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                  true,
                ],
              },
              "name": Name {
                "value": "GetPlayerStructureCount",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerKeyStructures",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                ],
              },
              "name": Name {
                "value": "BlzGetPlayerTownHallCount",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Dead players are not considered to be crippled.",
          },
          Return {
            "data": Array [
              BinaryOp {
                "left": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerStructures",
                      },
                      "operator": ">",
                      "right": 0,
                    },
                  ],
                },
                "operator": "and",
                "right": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerKeyStructures",
                      },
                      "operator": "<=",
                      "right": 0,
                    },
                  ],
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Test each player to determine if anyone has become crippled.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeCheckForCrippledPlayers",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "crippledPlayers",
            },
            "type": Name {
              "value": "force",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "isNowCrippled",
            },
            "type": "boolean",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexRace",
            },
            "type": Name {
              "value": "race",
            },
          },
          EmptyLine {},
          Comment {
            "value": " The \\"finish soon\\" exposure of all players overrides any \\"crippled\\" exposure",
          },
          IfThenElse {
            "condition": Name {
              "value": "bj_finishSoonAllExposed",
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Check each player to see if he or she has been crippled or uncrippled.",
          },
          JASSSet {
            "name": Name {
              "value": "playerIndex",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "playerIndex",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "isNowCrippled",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "indexPlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "MeleePlayerIsCrippled",
                    },
                  },
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": UnaryOp {
                          "expr": ArrayRef {
                            "name": Name {
                              "value": "bj_playerIsCrippled",
                            },
                            "prop": Name {
                              "value": "playerIndex",
                            },
                          },
                          "operator": "not",
                        },
                        "operator": "and",
                        "right": Name {
                          "value": "isNowCrippled",
                        },
                      },
                    ],
                  },
                  "elses": Array [
                    ElseIf {
                      "condition": Parens {
                        "data": Array [
                          BinaryOp {
                            "left": ArrayRef {
                              "name": Name {
                                "value": "bj_playerIsCrippled",
                              },
                              "prop": Name {
                                "value": "playerIndex",
                              },
                            },
                            "operator": "and",
                            "right": UnaryOp {
                              "expr": Name {
                                "value": "isNowCrippled",
                              },
                              "operator": "not",
                            },
                          },
                        ],
                      },
                      "statements": Statements {
                        "body": Array [
                          EmptyLine {},
                          Comment {
                            "value": " Player became uncrippled; stop their cripple timer.",
                          },
                          JASSSet {
                            "name": Name {
                              "value": "bj_playerIsCrippled",
                            },
                            "prop": Name {
                              "value": "playerIndex",
                            },
                            "value": false,
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                ArrayRef {
                                  "name": Name {
                                    "value": "bj_crippledTimer",
                                  },
                                  "prop": Name {
                                    "value": "playerIndex",
                                  },
                                },
                              ],
                            },
                            "name": Name {
                              "value": "PauseTimer",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                          IfThenElse {
                            "condition": Parens {
                              "data": Array [
                                BinaryOp {
                                  "left": Call {
                                    "name": Name {
                                      "value": "GetLocalPlayer",
                                    },
                                  },
                                  "operator": "==",
                                  "right": Name {
                                    "value": "indexPlayer",
                                  },
                                },
                              ],
                            },
                            "then": Statements {
                              "body": Array [
                                Comment {
                                  "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                                },
                                EmptyLine {},
                                Comment {
                                  "value": " Hide the timer window for this player.",
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      ArrayRef {
                                        "name": Name {
                                          "value": "bj_crippledTimerWindows",
                                        },
                                        "prop": Name {
                                          "value": "playerIndex",
                                        },
                                      },
                                      false,
                                    ],
                                  },
                                  "name": Name {
                                    "value": "TimerDialogDisplay",
                                  },
                                  "statement": true,
                                },
                                EmptyLine {},
                                Comment {
                                  "value": " Display a confirmation message if the player's team is still alive.",
                                },
                                IfThenElse {
                                  "condition": Parens {
                                    "data": Array [
                                      BinaryOp {
                                        "left": Call {
                                          "args": Args {
                                            "body": Array [
                                              Name {
                                                "value": "indexPlayer",
                                              },
                                            ],
                                          },
                                          "name": Name {
                                            "value": "MeleeGetAllyStructureCount",
                                          },
                                        },
                                        "operator": ">",
                                        "right": 0,
                                      },
                                    ],
                                  },
                                  "then": Statements {
                                    "body": Array [
                                      IfThenElse {
                                        "condition": Parens {
                                          "data": Array [
                                            ArrayRef {
                                              "name": Name {
                                                "value": "bj_playerIsExposed",
                                              },
                                              "prop": Name {
                                                "value": "playerIndex",
                                              },
                                            },
                                          ],
                                        },
                                        "elses": Array [
                                          Else {
                                            "statements": Statements {
                                              "body": Array [
                                                Call {
                                                  "args": Args {
                                                    "body": Array [
                                                      Name {
                                                        "value": "indexPlayer",
                                                      },
                                                      0,
                                                      0,
                                                      Name {
                                                        "value": "bj_MELEE_CRIPPLE_MSG_DURATION",
                                                      },
                                                      Call {
                                                        "args": Args {
                                                          "body": Array [
                                                            "CRIPPLE_UNCRIPPLED",
                                                          ],
                                                        },
                                                        "name": Name {
                                                          "value": "GetLocalizedString",
                                                        },
                                                      },
                                                    ],
                                                  },
                                                  "name": Name {
                                                    "value": "DisplayTimedTextToPlayer",
                                                  },
                                                  "statement": true,
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                        "then": Statements {
                                          "body": Array [
                                            Call {
                                              "args": Args {
                                                "body": Array [
                                                  Name {
                                                    "value": "indexPlayer",
                                                  },
                                                  0,
                                                  0,
                                                  Name {
                                                    "value": "bj_MELEE_CRIPPLE_MSG_DURATION",
                                                  },
                                                  Call {
                                                    "args": Args {
                                                      "body": Array [
                                                        "CRIPPLE_UNREVEALED",
                                                      ],
                                                    },
                                                    "name": Name {
                                                      "value": "GetLocalizedString",
                                                    },
                                                  },
                                                ],
                                              },
                                              "name": Name {
                                                "value": "DisplayTimedTextToPlayer",
                                              },
                                              "statement": true,
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                          EmptyLine {},
                          Comment {
                            "value": " If the player granted shared vision, deny that vision now.",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "indexPlayer",
                                },
                                false,
                              ],
                            },
                            "name": Name {
                              "value": "MeleeExposePlayer",
                            },
                            "statement": true,
                          },
                          EmptyLine {},
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      EmptyLine {},
                      Comment {
                        "value": " Player became crippled; start their cripple timer.",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_playerIsCrippled",
                        },
                        "prop": Name {
                          "value": "playerIndex",
                        },
                        "value": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            ArrayRef {
                              "name": Name {
                                "value": "bj_crippledTimer",
                              },
                              "prop": Name {
                                "value": "playerIndex",
                              },
                            },
                            Name {
                              "value": "bj_MELEE_CRIPPLE_TIMEOUT",
                            },
                            false,
                            FuncRef {
                              "data": Name {
                                "value": "MeleeCrippledPlayerTimeout",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TimerStart",
                        },
                        "statement": true,
                      },
                      EmptyLine {},
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Call {
                                "name": Name {
                                  "value": "GetLocalPlayer",
                                },
                              },
                              "operator": "==",
                              "right": Name {
                                "value": "indexPlayer",
                              },
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            Comment {
                              "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                            },
                            EmptyLine {},
                            Comment {
                              "value": " Show the timer window.",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  ArrayRef {
                                    "name": Name {
                                      "value": "bj_crippledTimerWindows",
                                    },
                                    "prop": Name {
                                      "value": "playerIndex",
                                    },
                                  },
                                  true,
                                ],
                              },
                              "name": Name {
                                "value": "TimerDialogDisplay",
                              },
                              "statement": true,
                            },
                            EmptyLine {},
                            Comment {
                              "value": " Display a warning message.",
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "indexPlayer",
                                  },
                                  0,
                                  0,
                                  Name {
                                    "value": "bj_MELEE_CRIPPLE_MSG_DURATION",
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        Name {
                                          "value": "indexPlayer",
                                        },
                                      ],
                                    },
                                    "name": Name {
                                      "value": "MeleeGetCrippledWarningMessage",
                                    },
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "DisplayTimedTextToPlayer",
                              },
                              "statement": true,
                            },
                          ],
                        },
                      },
                      EmptyLine {},
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "playerIndex",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "playerIndex",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Determine if the lost unit should result in any defeats or victories.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeCheckLostUnit",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "lostUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "lostUnitOwner",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "lostUnit",
                  },
                ],
              },
              "name": Name {
                "value": "GetOwningPlayer",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " We only need to check for mortality if this was the last building.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "lostUnitOwner",
                        },
                        true,
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerStructureCount",
                    },
                  },
                  "operator": "<=",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "MeleeCheckForLosersAndVictors",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Check if the lost unit has crippled or uncrippled the player.",
          },
          Comment {
            "value": " (A team with 0 units is dead, and thus considered uncrippled.)",
          },
          Call {
            "name": Name {
              "value": "MeleeCheckForCrippledPlayers",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Determine if the gained unit should result in any defeats, victories,",
    },
    Comment {
      "value": " or cripple-status changes.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeCheckAddedUnit",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "addedUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "addedUnitOwner",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "addedUnit",
                  },
                ],
              },
              "name": Name {
                "value": "GetOwningPlayer",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " If the player was crippled, this unit may have uncrippled him/her.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                ArrayRef {
                  "name": Name {
                    "value": "bj_playerIsCrippled",
                  },
                  "prop": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "addedUnitOwner",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerId",
                    },
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "MeleeCheckForCrippledPlayers",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTriggerActionConstructCancel",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetCancelledStructure",
                  },
                },
              ],
            },
            "name": Name {
              "value": "MeleeCheckLostUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTriggerActionUnitDeath",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetDyingUnit",
                        },
                      },
                      Name {
                        "value": "UNIT_TYPE_STRUCTURE",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsUnitType",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetDyingUnit",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "MeleeCheckLostUnit",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTriggerActionUnitConstructionStart",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetConstructingStructure",
                  },
                },
              ],
            },
            "name": Name {
              "value": "MeleeCheckAddedUnit",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTriggerActionPlayerDefeated",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "thePlayer",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "name": Name {
                "value": "GetTriggerPlayer",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "thePlayer",
                },
              ],
            },
            "name": Name {
              "value": "CachePlayerHeroData",
            },
            "statement": true,
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "thePlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetAllyCount",
                    },
                  },
                  "operator": ">",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " If no living allies remain, swap all units and buildings over to",
                    },
                    Comment {
                      "value": " neutral_passive and proceed with death.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "thePlayer",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "MakeUnitsPassiveForTeam",
                      },
                      "statement": true,
                    },
                    IfThenElse {
                      "condition": Parens {
                        "data": Array [
                          UnaryOp {
                            "expr": ArrayRef {
                              "name": Name {
                                "value": "bj_meleeDefeated",
                              },
                              "prop": Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "thePlayer",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetPlayerId",
                                },
                              },
                            },
                            "operator": "not",
                          },
                        ],
                      },
                      "then": Statements {
                        "body": Array [
                          Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "thePlayer",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "MeleeDoDefeat",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " If at least one ally is still alive and kicking, share units with",
                },
                Comment {
                  "value": " them and proceed with death.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "thePlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ShareEverythingWithTeam",
                  },
                  "statement": true,
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": ArrayRef {
                          "name": Name {
                            "value": "bj_meleeDefeated",
                          },
                          "prop": Call {
                            "args": Args {
                              "body": Array [
                                Name {
                                  "value": "thePlayer",
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetPlayerId",
                            },
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "thePlayer",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "MeleeDoDefeat",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
              ],
            },
          },
          Call {
            "name": Name {
              "value": "MeleeCheckForLosersAndVictors",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTriggerActionPlayerLeft",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "thePlayer",
            },
            "type": Name {
              "value": "player",
            },
            "value": Call {
              "name": Name {
                "value": "GetTriggerPlayer",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Just show game over for observers when they leave",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "thePlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "IsPlayerObserver",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "thePlayer",
                      },
                      Name {
                        "value": "PLAYER_GAME_RESULT_NEUTRAL",
                      },
                      false,
                    ],
                  },
                  "name": Name {
                    "value": "RemovePlayerPreserveUnitsBJ",
                  },
                  "statement": true,
                },
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "thePlayer",
                },
              ],
            },
            "name": Name {
              "value": "CachePlayerHeroData",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " This is the same as defeat except the player generates the message ",
          },
          Comment {
            "value": " \\"player left the game\\" as opposed to \\"player was defeated\\".",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "thePlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "MeleeGetAllyCount",
                    },
                  },
                  "operator": ">",
                  "right": 0,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " If no living allies remain, swap all units and buildings over to",
                    },
                    Comment {
                      "value": " neutral_passive and proceed with death.",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "thePlayer",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "MakeUnitsPassiveForTeam",
                      },
                      "statement": true,
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "thePlayer",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "MeleeDoLeave",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " If at least one ally is still alive and kicking, share units with",
                },
                Comment {
                  "value": " them and proceed with death.",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "thePlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ShareEverythingWithTeam",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "thePlayer",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "MeleeDoLeave",
                  },
                  "statement": true,
                },
              ],
            },
          },
          Call {
            "name": Name {
              "value": "MeleeCheckForLosersAndVictors",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTriggerActionAllianceChange",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "MeleeCheckForLosersAndVictors",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "MeleeCheckForCrippledPlayers",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTriggerTournamentFinishSoon",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Note: We may get this trigger multiple times",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "timeRemaining",
            },
            "type": "real",
            "value": Call {
              "name": Name {
                "value": "GetTournamentFinishSoonTimeRemaining",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": UnaryOp {
              "expr": Name {
                "value": "bj_finishSoonAllExposed",
              },
              "operator": "not",
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_finishSoonAllExposed",
                  },
                  "value": true,
                },
                EmptyLine {},
                Comment {
                  "value": " Reset all crippled players and their timers, and hide the local crippled timer dialog",
                },
                JASSSet {
                  "name": Name {
                    "value": "playerIndex",
                  },
                  "value": 0,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "indexPlayer",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "playerIndex",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "Player",
                          },
                        },
                      },
                      IfThenElse {
                        "condition": ArrayRef {
                          "name": Name {
                            "value": "bj_playerIsCrippled",
                          },
                          "prop": Name {
                            "value": "playerIndex",
                          },
                        },
                        "then": Statements {
                          "body": Array [
                            Comment {
                              "value": " Uncripple the player",
                            },
                            JASSSet {
                              "name": Name {
                                "value": "bj_playerIsCrippled",
                              },
                              "prop": Name {
                                "value": "playerIndex",
                              },
                              "value": false,
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  ArrayRef {
                                    "name": Name {
                                      "value": "bj_crippledTimer",
                                    },
                                    "prop": Name {
                                      "value": "playerIndex",
                                    },
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "PauseTimer",
                              },
                              "statement": true,
                            },
                            EmptyLine {},
                            IfThenElse {
                              "condition": Parens {
                                "data": Array [
                                  BinaryOp {
                                    "left": Call {
                                      "name": Name {
                                        "value": "GetLocalPlayer",
                                      },
                                    },
                                    "operator": "==",
                                    "right": Name {
                                      "value": "indexPlayer",
                                    },
                                  },
                                ],
                              },
                              "then": Statements {
                                "body": Array [
                                  Comment {
                                    "value": " Use only local code (no net traffic) within this block to avoid desyncs.",
                                  },
                                  EmptyLine {},
                                  Comment {
                                    "value": " Hide the timer window.",
                                  },
                                  Call {
                                    "args": Args {
                                      "body": Array [
                                        ArrayRef {
                                          "name": Name {
                                            "value": "bj_crippledTimerWindows",
                                          },
                                          "prop": Name {
                                            "value": "playerIndex",
                                          },
                                        },
                                        false,
                                      ],
                                    },
                                    "name": Name {
                                      "value": "TimerDialogDisplay",
                                    },
                                    "statement": true,
                                  },
                                ],
                              },
                            },
                            EmptyLine {},
                          ],
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "playerIndex",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "playerIndex",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "playerIndex",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_MAX_PLAYERS",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Expose all players",
                },
                Call {
                  "name": Name {
                    "value": "MeleeExposeAllPlayers",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Show the \\"finish soon\\" timer dialog and set the real time remaining",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_finishSoonTimerDialog",
                },
                true,
              ],
            },
            "name": Name {
              "value": "TimerDialogDisplay",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_finishSoonTimerDialog",
                },
                Name {
                  "value": "timeRemaining",
                },
              ],
            },
            "name": Name {
              "value": "TimerDialogSetRealTimeRemaining",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeWasUserPlayer",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
        ],
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "slotState",
            },
            "type": Name {
              "value": "playerslotstate",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "whichPlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "GetPlayerController",
                    },
                  },
                  "operator": "!=",
                  "right": Name {
                    "value": "MAP_CONTROL_USER",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    false,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "slotState",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerSlotState",
              },
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Parens {
                "data": Array [
                  BinaryOp {
                    "left": BinaryOp {
                      "left": Name {
                        "value": "slotState",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "PLAYER_SLOT_STATE_PLAYING",
                      },
                    },
                    "operator": "or",
                    "right": BinaryOp {
                      "left": Name {
                        "value": "slotState",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "PLAYER_SLOT_STATE_LEFT",
                      },
                    },
                  },
                ],
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTournamentFinishNowRuleA",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "multiplier",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "array": true,
            "name": Name {
              "value": "playerScore",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "array": true,
            "name": Name {
              "value": "teamScore",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "array": true,
            "name": Name {
              "value": "teamForce",
            },
            "type": Name {
              "value": "force",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "teamCount",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "index2",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer2",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "bestTeam",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "bestScore",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "draw",
            },
            "type": "boolean",
          },
          EmptyLine {},
          Comment {
            "value": " Compute individual player scores",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                IfThenElse {
                  "condition": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "indexPlayer",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "MeleeWasUserPlayer",
                    },
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          JASSSet {
                            "name": Name {
                              "value": "playerScore",
                            },
                            "prop": Name {
                              "value": "index",
                            },
                            "value": 0,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "playerScore",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetTournamentScore",
                          },
                        },
                      },
                      IfThenElse {
                        "condition": BinaryOp {
                          "left": ArrayRef {
                            "name": Name {
                              "value": "playerScore",
                            },
                            "prop": Name {
                              "value": "index",
                            },
                          },
                          "operator": "<=",
                          "right": 0,
                        },
                        "then": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "playerScore",
                              },
                              "prop": Name {
                                "value": "index",
                              },
                              "value": 1,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Compute team scores and team forces",
          },
          JASSSet {
            "name": Name {
              "value": "teamCount",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                IfThenElse {
                  "condition": BinaryOp {
                    "left": ArrayRef {
                      "name": Name {
                        "value": "playerScore",
                      },
                      "prop": Name {
                        "value": "index",
                      },
                    },
                    "operator": "!=",
                    "right": 0,
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "indexPlayer",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "index",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "Player",
                          },
                        },
                      },
                      EmptyLine {},
                      JASSSet {
                        "name": Name {
                          "value": "teamScore",
                        },
                        "prop": Name {
                          "value": "teamCount",
                        },
                        "value": 0,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "teamForce",
                        },
                        "prop": Name {
                          "value": "teamCount",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateForce",
                          },
                        },
                      },
                      EmptyLine {},
                      JASSSet {
                        "name": Name {
                          "value": "index2",
                        },
                        "value": Name {
                          "value": "index",
                        },
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            IfThenElse {
                              "condition": BinaryOp {
                                "left": ArrayRef {
                                  "name": Name {
                                    "value": "playerScore",
                                  },
                                  "prop": Name {
                                    "value": "index2",
                                  },
                                },
                                "operator": "!=",
                                "right": 0,
                              },
                              "then": Statements {
                                "body": Array [
                                  JASSSet {
                                    "name": Name {
                                      "value": "indexPlayer2",
                                    },
                                    "value": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "index2",
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "Player",
                                      },
                                    },
                                  },
                                  EmptyLine {},
                                  IfThenElse {
                                    "condition": Call {
                                      "args": Args {
                                        "body": Array [
                                          Name {
                                            "value": "indexPlayer",
                                          },
                                          Name {
                                            "value": "indexPlayer2",
                                          },
                                        ],
                                      },
                                      "name": Name {
                                        "value": "PlayersAreCoAllied",
                                      },
                                    },
                                    "then": Statements {
                                      "body": Array [
                                        JASSSet {
                                          "name": Name {
                                            "value": "teamScore",
                                          },
                                          "prop": Name {
                                            "value": "teamCount",
                                          },
                                          "value": BinaryOp {
                                            "left": ArrayRef {
                                              "name": Name {
                                                "value": "teamScore",
                                              },
                                              "prop": Name {
                                                "value": "teamCount",
                                              },
                                            },
                                            "operator": "+",
                                            "right": ArrayRef {
                                              "name": Name {
                                                "value": "playerScore",
                                              },
                                              "prop": Name {
                                                "value": "index2",
                                              },
                                            },
                                          },
                                        },
                                        Call {
                                          "args": Args {
                                            "body": Array [
                                              ArrayRef {
                                                "name": Name {
                                                  "value": "teamForce",
                                                },
                                                "prop": Name {
                                                  "value": "teamCount",
                                                },
                                              },
                                              Name {
                                                "value": "indexPlayer2",
                                              },
                                            ],
                                          },
                                          "name": Name {
                                            "value": "ForceAddPlayer",
                                          },
                                          "statement": true,
                                        },
                                        JASSSet {
                                          "name": Name {
                                            "value": "playerScore",
                                          },
                                          "prop": Name {
                                            "value": "index2",
                                          },
                                          "value": 0,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                            EmptyLine {},
                            JASSSet {
                              "name": Name {
                                "value": "index2",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "index2",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "index2",
                                  },
                                  "operator": "==",
                                  "right": Name {
                                    "value": "bj_MAX_PLAYERS",
                                  },
                                },
                              ],
                            },
                          ],
                        },
                      },
                      EmptyLine {},
                      JASSSet {
                        "name": Name {
                          "value": "teamCount",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "teamCount",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " The game is now over",
          },
          JASSSet {
            "name": Name {
              "value": "bj_meleeGameOver",
            },
            "value": true,
          },
          EmptyLine {},
          Comment {
            "value": " There should always be at least one team, but continue to work if not",
          },
          IfThenElse {
            "condition": BinaryOp {
              "left": Name {
                "value": "teamCount",
              },
              "operator": "!=",
              "right": 0,
            },
            "then": Statements {
              "body": Array [
                EmptyLine {},
                Comment {
                  "value": " Find best team score",
                },
                JASSSet {
                  "name": Name {
                    "value": "bestTeam",
                  },
                  "value": UnaryOp {
                    "expr": 1,
                    "operator": "-",
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "bestScore",
                  },
                  "value": UnaryOp {
                    "expr": 1,
                    "operator": "-",
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": 0,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      IfThenElse {
                        "condition": BinaryOp {
                          "left": ArrayRef {
                            "name": Name {
                              "value": "teamScore",
                            },
                            "prop": Name {
                              "value": "index",
                            },
                          },
                          "operator": ">",
                          "right": Name {
                            "value": "bestScore",
                          },
                        },
                        "then": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "bestTeam",
                              },
                              "value": Name {
                                "value": "index",
                              },
                            },
                            JASSSet {
                              "name": Name {
                                "value": "bestScore",
                              },
                              "value": ArrayRef {
                                "name": Name {
                                  "value": "teamScore",
                                },
                                "prop": Name {
                                  "value": "index",
                                },
                              },
                            },
                          ],
                        },
                      },
                      EmptyLine {},
                      JASSSet {
                        "name": Name {
                          "value": "index",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "index",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "index",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "teamCount",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Check whether the best team's score is 'multiplier' times better than",
                },
                Comment {
                  "value": " every other team. In the case of multiplier == 1 and exactly equal team",
                },
                Comment {
                  "value": " scores, the first team (which was randomly chosen by the server) will win.",
                },
                JASSSet {
                  "name": Name {
                    "value": "draw",
                  },
                  "value": false,
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": 0,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      IfThenElse {
                        "condition": BinaryOp {
                          "left": Name {
                            "value": "index",
                          },
                          "operator": "!=",
                          "right": Name {
                            "value": "bestTeam",
                          },
                        },
                        "then": Statements {
                          "body": Array [
                            IfThenElse {
                              "condition": BinaryOp {
                                "left": Name {
                                  "value": "bestScore",
                                },
                                "operator": "<",
                                "right": Parens {
                                  "data": Array [
                                    BinaryOp {
                                      "left": Name {
                                        "value": "multiplier",
                                      },
                                      "operator": "*",
                                      "right": ArrayRef {
                                        "name": Name {
                                          "value": "teamScore",
                                        },
                                        "prop": Name {
                                          "value": "index",
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                              "then": Statements {
                                "body": Array [
                                  JASSSet {
                                    "name": Name {
                                      "value": "draw",
                                    },
                                    "value": true,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                      EmptyLine {},
                      JASSSet {
                        "name": Name {
                          "value": "index",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "index",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "index",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "teamCount",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Name {
                    "value": "draw",
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          Comment {
                            "value": " Give defeat to all players on teams other than the best team",
                          },
                          JASSSet {
                            "name": Name {
                              "value": "index",
                            },
                            "value": 0,
                          },
                          Loop {
                            "statements": Statements {
                              "body": Array [
                                IfThenElse {
                                  "condition": BinaryOp {
                                    "left": Name {
                                      "value": "index",
                                    },
                                    "operator": "!=",
                                    "right": Name {
                                      "value": "bestTeam",
                                    },
                                  },
                                  "then": Statements {
                                    "body": Array [
                                      Call {
                                        "args": Args {
                                          "body": Array [
                                            ArrayRef {
                                              "name": Name {
                                                "value": "teamForce",
                                              },
                                              "prop": Name {
                                                "value": "index",
                                              },
                                            },
                                            FuncRef {
                                              "data": Name {
                                                "value": "MeleeDoDefeatEnum",
                                              },
                                            },
                                          ],
                                        },
                                        "name": Name {
                                          "value": "ForForce",
                                        },
                                        "statement": true,
                                      },
                                    ],
                                  },
                                },
                                EmptyLine {},
                                JASSSet {
                                  "name": Name {
                                    "value": "index",
                                  },
                                  "value": BinaryOp {
                                    "left": Name {
                                      "value": "index",
                                    },
                                    "operator": "+",
                                    "right": 1,
                                  },
                                },
                                ExitWhen {
                                  "data": Array [
                                    BinaryOp {
                                      "left": Name {
                                        "value": "index",
                                      },
                                      "operator": "==",
                                      "right": Name {
                                        "value": "teamCount",
                                      },
                                    },
                                  ],
                                },
                              ],
                            },
                          },
                          EmptyLine {},
                          Comment {
                            "value": " Give victory to all players on the best team",
                          },
                          Call {
                            "args": Args {
                              "body": Array [
                                ArrayRef {
                                  "name": Name {
                                    "value": "teamForce",
                                  },
                                  "prop": Name {
                                    "value": "bestTeam",
                                  },
                                },
                                FuncRef {
                                  "data": Name {
                                    "value": "MeleeDoVictoryEnum",
                                  },
                                },
                              ],
                            },
                            "name": Name {
                              "value": "ForForce",
                            },
                            "statement": true,
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      Comment {
                        "value": " Give draw to all players on all teams",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "index",
                        },
                        "value": 0,
                      },
                      Loop {
                        "statements": Statements {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  ArrayRef {
                                    "name": Name {
                                      "value": "teamForce",
                                    },
                                    "prop": Name {
                                      "value": "index",
                                    },
                                  },
                                  FuncRef {
                                    "data": Name {
                                      "value": "MeleeDoDrawEnum",
                                    },
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "ForForce",
                              },
                              "statement": true,
                            },
                            EmptyLine {},
                            JASSSet {
                              "name": Name {
                                "value": "index",
                              },
                              "value": BinaryOp {
                                "left": Name {
                                  "value": "index",
                                },
                                "operator": "+",
                                "right": 1,
                              },
                            },
                            ExitWhen {
                              "data": Array [
                                BinaryOp {
                                  "left": Name {
                                    "value": "index",
                                  },
                                  "operator": "==",
                                  "right": Name {
                                    "value": "teamCount",
                                  },
                                },
                              ],
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          EmptyLine {},
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeTriggerTournamentFinishNow",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "rule",
            },
            "type": "integer",
            "value": Call {
              "name": Name {
                "value": "GetTournamentFinishNowRule",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " If the game is already over, do nothing",
          },
          IfThenElse {
            "condition": Name {
              "value": "bj_meleeGameOver",
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "rule",
                  },
                  "operator": "==",
                  "right": 1,
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Preliminary games",
                    },
                    Call {
                      "args": Args {
                        "body": Array [
                          3,
                        ],
                      },
                      "name": Name {
                        "value": "MeleeTournamentFinishNowRuleA",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Comment {
                  "value": " Finals games",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      1,
                    ],
                  },
                  "name": Name {
                    "value": "MeleeTournamentFinishNowRuleA",
                  },
                  "statement": true,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Since the game is over we should remove all observers",
          },
          Call {
            "name": Name {
              "value": "MeleeRemoveObservers",
            },
            "statement": true,
          },
          EmptyLine {},
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeInitVictoryDefeat",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "trig",
            },
            "type": Name {
              "value": "trigger",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Create a timer window for the \\"finish soon\\" timeout period, it has no timer",
          },
          Comment {
            "value": " because it is driven by real time (outside of the game state to avoid desyncs)",
          },
          JASSSet {
            "name": Name {
              "value": "bj_finishSoonTimerDialog",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  null,
                ],
              },
              "name": Name {
                "value": "CreateTimerDialog",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Set a trigger to fire when we receive a \\"finish soon\\" game event",
          },
          JASSSet {
            "name": Name {
              "value": "trig",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                Name {
                  "value": "EVENT_GAME_TOURNAMENT_FINISH_SOON",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterGameEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                FuncRef {
                  "data": Name {
                    "value": "MeleeTriggerTournamentFinishSoon",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Set a trigger to fire when we receive a \\"finish now\\" game event",
          },
          JASSSet {
            "name": Name {
              "value": "trig",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                Name {
                  "value": "EVENT_GAME_TOURNAMENT_FINISH_NOW",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterGameEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "trig",
                },
                FuncRef {
                  "data": Name {
                    "value": "MeleeTriggerTournamentFinishNow",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Set up each player's mortality code.",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "indexPlayer",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "index",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "Player",
                    },
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Make sure this player slot is playing.",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "indexPlayer",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerSlotState",
                          },
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "PLAYER_SLOT_STATE_PLAYING",
                        },
                      },
                    ],
                  },
                  "elses": Array [
                    Else {
                      "statements": Statements {
                        "body": Array [
                          JASSSet {
                            "name": Name {
                              "value": "bj_meleeDefeated",
                            },
                            "prop": Name {
                              "value": "index",
                            },
                            "value": true,
                          },
                          JASSSet {
                            "name": Name {
                              "value": "bj_meleeVictoried",
                            },
                            "prop": Name {
                              "value": "index",
                            },
                            "value": false,
                          },
                          EmptyLine {},
                          Comment {
                            "value": " Handle leave events for observers",
                          },
                          IfThenElse {
                            "condition": Parens {
                              "data": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "indexPlayer",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "IsPlayerObserver",
                                  },
                                },
                              ],
                            },
                            "then": Statements {
                              "body": Array [
                                Comment {
                                  "value": " Set a trigger to fire whenever this player leaves",
                                },
                                JASSSet {
                                  "name": Name {
                                    "value": "trig",
                                  },
                                  "value": Call {
                                    "name": Name {
                                      "value": "CreateTrigger",
                                    },
                                  },
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "trig",
                                      },
                                      Name {
                                        "value": "indexPlayer",
                                      },
                                      Name {
                                        "value": "EVENT_PLAYER_LEAVE",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "TriggerRegisterPlayerEvent",
                                  },
                                  "statement": true,
                                },
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "trig",
                                      },
                                      FuncRef {
                                        "data": Name {
                                          "value": "MeleeTriggerActionPlayerLeft",
                                        },
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "TriggerAddAction",
                                  },
                                  "statement": true,
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "bj_meleeDefeated",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": false,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_meleeVictoried",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": false,
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Create a timer and timer window in case the player is crippled.",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_playerIsCrippled",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": false,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_playerIsExposed",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": false,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_crippledTimer",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateTimer",
                          },
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_crippledTimerWindows",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              ArrayRef {
                                "name": Name {
                                  "value": "bj_crippledTimer",
                                },
                                "prop": Name {
                                  "value": "index",
                                },
                              },
                            ],
                          },
                          "name": Name {
                            "value": "CreateTimerDialog",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            ArrayRef {
                              "name": Name {
                                "value": "bj_crippledTimerWindows",
                              },
                              "prop": Name {
                                "value": "index",
                              },
                            },
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "indexPlayer",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "MeleeGetCrippledTimerMessage",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TimerDialogSetTitle",
                        },
                        "statement": true,
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Set a trigger to fire whenever a building is cancelled for this player.",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "trig",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateTrigger",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL",
                            },
                            null,
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerUnitEvent",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            FuncRef {
                              "data": Name {
                                "value": "MeleeTriggerActionConstructCancel",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerAddAction",
                        },
                        "statement": true,
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Set a trigger to fire whenever a unit dies for this player.",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "trig",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateTrigger",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "EVENT_PLAYER_UNIT_DEATH",
                            },
                            null,
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerUnitEvent",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            FuncRef {
                              "data": Name {
                                "value": "MeleeTriggerActionUnitDeath",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerAddAction",
                        },
                        "statement": true,
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Set a trigger to fire whenever a unit begins construction for this player",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "trig",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateTrigger",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "EVENT_PLAYER_UNIT_CONSTRUCT_START",
                            },
                            null,
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerUnitEvent",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            FuncRef {
                              "data": Name {
                                "value": "MeleeTriggerActionUnitConstructionStart",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerAddAction",
                        },
                        "statement": true,
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Set a trigger to fire whenever this player defeats-out",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "trig",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateTrigger",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "EVENT_PLAYER_DEFEAT",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerEvent",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            FuncRef {
                              "data": Name {
                                "value": "MeleeTriggerActionPlayerDefeated",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerAddAction",
                        },
                        "statement": true,
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Set a trigger to fire whenever this player leaves",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "trig",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateTrigger",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "EVENT_PLAYER_LEAVE",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerEvent",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            FuncRef {
                              "data": Name {
                                "value": "MeleeTriggerActionPlayerLeft",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerAddAction",
                        },
                        "statement": true,
                      },
                      EmptyLine {},
                      Comment {
                        "value": " Set a trigger to fire whenever this player changes his/her alliances.",
                      },
                      JASSSet {
                        "name": Name {
                          "value": "trig",
                        },
                        "value": Call {
                          "name": Name {
                            "value": "CreateTrigger",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "ALLIANCE_PASSIVE",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerAllianceChange",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "PLAYER_STATE_ALLIED_VICTORY",
                            },
                            Name {
                              "value": "EQUAL",
                            },
                            1,
                          ],
                        },
                        "name": Name {
                          "value": "TriggerRegisterPlayerStateEvent",
                        },
                        "statement": true,
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "trig",
                            },
                            FuncRef {
                              "data": Name {
                                "value": "MeleeTriggerActionAllianceChange",
                              },
                            },
                          ],
                        },
                        "name": Name {
                          "value": "TriggerAddAction",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Test for victory / defeat at startup, in case the user has already won / lost.",
          },
          Comment {
            "value": " Allow for a short time to pass first, so that the map can finish loading.",
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "CreateTimer",
                  },
                },
                2,
                false,
                FuncRef {
                  "data": Name {
                    "value": "MeleeTriggerActionAllianceChange",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Player Slot Availability",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "CheckInitPlayerSlotAvailability",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                UnaryOp {
                  "expr": Name {
                    "value": "bj_slotControlReady",
                  },
                  "operator": "not",
                },
              ],
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": 0,
                },
                Loop {
                  "statements": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "bj_slotControlUsed",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": false,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "bj_slotControl",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                        "value": Name {
                          "value": "MAP_CONTROL_USER",
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "index",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "index",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      ExitWhen {
                        "data": Array [
                          BinaryOp {
                            "left": Name {
                              "value": "index",
                            },
                            "operator": "==",
                            "right": Name {
                              "value": "bj_MAX_PLAYERS",
                            },
                          },
                        ],
                      },
                    ],
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_slotControlReady",
                  },
                  "value": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetPlayerSlotAvailable",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Param {
            "name": Name {
              "value": "control",
            },
            "type": Name {
              "value": "mapcontrol",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "playerIndex",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichPlayer",
                  },
                ],
              },
              "name": Name {
                "value": "GetPlayerId",
              },
            },
          },
          EmptyLine {},
          Call {
            "name": Name {
              "value": "CheckInitPlayerSlotAvailability",
            },
            "statement": true,
          },
          JASSSet {
            "name": Name {
              "value": "bj_slotControlUsed",
            },
            "prop": Name {
              "value": "playerIndex",
            },
            "value": true,
          },
          JASSSet {
            "name": Name {
              "value": "bj_slotControl",
            },
            "prop": Name {
              "value": "playerIndex",
            },
            "value": Name {
              "value": "control",
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Generic Template Player-slot Initialization",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "TeamInitPlayerSlots",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "teamCount",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "indexPlayer",
            },
            "type": Name {
              "value": "player",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "team",
            },
            "type": "integer",
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "teamCount",
                },
              ],
            },
            "name": Name {
              "value": "SetTeams",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "name": Name {
              "value": "CheckInitPlayerSlotAvailability",
            },
            "statement": true,
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "team",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      ArrayRef {
                        "name": Name {
                          "value": "bj_slotControlUsed",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "indexPlayer",
                        },
                        "value": Call {
                          "args": Args {
                            "body": Array [
                              Name {
                                "value": "index",
                              },
                            ],
                          },
                          "name": Name {
                            "value": "Player",
                          },
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "indexPlayer",
                            },
                            Name {
                              "value": "team",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerTeam",
                        },
                        "statement": true,
                      },
                      JASSSet {
                        "name": Name {
                          "value": "team",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "team",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Name {
                                "value": "team",
                              },
                              "operator": ">=",
                              "right": Name {
                                "value": "teamCount",
                              },
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "team",
                              },
                              "value": 0,
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MeleeInitPlayerSlots",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_MAX_PLAYERS",
                },
              ],
            },
            "name": Name {
              "value": "TeamInitPlayerSlots",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "FFAInitPlayerSlots",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_MAX_PLAYERS",
                },
              ],
            },
            "name": Name {
              "value": "TeamInitPlayerSlots",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "OneOnOneInitPlayerSlots",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Limit the game to 2 players.",
          },
          Call {
            "args": Args {
              "body": Array [
                2,
              ],
            },
            "name": Name {
              "value": "SetTeams",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                2,
              ],
            },
            "name": Name {
              "value": "SetPlayers",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                2,
              ],
            },
            "name": Name {
              "value": "TeamInitPlayerSlots",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitGenericPlayerSlots",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "gType",
            },
            "type": Name {
              "value": "gametype",
            },
            "value": Call {
              "name": Name {
                "value": "GetGameTypeSelected",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "gType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "GAME_TYPE_MELEE",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "gType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "GAME_TYPE_FFA",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "name": Name {
                        "value": "FFAInitPlayerSlots",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "gType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "GAME_TYPE_USE_MAP_SETTINGS",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Do nothing; the map-specific script handles this.",
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "gType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "GAME_TYPE_ONE_ON_ONE",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "name": Name {
                        "value": "OneOnOneInitPlayerSlots",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "gType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "GAME_TYPE_TWO_TEAM_PLAY",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          2,
                        ],
                      },
                      "name": Name {
                        "value": "TeamInitPlayerSlots",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "gType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "GAME_TYPE_THREE_TEAM_PLAY",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          3,
                        ],
                      },
                      "name": Name {
                        "value": "TeamInitPlayerSlots",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "gType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "GAME_TYPE_FOUR_TEAM_PLAY",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          4,
                        ],
                      },
                      "name": Name {
                        "value": "TeamInitPlayerSlots",
                      },
                      "statement": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Unrecognized Game Type",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "MeleeInitPlayerSlots",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Blizzard.j Initialization",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDNCSoundsDawn",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "bj_useDawnDuskSounds",
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_dawnSound",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDNCSoundsDusk",
      },
      "statements": Statements {
        "body": Array [
          IfThenElse {
            "condition": Name {
              "value": "bj_useDawnDuskSounds",
            },
            "then": Statements {
              "body": Array [
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_duskSound",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDNCSoundsDay",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "ToD",
            },
            "type": "real",
            "value": Call {
              "name": Name {
                "value": "GetTimeOfDay",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": BinaryOp {
                      "left": Name {
                        "value": "ToD",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_TOD_DAWN",
                      },
                    },
                    "operator": "and",
                    "right": BinaryOp {
                      "left": Name {
                        "value": "ToD",
                      },
                      "operator": "<",
                      "right": Name {
                        "value": "bj_TOD_DUSK",
                      },
                    },
                  },
                ],
              },
              "operator": "and",
              "right": UnaryOp {
                "expr": Name {
                  "value": "bj_dncIsDaytime",
                },
                "operator": "not",
              },
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_dncIsDaytime",
                  },
                  "value": true,
                },
                EmptyLine {},
                Comment {
                  "value": " change ambient sounds",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_nightAmbientSound",
                      },
                      false,
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "StopSound",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_dayAmbientSound",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "SetDNCSoundsNight",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "ToD",
            },
            "type": "real",
            "value": Call {
              "name": Name {
                "value": "GetTimeOfDay",
              },
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": BinaryOp {
              "left": Parens {
                "data": Array [
                  BinaryOp {
                    "left": BinaryOp {
                      "left": Name {
                        "value": "ToD",
                      },
                      "operator": "<",
                      "right": Name {
                        "value": "bj_TOD_DAWN",
                      },
                    },
                    "operator": "or",
                    "right": BinaryOp {
                      "left": Name {
                        "value": "ToD",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_TOD_DUSK",
                      },
                    },
                  },
                ],
              },
              "operator": "and",
              "right": Name {
                "value": "bj_dncIsDaytime",
              },
            },
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_dncIsDaytime",
                  },
                  "value": false,
                },
                EmptyLine {},
                Comment {
                  "value": " change ambient sounds",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_dayAmbientSound",
                      },
                      false,
                      true,
                    ],
                  },
                  "name": Name {
                    "value": "StopSound",
                  },
                  "statement": true,
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "bj_nightAmbientSound",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "StartSound",
                  },
                  "statement": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitDNCSounds",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Create sounds to be played at dawn and dusk.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_dawnSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "RoosterSound",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_duskSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "WolfSound",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Set up triggers to respond to dawn and dusk.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_dncSoundsDawn",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsDawn",
                },
                Name {
                  "value": "GAME_STATE_TIME_OF_DAY",
                },
                Name {
                  "value": "EQUAL",
                },
                Name {
                  "value": "bj_TOD_DAWN",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterGameStateEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsDawn",
                },
                FuncRef {
                  "data": Name {
                    "value": "SetDNCSoundsDawn",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_dncSoundsDusk",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsDusk",
                },
                Name {
                  "value": "GAME_STATE_TIME_OF_DAY",
                },
                Name {
                  "value": "EQUAL",
                },
                Name {
                  "value": "bj_TOD_DUSK",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterGameStateEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsDusk",
                },
                FuncRef {
                  "data": Name {
                    "value": "SetDNCSoundsDusk",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Set up triggers to respond to changes from day to night or vice-versa.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_dncSoundsDay",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsDay",
                },
                Name {
                  "value": "GAME_STATE_TIME_OF_DAY",
                },
                Name {
                  "value": "GREATER_THAN_OR_EQUAL",
                },
                Name {
                  "value": "bj_TOD_DAWN",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterGameStateEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsDay",
                },
                Name {
                  "value": "GAME_STATE_TIME_OF_DAY",
                },
                Name {
                  "value": "LESS_THAN",
                },
                Name {
                  "value": "bj_TOD_DUSK",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterGameStateEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsDay",
                },
                FuncRef {
                  "data": Name {
                    "value": "SetDNCSoundsDay",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_dncSoundsNight",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsNight",
                },
                Name {
                  "value": "GAME_STATE_TIME_OF_DAY",
                },
                Name {
                  "value": "LESS_THAN",
                },
                Name {
                  "value": "bj_TOD_DAWN",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterGameStateEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsNight",
                },
                Name {
                  "value": "GAME_STATE_TIME_OF_DAY",
                },
                Name {
                  "value": "GREATER_THAN_OR_EQUAL",
                },
                Name {
                  "value": "bj_TOD_DUSK",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterGameStateEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_dncSoundsNight",
                },
                FuncRef {
                  "data": Name {
                    "value": "SetDNCSoundsNight",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitBlizzardGlobals",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "userControlledPlayers",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "v",
            },
            "type": Name {
              "value": "version",
            },
          },
          EmptyLine {},
          Comment {
            "value": " Init filter function vars",
          },
          JASSSet {
            "name": Name {
              "value": "filterIssueHauntOrderAtLocBJ",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  FuncRef {
                    "data": Name {
                      "value": "IssueHauntOrderAtLocBJFilter",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Filter",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "filterEnumDestructablesInCircleBJ",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  FuncRef {
                    "data": Name {
                      "value": "EnumDestructablesInCircleBJFilter",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Filter",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "filterGetUnitsInRectOfPlayer",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  FuncRef {
                    "data": Name {
                      "value": "GetUnitsInRectOfPlayerFilter",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Filter",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "filterGetUnitsOfTypeIdAll",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  FuncRef {
                    "data": Name {
                      "value": "GetUnitsOfTypeIdAllFilter",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Filter",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "filterGetUnitsOfPlayerAndTypeId",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  FuncRef {
                    "data": Name {
                      "value": "GetUnitsOfPlayerAndTypeIdFilter",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Filter",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "filterMeleeTrainedUnitIsHeroBJ",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  FuncRef {
                    "data": Name {
                      "value": "MeleeTrainedUnitIsHeroBJFilter",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Filter",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "filterLivingPlayerUnitsOfTypeId",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  FuncRef {
                    "data": Name {
                      "value": "LivingPlayerUnitsOfTypeIdFilter",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Filter",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Init force presets",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYER_SLOTS",
                      },
                    },
                  ],
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_FORCE_PLAYER",
                  },
                  "prop": Name {
                    "value": "index",
                  },
                  "value": Call {
                    "name": Name {
                      "value": "CreateForce",
                    },
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      ArrayRef {
                        "name": Name {
                          "value": "bj_FORCE_PLAYER",
                        },
                        "prop": Name {
                          "value": "index",
                        },
                      },
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "ForceAddPlayer",
                  },
                  "statement": true,
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_FORCE_ALL_PLAYERS",
            },
            "value": Call {
              "name": Name {
                "value": "CreateForce",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_FORCE_ALL_PLAYERS",
                },
                null,
              ],
            },
            "name": Name {
              "value": "ForceEnumPlayers",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Init Cinematic Mode history",
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineModePriorSpeed",
            },
            "value": Call {
              "name": Name {
                "value": "GetGameSpeed",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineModePriorFogSetting",
            },
            "value": Call {
              "name": Name {
                "value": "IsFogEnabled",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_cineModePriorMaskSetting",
            },
            "value": Call {
              "name": Name {
                "value": "IsFogMaskEnabled",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Init Trigger Queue",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_MAX_QUEUED_TRIGGERS",
                      },
                    },
                  ],
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_queuedExecTriggers",
                  },
                  "prop": Name {
                    "value": "index",
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_queuedExecUseConds",
                  },
                  "prop": Name {
                    "value": "index",
                  },
                  "value": false,
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Init singleplayer check",
          },
          JASSSet {
            "name": Name {
              "value": "bj_isSinglePlayer",
            },
            "value": false,
          },
          JASSSet {
            "name": Name {
              "value": "userControlledPlayers",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": ">=",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "index",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "Player",
                                  },
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetPlayerController",
                            },
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "MAP_CONTROL_USER",
                          },
                        },
                        "operator": "and",
                        "right": BinaryOp {
                          "left": Call {
                            "args": Args {
                              "body": Array [
                                Call {
                                  "args": Args {
                                    "body": Array [
                                      Name {
                                        "value": "index",
                                      },
                                    ],
                                  },
                                  "name": Name {
                                    "value": "Player",
                                  },
                                },
                              ],
                            },
                            "name": Name {
                              "value": "GetPlayerSlotState",
                            },
                          },
                          "operator": "==",
                          "right": Name {
                            "value": "PLAYER_SLOT_STATE_PLAYING",
                          },
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "userControlledPlayers",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "userControlledPlayers",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                    ],
                  },
                },
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
              ],
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_isSinglePlayer",
            },
            "value": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "userControlledPlayers",
                  },
                  "operator": "==",
                  "right": 1,
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Init sounds",
          },
          Comment {
            "value": "set bj_pingMinimapSound = CreateSoundFromLabel(\\"AutoCastButtonClick\\", false, false, false, 10000, 10000)",
          },
          JASSSet {
            "name": Name {
              "value": "bj_rescueSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "Rescue",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_questDiscoveredSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "QuestNew",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_questUpdatedSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "QuestUpdate",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_questCompletedSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "QuestCompleted",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_questFailedSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "QuestFailed",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_questHintSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "Hint",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_questSecretSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "SecretFound",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_questItemAcquiredSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "ItemReward",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_questWarningSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "Warning",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_victoryDialogSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "QuestCompleted",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_defeatDialogSound",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  "QuestFailed",
                  false,
                  false,
                  false,
                  10000,
                  10000,
                ],
              },
              "name": Name {
                "value": "CreateSoundFromLabel",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Init corpse creation triggers.",
          },
          Call {
            "name": Name {
              "value": "DelayedSuspendDecayCreate",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Init version-specific data",
          },
          JASSSet {
            "name": Name {
              "value": "v",
            },
            "value": Call {
              "name": Name {
                "value": "VersionGet",
              },
            },
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "v",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "VERSION_REIGN_OF_CHAOS",
                  },
                },
              ],
            },
            "elses": Array [
              Else {
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "bj_MELEE_MAX_TWINKED_HEROES",
                      },
                      "value": Name {
                        "value": "bj_MELEE_MAX_TWINKED_HEROES_V1",
                      },
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_MELEE_MAX_TWINKED_HEROES",
                  },
                  "value": Name {
                    "value": "bj_MELEE_MAX_TWINKED_HEROES_V0",
                  },
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitQueuedTriggers",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_queuedExecTimeout",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_queuedExecTimeout",
                },
                Name {
                  "value": "bj_queuedExecTimeoutTimer",
                },
              ],
            },
            "name": Name {
              "value": "TriggerRegisterTimerExpireEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_queuedExecTimeout",
                },
                FuncRef {
                  "data": Name {
                    "value": "QueuedTriggerDoneBJ",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitMapRects",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_mapInitialPlayableArea",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  BinaryOp {
                    "left": Call {
                      "name": Name {
                        "value": "GetCameraBoundMinX",
                      },
                    },
                    "operator": "-",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "CAMERA_MARGIN_LEFT",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetCameraMargin",
                      },
                    },
                  },
                  BinaryOp {
                    "left": Call {
                      "name": Name {
                        "value": "GetCameraBoundMinY",
                      },
                    },
                    "operator": "-",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "CAMERA_MARGIN_BOTTOM",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetCameraMargin",
                      },
                    },
                  },
                  BinaryOp {
                    "left": Call {
                      "name": Name {
                        "value": "GetCameraBoundMaxX",
                      },
                    },
                    "operator": "+",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "CAMERA_MARGIN_RIGHT",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetCameraMargin",
                      },
                    },
                  },
                  BinaryOp {
                    "left": Call {
                      "name": Name {
                        "value": "GetCameraBoundMaxY",
                      },
                    },
                    "operator": "+",
                    "right": Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "CAMERA_MARGIN_TOP",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "GetCameraMargin",
                      },
                    },
                  },
                ],
              },
              "name": Name {
                "value": "Rect",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_mapInitialCameraBounds",
            },
            "value": Call {
              "name": Name {
                "value": "GetCurrentCameraBoundsMapRectBJ",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitSummonableCaps",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                Comment {
                  "value": " upgraded units",
                },
                Comment {
                  "value": " Note: Only do this if the corresponding upgrade is not yet researched",
                },
                Comment {
                  "value": " Barrage - Siege Engines",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "index",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "Player",
                                },
                              },
                              FourCC {
                                "value": "Rhrt",
                              },
                              true,
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerTechResearched",
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "index",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "Player",
                              },
                            },
                            FourCC {
                              "value": "hrtt",
                            },
                            0,
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerTechMaxAllowed",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " Berserker Upgrade - Troll Berserkers",
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      UnaryOp {
                        "expr": Call {
                          "args": Args {
                            "body": Array [
                              Call {
                                "args": Args {
                                  "body": Array [
                                    Name {
                                      "value": "index",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "Player",
                                },
                              },
                              FourCC {
                                "value": "Robk",
                              },
                              true,
                            ],
                          },
                          "name": Name {
                            "value": "GetPlayerTechResearched",
                          },
                        },
                        "operator": "not",
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Call {
                              "args": Args {
                                "body": Array [
                                  Name {
                                    "value": "index",
                                  },
                                ],
                              },
                              "name": Name {
                                "value": "Player",
                              },
                            },
                            FourCC {
                              "value": "otbk",
                            },
                            0,
                          ],
                        },
                        "name": Name {
                          "value": "SetPlayerTechMaxAllowed",
                        },
                        "statement": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                Comment {
                  "value": " max skeletons per player",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "args": Args {
                          "body": Array [
                            Name {
                              "value": "index",
                            },
                          ],
                        },
                        "name": Name {
                          "value": "Player",
                        },
                      },
                      FourCC {
                        "value": "uske",
                      },
                      Name {
                        "value": "bj_MAX_SKELETONS",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "SetPlayerTechMaxAllowed",
                  },
                  "statement": true,
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_MAX_PLAYERS",
                      },
                    },
                  ],
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Update the per-class stock limits.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UpdateStockAvailability",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "iType",
            },
            "type": Name {
              "value": "itemtype",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichItem",
                  },
                ],
              },
              "name": Name {
                "value": "GetItemType",
              },
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "iLevel",
            },
            "type": "integer",
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichItem",
                  },
                ],
              },
              "name": Name {
                "value": "GetItemLevel",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Update allowed type/level combinations.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "iType",
                  },
                  "operator": "==",
                  "right": Name {
                    "value": "ITEM_TYPE_PERMANENT",
                  },
                },
              ],
            },
            "elses": Array [
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "iType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "ITEM_TYPE_CHARGED",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "bj_stockAllowedCharged",
                      },
                      "prop": Name {
                        "value": "iLevel",
                      },
                      "value": true,
                    },
                  ],
                },
              },
              ElseIf {
                "condition": Parens {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "iType",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "ITEM_TYPE_ARTIFACT",
                      },
                    },
                  ],
                },
                "statements": Statements {
                  "body": Array [
                    JASSSet {
                      "name": Name {
                        "value": "bj_stockAllowedArtifact",
                      },
                      "prop": Name {
                        "value": "iLevel",
                      },
                      "value": true,
                    },
                  ],
                },
              },
              Else {
                "statements": Statements {
                  "body": Array [
                    Comment {
                      "value": " Not interested in this item type - ignore the item.",
                    },
                  ],
                },
              },
            ],
            "then": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_stockAllowedPermanent",
                  },
                  "prop": Name {
                    "value": "iLevel",
                  },
                  "value": true,
                },
              ],
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Find a sellable item of the given type and level, and then add it.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UpdateEachStockBuildingEnum",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "iteration",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "pickedItemId",
            },
            "type": "integer",
          },
          EmptyLine {},
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "pickedItemId",
                  },
                  "value": Call {
                    "args": Args {
                      "body": Array [
                        Name {
                          "value": "bj_stockPickedItemType",
                        },
                        Name {
                          "value": "bj_stockPickedItemLevel",
                        },
                      ],
                    },
                    "name": Name {
                      "value": "ChooseRandomItemEx",
                    },
                  },
                },
                ExitWhen {
                  "data": Array [
                    Call {
                      "args": Args {
                        "body": Array [
                          Name {
                            "value": "pickedItemId",
                          },
                        ],
                      },
                      "name": Name {
                        "value": "IsItemIdSellable",
                      },
                    },
                  ],
                },
                EmptyLine {},
                Comment {
                  "value": " If we get hung up on an entire class/level combo of unsellable",
                },
                Comment {
                  "value": " items, or a very unlucky series of random numbers, give up.",
                },
                JASSSet {
                  "name": Name {
                    "value": "iteration",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "iteration",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "iteration",
                        },
                        "operator": ">",
                        "right": Name {
                          "value": "bj_STOCK_MAX_ITERATIONS",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      Return {
                        "data": Array [
                          undefined,
                        ],
                      },
                    ],
                  },
                },
              ],
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetEnumUnit",
                  },
                },
                Name {
                  "value": "pickedItemId",
                },
                1,
                1,
              ],
            },
            "name": Name {
              "value": "AddItemToStock",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UpdateEachStockBuilding",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "iType",
            },
            "type": Name {
              "value": "itemtype",
            },
          },
          Param {
            "name": Name {
              "value": "iLevel",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "g",
            },
            "type": Name {
              "value": "group",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "bj_stockPickedItemType",
            },
            "value": Name {
              "value": "iType",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_stockPickedItemLevel",
            },
            "value": Name {
              "value": "iLevel",
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "g",
            },
            "value": Call {
              "name": Name {
                "value": "CreateGroup",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                "marketplace",
                null,
              ],
            },
            "name": Name {
              "value": "GroupEnumUnitsOfType",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
                FuncRef {
                  "data": Name {
                    "value": "UpdateEachStockBuildingEnum",
                  },
                },
              ],
            },
            "name": Name {
              "value": "ForGroup",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "g",
                },
              ],
            },
            "name": Name {
              "value": "DestroyGroup",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Update stock inventory.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "PerformStockUpdates",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "pickedItemId",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "pickedItemType",
            },
            "type": Name {
              "value": "itemtype",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "pickedItemLevel",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "allowedCombinations",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "iLevel",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " Give each type/level combination a chance of being picked.",
          },
          JASSSet {
            "name": Name {
              "value": "iLevel",
            },
            "value": 1,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      ArrayRef {
                        "name": Name {
                          "value": "bj_stockAllowedPermanent",
                        },
                        "prop": Name {
                          "value": "iLevel",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "allowedCombinations",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "allowedCombinations",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Call {
                                "args": Args {
                                  "body": Array [
                                    1,
                                    Name {
                                      "value": "allowedCombinations",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetRandomInt",
                                },
                              },
                              "operator": "==",
                              "right": 1,
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "pickedItemType",
                              },
                              "value": Name {
                                "value": "ITEM_TYPE_PERMANENT",
                              },
                            },
                            JASSSet {
                              "name": Name {
                                "value": "pickedItemLevel",
                              },
                              "value": Name {
                                "value": "iLevel",
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      ArrayRef {
                        "name": Name {
                          "value": "bj_stockAllowedCharged",
                        },
                        "prop": Name {
                          "value": "iLevel",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "allowedCombinations",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "allowedCombinations",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Call {
                                "args": Args {
                                  "body": Array [
                                    1,
                                    Name {
                                      "value": "allowedCombinations",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetRandomInt",
                                },
                              },
                              "operator": "==",
                              "right": 1,
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "pickedItemType",
                              },
                              "value": Name {
                                "value": "ITEM_TYPE_CHARGED",
                              },
                            },
                            JASSSet {
                              "name": Name {
                                "value": "pickedItemLevel",
                              },
                              "value": Name {
                                "value": "iLevel",
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      ArrayRef {
                        "name": Name {
                          "value": "bj_stockAllowedArtifact",
                        },
                        "prop": Name {
                          "value": "iLevel",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "allowedCombinations",
                        },
                        "value": BinaryOp {
                          "left": Name {
                            "value": "allowedCombinations",
                          },
                          "operator": "+",
                          "right": 1,
                        },
                      },
                      IfThenElse {
                        "condition": Parens {
                          "data": Array [
                            BinaryOp {
                              "left": Call {
                                "args": Args {
                                  "body": Array [
                                    1,
                                    Name {
                                      "value": "allowedCombinations",
                                    },
                                  ],
                                },
                                "name": Name {
                                  "value": "GetRandomInt",
                                },
                              },
                              "operator": "==",
                              "right": 1,
                            },
                          ],
                        },
                        "then": Statements {
                          "body": Array [
                            JASSSet {
                              "name": Name {
                                "value": "pickedItemType",
                              },
                              "value": Name {
                                "value": "ITEM_TYPE_ARTIFACT",
                              },
                            },
                            JASSSet {
                              "name": Name {
                                "value": "pickedItemLevel",
                              },
                              "value": Name {
                                "value": "iLevel",
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "iLevel",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "iLevel",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "iLevel",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "bj_MAX_ITEM_LEVEL",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Make sure we found a valid item type to add.",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "allowedCombinations",
                  },
                  "operator": "==",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    undefined,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "pickedItemType",
                },
                Name {
                  "value": "pickedItemLevel",
                },
              ],
            },
            "name": Name {
              "value": "UpdateEachStockBuilding",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    Comment {
      "value": " Perform the first update, and then arrange future updates.",
    },
    Comment {
      "value": "",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "StartStockUpdates",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "name": Name {
              "value": "PerformStockUpdates",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_stockUpdateTimer",
                },
                Name {
                  "value": "bj_STOCK_RESTOCK_INTERVAL",
                },
                true,
                FuncRef {
                  "data": Name {
                    "value": "PerformStockUpdates",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RemovePurchasedItem",
      },
      "statements": Statements {
        "body": Array [
          Call {
            "args": Args {
              "body": Array [
                Call {
                  "name": Name {
                    "value": "GetSellingUnit",
                  },
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Call {
                        "name": Name {
                          "value": "GetSoldItem",
                        },
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetItemTypeId",
                  },
                },
              ],
            },
            "name": Name {
              "value": "RemoveItemFromStock",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitNeutralBuildings",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "iLevel",
            },
            "type": "integer",
          },
          EmptyLine {},
          Comment {
            "value": " Chart of allowed stock items.",
          },
          JASSSet {
            "name": Name {
              "value": "iLevel",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "bj_stockAllowedPermanent",
                  },
                  "prop": Name {
                    "value": "iLevel",
                  },
                  "value": false,
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_stockAllowedCharged",
                  },
                  "prop": Name {
                    "value": "iLevel",
                  },
                  "value": false,
                },
                JASSSet {
                  "name": Name {
                    "value": "bj_stockAllowedArtifact",
                  },
                  "prop": Name {
                    "value": "iLevel",
                  },
                  "value": false,
                },
                JASSSet {
                  "name": Name {
                    "value": "iLevel",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "iLevel",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "iLevel",
                      },
                      "operator": ">",
                      "right": Name {
                        "value": "bj_MAX_ITEM_LEVEL",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Limit stock inventory slots.",
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_MAX_STOCK_ITEM_SLOTS",
                },
              ],
            },
            "name": Name {
              "value": "SetAllItemTypeSlots",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_MAX_STOCK_UNIT_SLOTS",
                },
              ],
            },
            "name": Name {
              "value": "SetAllUnitTypeSlots",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Arrange the first update.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_stockUpdateTimer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_stockUpdateTimer",
                },
                Name {
                  "value": "bj_STOCK_RESTOCK_INITIAL_DELAY",
                },
                false,
                FuncRef {
                  "data": Name {
                    "value": "StartStockUpdates",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
          EmptyLine {},
          Comment {
            "value": " Set up a trigger to fire whenever an item is sold.",
          },
          JASSSet {
            "name": Name {
              "value": "bj_stockItemPurchased",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTrigger",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_stockItemPurchased",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "PLAYER_NEUTRAL_PASSIVE",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "Player",
                  },
                },
                Name {
                  "value": "EVENT_PLAYER_UNIT_SELL_ITEM",
                },
                null,
              ],
            },
            "name": Name {
              "value": "TriggerRegisterPlayerUnitEvent",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_stockItemPurchased",
                },
                FuncRef {
                  "data": Name {
                    "value": "RemovePurchasedItem",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TriggerAddAction",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "MarkGameStarted",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_gameStarted",
            },
            "value": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_gameStartedTimer",
                },
              ],
            },
            "name": Name {
              "value": "DestroyTimer",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "DetectGameStarted",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_gameStartedTimer",
            },
            "value": Call {
              "name": Name {
                "value": "CreateTimer",
              },
            },
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "bj_gameStartedTimer",
                },
                Name {
                  "value": "bj_GAME_STARTED_THRESHOLD",
                },
                false,
                FuncRef {
                  "data": Name {
                    "value": "MarkGameStarted",
                  },
                },
              ],
            },
            "name": Name {
              "value": "TimerStart",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "InitBlizzard",
      },
      "statements": Statements {
        "body": Array [
          Comment {
            "value": " Set up the Neutral Victim player slot, to torture the abandoned units",
          },
          Comment {
            "value": " of defeated players.  Since some triggers expect this player slot to",
          },
          Comment {
            "value": " exist, this is performed for all maps.",
          },
          Call {
            "name": Name {
              "value": "ConfigureNeutralVictim",
            },
            "statement": true,
          },
          EmptyLine {},
          Call {
            "name": Name {
              "value": "InitBlizzardGlobals",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "InitQueuedTriggers",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "InitRescuableBehaviorBJ",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "InitDNCSounds",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "InitMapRects",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "InitSummonableCaps",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "InitNeutralBuildings",
            },
            "statement": true,
          },
          Call {
            "name": Name {
              "value": "DetectGameStarted",
            },
            "statement": true,
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Random distribution",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Used to select a random object from a given distribution of chances",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  - RandomDistReset clears the distribution list",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  - RandomDistAddItem adds a new object to the distribution list",
    },
    Comment {
      "value": "*    with a given identifier and an integer chance to be chosen",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  - RandomDistChoose will use the current distribution list to choose",
    },
    Comment {
      "value": "*    one of the objects randomly based on the chance distribution",
    },
    Comment {
      "value": "*  ",
    },
    Comment {
      "value": "*  Note that the chances are effectively normalized by their sum,",
    },
    Comment {
      "value": "*  so only the relative values of each chance are important",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomDistReset",
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_randDistCount",
            },
            "value": 0,
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomDistAddItem",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "inID",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "inChance",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_randDistID",
            },
            "prop": Name {
              "value": "bj_randDistCount",
            },
            "value": Name {
              "value": "inID",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_randDistChance",
            },
            "prop": Name {
              "value": "bj_randDistCount",
            },
            "value": Name {
              "value": "inChance",
            },
          },
          JASSSet {
            "name": Name {
              "value": "bj_randDistCount",
            },
            "value": BinaryOp {
              "left": Name {
                "value": "bj_randDistCount",
              },
              "operator": "+",
              "right": 1,
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "RandomDistChoose",
      },
      "returns": "integer",
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "sum",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "chance",
            },
            "type": "integer",
            "value": 0,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "foundID",
            },
            "type": "integer",
            "value": UnaryOp {
              "expr": 1,
              "operator": "-",
            },
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "done",
            },
            "type": "boolean",
          },
          EmptyLine {},
          Comment {
            "value": " No items?",
          },
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "bj_randDistCount",
                  },
                  "operator": "==",
                  "right": 0,
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    UnaryOp {
                      "expr": 1,
                      "operator": "-",
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Find sum of all chances",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "sum",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "sum",
                    },
                    "operator": "+",
                    "right": ArrayRef {
                      "name": Name {
                        "value": "bj_randDistChance",
                      },
                      "prop": Name {
                        "value": "index",
                      },
                    },
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "index",
                      },
                      "operator": "==",
                      "right": Name {
                        "value": "bj_randDistCount",
                      },
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Comment {
            "value": " Choose random number within the total range",
          },
          JASSSet {
            "name": Name {
              "value": "chance",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  1,
                  Name {
                    "value": "sum",
                  },
                ],
              },
              "name": Name {
                "value": "GetRandomInt",
              },
            },
          },
          EmptyLine {},
          Comment {
            "value": " Find ID which corresponds to this chance",
          },
          JASSSet {
            "name": Name {
              "value": "index",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "sum",
            },
            "value": 0,
          },
          JASSSet {
            "name": Name {
              "value": "done",
            },
            "value": false,
          },
          Loop {
            "statements": Statements {
              "body": Array [
                JASSSet {
                  "name": Name {
                    "value": "sum",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "sum",
                    },
                    "operator": "+",
                    "right": ArrayRef {
                      "name": Name {
                        "value": "bj_randDistChance",
                      },
                      "prop": Name {
                        "value": "index",
                      },
                    },
                  },
                },
                EmptyLine {},
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "chance",
                        },
                        "operator": "<=",
                        "right": Name {
                          "value": "sum",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "foundID",
                        },
                        "value": ArrayRef {
                          "name": Name {
                            "value": "bj_randDistID",
                          },
                          "prop": Name {
                            "value": "index",
                          },
                        },
                      },
                      JASSSet {
                        "name": Name {
                          "value": "done",
                        },
                        "value": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                JASSSet {
                  "name": Name {
                    "value": "index",
                  },
                  "value": BinaryOp {
                    "left": Name {
                      "value": "index",
                    },
                    "operator": "+",
                    "right": 1,
                  },
                },
                IfThenElse {
                  "condition": Parens {
                    "data": Array [
                      BinaryOp {
                        "left": Name {
                          "value": "index",
                        },
                        "operator": "==",
                        "right": Name {
                          "value": "bj_randDistCount",
                        },
                      },
                    ],
                  },
                  "then": Statements {
                    "body": Array [
                      JASSSet {
                        "name": Name {
                          "value": "done",
                        },
                        "value": true,
                      },
                    ],
                  },
                },
                EmptyLine {},
                ExitWhen {
                  "data": Array [
                    BinaryOp {
                      "left": Name {
                        "value": "done",
                      },
                      "operator": "==",
                      "right": true,
                    },
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "foundID",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Drop item",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Makes the given unit drop the given item",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Note: This could potentially cause problems if the unit is standing",
    },
    Comment {
      "value": "*        right on the edge of an unpathable area and happens to drop the",
    },
    Comment {
      "value": "*        item into the unpathable area where nobody can get it...",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "UnitDropItem",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "inUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "inItemID",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "radius",
            },
            "type": "real",
            "value": 32,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "unitY",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "droppedItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "inItemID",
                  },
                  "operator": "==",
                  "right": UnaryOp {
                    "expr": 1,
                    "operator": "-",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    null,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "unitX",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "inUnit",
                  },
                ],
              },
              "name": Name {
                "value": "GetUnitX",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "unitY",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "inUnit",
                  },
                ],
              },
              "name": Name {
                "value": "GetUnitY",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "x",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "unitX",
                    },
                    "operator": "-",
                    "right": Name {
                      "value": "radius",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "unitX",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "radius",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "GetRandomReal",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "y",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "unitY",
                    },
                    "operator": "-",
                    "right": Name {
                      "value": "radius",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "unitY",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "radius",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "GetRandomReal",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "droppedItem",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "inItemID",
                  },
                  Name {
                    "value": "x",
                  },
                  Name {
                    "value": "y",
                  },
                ],
              },
              "name": Name {
                "value": "CreateItem",
              },
            },
          },
          EmptyLine {},
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "droppedItem",
                },
                Call {
                  "args": Args {
                    "body": Array [
                      Name {
                        "value": "inUnit",
                      },
                    ],
                  },
                  "name": Name {
                    "value": "GetUnitTypeId",
                  },
                },
              ],
            },
            "name": Name {
              "value": "SetItemDropID",
            },
            "statement": true,
          },
          Call {
            "args": Args {
              "body": Array [
                Name {
                  "value": "droppedItem",
                },
              ],
            },
            "name": Name {
              "value": "UpdateStockAvailability",
            },
            "statement": true,
          },
          EmptyLine {},
          Return {
            "data": Array [
              Name {
                "value": "droppedItem",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "WidgetDropItem",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "inWidget",
            },
            "type": Name {
              "value": "widget",
            },
          },
          Param {
            "name": Name {
              "value": "inItemID",
            },
            "type": "integer",
          },
        ],
      },
      "returns": Name {
        "value": "item",
      },
      "statements": Statements {
        "body": Array [
          Variable {
            "access": "local",
            "name": Name {
              "value": "x",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "y",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "radius",
            },
            "type": "real",
            "value": 32,
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "widgetX",
            },
            "type": "real",
          },
          Variable {
            "access": "local",
            "name": Name {
              "value": "widgetY",
            },
            "type": "real",
          },
          EmptyLine {},
          IfThenElse {
            "condition": Parens {
              "data": Array [
                BinaryOp {
                  "left": Name {
                    "value": "inItemID",
                  },
                  "operator": "==",
                  "right": UnaryOp {
                    "expr": 1,
                    "operator": "-",
                  },
                },
              ],
            },
            "then": Statements {
              "body": Array [
                Return {
                  "data": Array [
                    null,
                  ],
                },
              ],
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "widgetX",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "inWidget",
                  },
                ],
              },
              "name": Name {
                "value": "GetWidgetX",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "widgetY",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "inWidget",
                  },
                ],
              },
              "name": Name {
                "value": "GetWidgetY",
              },
            },
          },
          EmptyLine {},
          JASSSet {
            "name": Name {
              "value": "x",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "widgetX",
                    },
                    "operator": "-",
                    "right": Name {
                      "value": "radius",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "widgetX",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "radius",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "GetRandomReal",
              },
            },
          },
          JASSSet {
            "name": Name {
              "value": "y",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  BinaryOp {
                    "left": Name {
                      "value": "widgetY",
                    },
                    "operator": "-",
                    "right": Name {
                      "value": "radius",
                    },
                  },
                  BinaryOp {
                    "left": Name {
                      "value": "widgetY",
                    },
                    "operator": "+",
                    "right": Name {
                      "value": "radius",
                    },
                  },
                ],
              },
              "name": Name {
                "value": "GetRandomReal",
              },
            },
          },
          EmptyLine {},
          Return {
            "data": Array [
              Call {
                "args": Args {
                  "body": Array [
                    Name {
                      "value": "inItemID",
                    },
                    Name {
                      "value": "x",
                    },
                    Name {
                      "value": "y",
                    },
                  ],
                },
                "name": Name {
                  "value": "CreateItem",
                },
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": "***************************************************************************",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Instanced Object Operation Functions",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "*  Get/Set specific fields for single unit/item/ability instance",
    },
    Comment {
      "value": "*",
    },
    Comment {
      "value": "***************************************************************************",
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzIsLastInstanceObjectFunctionSuccessful",
      },
      "returns": "boolean",
      "statements": Statements {
        "body": Array [
          Return {
            "data": Array [
              Name {
                "value": "bj_lastInstObjFuncSuccessful",
              },
            ],
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": " Ability",
    },
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityBooleanFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitybooleanfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityBooleanField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityIntegerFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityintegerfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityIntegerField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityRealFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityrealfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityRealField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityStringFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitystringfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityStringField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityBooleanLevelFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitybooleanlevelfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityBooleanLevelField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityIntegerLevelFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityintegerlevelfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityIntegerLevelField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityRealLevelFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityreallevelfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityRealLevelField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityStringLevelFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitystringlevelfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityStringLevelField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityBooleanLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitybooleanlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "index",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityBooleanLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityIntegerLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityintegerlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "index",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityIntegerLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityRealLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityreallevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "index",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityRealLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetAbilityStringLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitystringlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "index",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetAbilityStringLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzAddAbilityBooleanLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitybooleanlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzAddAbilityBooleanLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzAddAbilityIntegerLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityintegerlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzAddAbilityIntegerLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzAddAbilityRealLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityreallevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzAddAbilityRealLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzAddAbilityStringLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitystringlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzAddAbilityStringLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzRemoveAbilityBooleanLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitybooleanlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzRemoveAbilityBooleanLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzRemoveAbilityIntegerLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityintegerlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzRemoveAbilityIntegerLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzRemoveAbilityRealLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilityreallevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzRemoveAbilityRealLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzRemoveAbilityStringLevelArrayFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichAbility",
            },
            "type": Name {
              "value": "ability",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "abilitystringlevelarrayfield",
            },
          },
          Param {
            "name": Name {
              "value": "level",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichAbility",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "level",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzRemoveAbilityStringLevelArrayField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": " Item ",
    },
    Comment {
      "value": "=============================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzItemAddAbilityBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "abilCode",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichItem",
                  },
                  Name {
                    "value": "abilCode",
                  },
                ],
              },
              "name": Name {
                "value": "BlzItemAddAbility",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzItemRemoveAbilityBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "abilCode",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichItem",
                  },
                  Name {
                    "value": "abilCode",
                  },
                ],
              },
              "name": Name {
                "value": "BlzItemRemoveAbility",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetItemBooleanFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "itembooleanfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichItem",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetItemBooleanField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetItemIntegerFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "itemintegerfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichItem",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetItemIntegerField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetItemRealFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "itemrealfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichItem",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetItemRealField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetItemStringFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichItem",
            },
            "type": Name {
              "value": "item",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "itemstringfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichItem",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetItemStringField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    EmptyLine {},
    Comment {
      "value": " Unit ",
    },
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetUnitBooleanFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "unitbooleanfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetUnitBooleanField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetUnitIntegerFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "unitintegerfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetUnitIntegerField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetUnitRealFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "unitrealfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetUnitRealField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetUnitStringFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "unitstringfield",
            },
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetUnitStringField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": " Unit Weapon",
    },
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetUnitWeaponBooleanFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "unitweaponbooleanfield",
            },
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "boolean",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "index",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetUnitWeaponBooleanField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetUnitWeaponIntegerFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "unitweaponintegerfield",
            },
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "integer",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "index",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetUnitWeaponIntegerField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetUnitWeaponRealFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "unitweaponrealfield",
            },
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "real",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "index",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetUnitWeaponRealField",
              },
            },
          },
        ],
      },
    },
    EmptyLine {},
    Comment {
      "value": "===========================================================================",
    },
    JASSFunction {
      "access": "global",
      "name": Name {
        "value": "BlzSetUnitWeaponStringFieldBJ",
      },
      "params": Params {
        "body": Array [
          Param {
            "name": Name {
              "value": "whichUnit",
            },
            "type": Name {
              "value": "unit",
            },
          },
          Param {
            "name": Name {
              "value": "whichField",
            },
            "type": Name {
              "value": "unitweaponstringfield",
            },
          },
          Param {
            "name": Name {
              "value": "index",
            },
            "type": "integer",
          },
          Param {
            "name": Name {
              "value": "value",
            },
            "type": "string",
          },
        ],
      },
      "statements": Statements {
        "body": Array [
          JASSSet {
            "name": Name {
              "value": "bj_lastInstObjFuncSuccessful",
            },
            "value": Call {
              "args": Args {
                "body": Array [
                  Name {
                    "value": "whichUnit",
                  },
                  Name {
                    "value": "whichField",
                  },
                  Name {
                    "value": "index",
                  },
                  Name {
                    "value": "value",
                  },
                ],
              },
              "name": Name {
                "value": "BlzSetUnitWeaponStringField",
              },
            },
          },
        ],
      },
    },
  ],
}
`;
